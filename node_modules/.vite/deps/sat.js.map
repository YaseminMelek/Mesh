{
  "version": 3,
  "sources": ["../../sat/SAT.js"],
  "sourcesContent": ["// Version 0.9.0 - Copyright 2012 - 2021 -  Jim Riecken <jimr@jimr.ca>\n//\n// Released under the MIT License - https://github.com/jriecken/sat-js\n//\n// A simple library for determining intersections of circles and\n// polygons using the Separating Axis Theorem.\n/** @preserve SAT.js - Version 0.9.0 - Copyright 2012 - 2021 - Jim Riecken <jimr@jimr.ca> - released under the MIT License. https://github.com/jriecken/sat-js */\n\n/*global define: false, module: false*/\n/*jshint shadow:true, sub:true, forin:true, noarg:true, noempty:true,\n  eqeqeq:true, bitwise:true, strict:true, undef:true,\n  curly:true, browser:true */\n\n// Create a UMD wrapper for SAT. Works in:\n//\n//  - Plain browser via global SAT variable\n//  - AMD loader (like require.js)\n//  - Node.js\n//\n// The quoted properties all over the place are used so that the Closure Compiler\n// does not mangle the exposed API in advanced mode.\n/**\n * @param {*} root - The global scope\n * @param {Function} factory - Factory that creates SAT module\n */\n(function (root, factory) {\n  \"use strict\";\n  if (typeof define === 'function' && define['amd']) {\n    define(factory);\n  } else if (typeof exports === 'object') {\n    module['exports'] = factory();\n  } else {\n    root['SAT'] = factory();\n  }\n}(this, function () {\n  \"use strict\";\n\n  var SAT = {};\n\n  //\n  // ## Vector\n  //\n  // Represents a vector in two dimensions with `x` and `y` properties.\n\n\n  // Create a new Vector, optionally passing in the `x` and `y` coordinates. If\n  // a coordinate is not specified, it will be set to `0`\n  /**\n   * @param {?number=} x The x position.\n   * @param {?number=} y The y position.\n   * @constructor\n   */\n  function Vector(x, y) {\n    this['x'] = x || 0;\n    this['y'] = y || 0;\n  }\n  SAT['Vector'] = Vector;\n  // Alias `Vector` as `V`\n  SAT['V'] = Vector;\n\n\n  // Copy the values of another Vector into this one.\n  /**\n   * @param {Vector} other The other Vector.\n   * @return {Vector} This for chaining.\n   */\n  Vector.prototype['copy'] = Vector.prototype.copy = function (other) {\n    this['x'] = other['x'];\n    this['y'] = other['y'];\n    return this;\n  };\n\n  // Create a new vector with the same coordinates as this on.\n  /**\n   * @return {Vector} The new cloned vector\n   */\n  Vector.prototype['clone'] = Vector.prototype.clone = function () {\n    return new Vector(this['x'], this['y']);\n  };\n\n  // Change this vector to be perpendicular to what it was before. (Effectively\n  // roatates it 90 degrees in a clockwise direction)\n  /**\n   * @return {Vector} This for chaining.\n   */\n  Vector.prototype['perp'] = Vector.prototype.perp = function () {\n    var x = this['x'];\n    this['x'] = this['y'];\n    this['y'] = -x;\n    return this;\n  };\n\n  // Rotate this vector (counter-clockwise) by the specified angle (in radians).\n  /**\n   * @param {number} angle The angle to rotate (in radians)\n   * @return {Vector} This for chaining.\n   */\n  Vector.prototype['rotate'] = Vector.prototype.rotate = function (angle) {\n    var x = this['x'];\n    var y = this['y'];\n    this['x'] = x * Math.cos(angle) - y * Math.sin(angle);\n    this['y'] = x * Math.sin(angle) + y * Math.cos(angle);\n    return this;\n  };\n\n  // Reverse this vector.\n  /**\n   * @return {Vector} This for chaining.\n   */\n  Vector.prototype['reverse'] = Vector.prototype.reverse = function () {\n    this['x'] = -this['x'];\n    this['y'] = -this['y'];\n    return this;\n  };\n\n\n  // Normalize this vector.  (make it have length of `1`)\n  /**\n   * @return {Vector} This for chaining.\n   */\n  Vector.prototype['normalize'] = Vector.prototype.normalize = function () {\n    var d = this.len();\n    if (d > 0) {\n      this['x'] = this['x'] / d;\n      this['y'] = this['y'] / d;\n    }\n    return this;\n  };\n\n  // Add another vector to this one.\n  /**\n   * @param {Vector} other The other Vector.\n   * @return {Vector} This for chaining.\n   */\n  Vector.prototype['add'] = Vector.prototype.add = function (other) {\n    this['x'] += other['x'];\n    this['y'] += other['y'];\n    return this;\n  };\n\n  // Subtract another vector from this one.\n  /**\n   * @param {Vector} other The other Vector.\n   * @return {Vector} This for chaiing.\n   */\n  Vector.prototype['sub'] = Vector.prototype.sub = function (other) {\n    this['x'] -= other['x'];\n    this['y'] -= other['y'];\n    return this;\n  };\n\n  // Scale this vector. An independent scaling factor can be provided\n  // for each axis, or a single scaling factor that will scale both `x` and `y`.\n  /**\n   * @param {number} x The scaling factor in the x direction.\n   * @param {?number=} y The scaling factor in the y direction.  If this\n   *   is not specified, the x scaling factor will be used.\n   * @return {Vector} This for chaining.\n   */\n  Vector.prototype['scale'] = Vector.prototype.scale = function (x, y) {\n    this['x'] *= x;\n    this['y'] *= typeof y != 'undefined' ? y : x;\n    return this;\n  };\n\n  // Project this vector on to another vector.\n  /**\n   * @param {Vector} other The vector to project onto.\n   * @return {Vector} This for chaining.\n   */\n  Vector.prototype['project'] = Vector.prototype.project = function (other) {\n    var amt = this.dot(other) / other.len2();\n    this['x'] = amt * other['x'];\n    this['y'] = amt * other['y'];\n    return this;\n  };\n\n  // Project this vector onto a vector of unit length. This is slightly more efficient\n  // than `project` when dealing with unit vectors.\n  /**\n   * @param {Vector} other The unit vector to project onto.\n   * @return {Vector} This for chaining.\n   */\n  Vector.prototype['projectN'] = Vector.prototype.projectN = function (other) {\n    var amt = this.dot(other);\n    this['x'] = amt * other['x'];\n    this['y'] = amt * other['y'];\n    return this;\n  };\n\n  // Reflect this vector on an arbitrary axis.\n  /**\n   * @param {Vector} axis The vector representing the axis.\n   * @return {Vector} This for chaining.\n   */\n  Vector.prototype['reflect'] = Vector.prototype.reflect = function (axis) {\n    var x = this['x'];\n    var y = this['y'];\n    this.project(axis).scale(2);\n    this['x'] -= x;\n    this['y'] -= y;\n    return this;\n  };\n\n  // Reflect this vector on an arbitrary axis (represented by a unit vector). This is\n  // slightly more efficient than `reflect` when dealing with an axis that is a unit vector.\n  /**\n   * @param {Vector} axis The unit vector representing the axis.\n   * @return {Vector} This for chaining.\n   */\n  Vector.prototype['reflectN'] = Vector.prototype.reflectN = function (axis) {\n    var x = this['x'];\n    var y = this['y'];\n    this.projectN(axis).scale(2);\n    this['x'] -= x;\n    this['y'] -= y;\n    return this;\n  };\n\n  // Get the dot product of this vector and another.\n  /**\n   * @param {Vector}  other The vector to dot this one against.\n   * @return {number} The dot product.\n   */\n  Vector.prototype['dot'] = Vector.prototype.dot = function (other) {\n    return this['x'] * other['x'] + this['y'] * other['y'];\n  };\n\n  // Get the squared length of this vector.\n  /**\n   * @return {number} The length^2 of this vector.\n   */\n  Vector.prototype['len2'] = Vector.prototype.len2 = function () {\n    return this.dot(this);\n  };\n\n  // Get the length of this vector.\n  /**\n   * @return {number} The length of this vector.\n   */\n  Vector.prototype['len'] = Vector.prototype.len = function () {\n    return Math.sqrt(this.len2());\n  };\n\n  // ## Circle\n  //\n  // Represents a circle with a position and a radius.\n\n  // Create a new circle, optionally passing in a position and/or radius. If no position\n  // is given, the circle will be at `(0,0)`. If no radius is provided, the circle will\n  // have a radius of `0`.\n  /**\n   * @param {Vector=} pos A vector representing the position of the center of the circle\n   * @param {?number=} r The radius of the circle\n   * @constructor\n   */\n  function Circle(pos, r) {\n    this['pos'] = pos || new Vector();\n    this['r'] = r || 0;\n    this['offset'] = new Vector();\n  }\n  SAT['Circle'] = Circle;\n\n  // Compute the axis-aligned bounding box (AABB) of this Circle.\n  //\n  // Note: Returns a _new_ `Box` each time you call this.\n  /**\n   * @return {Polygon} The AABB\n   */\n  Circle.prototype['getAABBAsBox'] = Circle.prototype.getAABBAsBox = function () {\n    var r = this['r'];\n    var corner = this['pos'].clone().add(this['offset']).sub(new Vector(r, r));\n    return new Box(corner, r * 2, r * 2);\n  };\n\n  // Compute the axis-aligned bounding box (AABB) of this Circle.\n  //\n  // Note: Returns a _new_ `Polygon` each time you call this.\n  /**\n   * @return {Polygon} The AABB\n   */\n  Circle.prototype['getAABB'] = Circle.prototype.getAABB = function () {\n    return this.getAABBAsBox().toPolygon();\n  };\n\n  // Set the current offset to apply to the radius.\n  /**\n   * @param {Vector} offset The new offset vector.\n   * @return {Circle} This for chaining.\n   */\n  Circle.prototype['setOffset'] = Circle.prototype.setOffset = function (offset) {\n    this['offset'] = offset;\n    return this;\n  };\n\n  // ## Polygon\n  //\n  // Represents a *convex* polygon with any number of points (specified in counter-clockwise order)\n  //\n  // Note: Do _not_ manually change the `points`, `angle`, or `offset` properties. Use the\n  // provided setters. Otherwise the calculated properties will not be updated correctly.\n  //\n  // `pos` can be changed directly.\n\n  // Create a new polygon, passing in a position vector, and an array of points (represented\n  // by vectors relative to the position vector). If no position is passed in, the position\n  // of the polygon will be `(0,0)`.\n  /**\n   * @param {Vector=} pos A vector representing the origin of the polygon. (all other\n   *   points are relative to this one)\n   * @param {Array<Vector>=} points An array of vectors representing the points in the polygon,\n   *   in counter-clockwise order.\n   * @constructor\n   */\n  function Polygon(pos, points) {\n    this['pos'] = pos || new Vector();\n    this['angle'] = 0;\n    this['offset'] = new Vector();\n    this.setPoints(points || []);\n  }\n  SAT['Polygon'] = Polygon;\n\n  // Set the points of the polygon. Any consecutive duplicate points will be combined.\n  //\n  // Note: The points are counter-clockwise *with respect to the coordinate system*.\n  // If you directly draw the points on a screen that has the origin at the top-left corner\n  // it will _appear_ visually that the points are being specified clockwise. This is just\n  // because of the inversion of the Y-axis when being displayed.\n  /**\n   * @param {Array<Vector>=} points An array of vectors representing the points in the polygon,\n   *   in counter-clockwise order.\n   * @return {Polygon} This for chaining.\n   */\n  Polygon.prototype['setPoints'] = Polygon.prototype.setPoints = function (points) {\n    // Only re-allocate if this is a new polygon or the number of points has changed.\n    var lengthChanged = !this['points'] || this['points'].length !== points.length;\n    if (lengthChanged) {\n      var i;\n      var calcPoints = this['calcPoints'] = [];\n      var edges = this['edges'] = [];\n      var normals = this['normals'] = [];\n      // Allocate the vector arrays for the calculated properties\n      for (i = 0; i < points.length; i++) {\n        // Remove consecutive duplicate points\n        var p1 = points[i];\n        var p2 = i < points.length - 1 ? points[i + 1] : points[0];\n        if (p1 !== p2 && p1.x === p2.x && p1.y === p2.y) {\n          points.splice(i, 1);\n          i -= 1;\n          continue;\n        }\n        calcPoints.push(new Vector());\n        edges.push(new Vector());\n        normals.push(new Vector());\n      }\n    }\n    this['points'] = points;\n    this._recalc();\n    return this;\n  };\n\n  // Set the current rotation angle of the polygon.\n  /**\n   * @param {number} angle The current rotation angle (in radians).\n   * @return {Polygon} This for chaining.\n   */\n  Polygon.prototype['setAngle'] = Polygon.prototype.setAngle = function (angle) {\n    this['angle'] = angle;\n    this._recalc();\n    return this;\n  };\n\n  // Set the current offset to apply to the `points` before applying the `angle` rotation.\n  /**\n   * @param {Vector} offset The new offset vector.\n   * @return {Polygon} This for chaining.\n   */\n  Polygon.prototype['setOffset'] = Polygon.prototype.setOffset = function (offset) {\n    this['offset'] = offset;\n    this._recalc();\n    return this;\n  };\n\n  // Rotates this polygon counter-clockwise around the origin of *its local coordinate system* (i.e. `pos`).\n  //\n  // Note: This changes the **original** points (so any `angle` will be applied on top of this rotation).\n  /**\n   * @param {number} angle The angle to rotate (in radians)\n   * @return {Polygon} This for chaining.\n   */\n  Polygon.prototype['rotate'] = Polygon.prototype.rotate = function (angle) {\n    var points = this['points'];\n    var len = points.length;\n    for (var i = 0; i < len; i++) {\n      points[i].rotate(angle);\n    }\n    this._recalc();\n    return this;\n  };\n\n  // Translates the points of this polygon by a specified amount relative to the origin of *its own coordinate\n  // system* (i.e. `pos`).\n  //\n  // This is most useful to change the \"center point\" of a polygon. If you just want to move the whole polygon, change\n  // the coordinates of `pos`.\n  //\n  // Note: This changes the **original** points (so any `offset` will be applied on top of this translation)\n  /**\n   * @param {number} x The horizontal amount to translate.\n   * @param {number} y The vertical amount to translate.\n   * @return {Polygon} This for chaining.\n   */\n  Polygon.prototype['translate'] = Polygon.prototype.translate = function (x, y) {\n    var points = this['points'];\n    var len = points.length;\n    for (var i = 0; i < len; i++) {\n      points[i]['x'] += x;\n      points[i]['y'] += y;\n    }\n    this._recalc();\n    return this;\n  };\n\n\n  // Computes the calculated collision polygon. Applies the `angle` and `offset` to the original points then recalculates the\n  // edges and normals of the collision polygon.\n  /**\n   * @return {Polygon} This for chaining.\n   */\n  Polygon.prototype._recalc = function () {\n    // Calculated points - this is what is used for underlying collisions and takes into account\n    // the angle/offset set on the polygon.\n    var calcPoints = this['calcPoints'];\n    // The edges here are the direction of the `n`th edge of the polygon, relative to\n    // the `n`th point. If you want to draw a given edge from the edge value, you must\n    // first translate to the position of the starting point.\n    var edges = this['edges'];\n    // The normals here are the direction of the normal for the `n`th edge of the polygon, relative\n    // to the position of the `n`th point. If you want to draw an edge normal, you must first\n    // translate to the position of the starting point.\n    var normals = this['normals'];\n    // Copy the original points array and apply the offset/angle\n    var points = this['points'];\n    var offset = this['offset'];\n    var angle = this['angle'];\n    var len = points.length;\n    var i;\n    for (i = 0; i < len; i++) {\n      var calcPoint = calcPoints[i].copy(points[i]);\n      calcPoint['x'] += offset['x'];\n      calcPoint['y'] += offset['y'];\n      if (angle !== 0) {\n        calcPoint.rotate(angle);\n      }\n    }\n    // Calculate the edges/normals\n    for (i = 0; i < len; i++) {\n      var p1 = calcPoints[i];\n      var p2 = i < len - 1 ? calcPoints[i + 1] : calcPoints[0];\n      var e = edges[i].copy(p2).sub(p1);\n      normals[i].copy(e).perp().normalize();\n    }\n    return this;\n  };\n\n\n  // Compute the axis-aligned bounding box. Any current state\n  // (translations/rotations) will be applied before constructing the AABB.\n  //\n  // Note: Returns a _new_ `Box` each time you call this.\n  /**\n   * @return {Polygon} The AABB\n   */\n  Polygon.prototype['getAABBAsBox'] = Polygon.prototype.getAABBAsBox = function () {\n    var points = this['calcPoints'];\n    var len = points.length;\n    var xMin = points[0]['x'];\n    var yMin = points[0]['y'];\n    var xMax = points[0]['x'];\n    var yMax = points[0]['y'];\n    for (var i = 1; i < len; i++) {\n      var point = points[i];\n      if (point['x'] < xMin) {\n        xMin = point['x'];\n      }\n      else if (point['x'] > xMax) {\n        xMax = point['x'];\n      }\n      if (point['y'] < yMin) {\n        yMin = point['y'];\n      }\n      else if (point['y'] > yMax) {\n        yMax = point['y'];\n      }\n    }\n    return new Box(this['pos'].clone().add(new Vector(xMin, yMin)), xMax - xMin, yMax - yMin);\n  };\n\n\n  // Compute the axis-aligned bounding box. Any current state\n  // (translations/rotations) will be applied before constructing the AABB.\n  //\n  // Note: Returns a _new_ `Polygon` each time you call this.\n  /**\n   * @return {Polygon} The AABB\n   */\n  Polygon.prototype['getAABB'] = Polygon.prototype.getAABB = function () {\n    return this.getAABBAsBox().toPolygon();\n  };\n\n  // Compute the centroid (geometric center) of the polygon. Any current state\n  // (translations/rotations) will be applied before computing the centroid.\n  //\n  // See https://en.wikipedia.org/wiki/Centroid#Centroid_of_a_polygon\n  //\n  // Note: Returns a _new_ `Vector` each time you call this.\n  /**\n   * @return {Vector} A Vector that contains the coordinates of the Centroid.\n   */\n  Polygon.prototype['getCentroid'] = Polygon.prototype.getCentroid = function () {\n    var points = this['calcPoints'];\n    var len = points.length;\n    var cx = 0;\n    var cy = 0;\n    var ar = 0;\n    for (var i = 0; i < len; i++) {\n      var p1 = points[i];\n      var p2 = i === len - 1 ? points[0] : points[i + 1]; // Loop around if last point\n      var a = p1['x'] * p2['y'] - p2['x'] * p1['y'];\n      cx += (p1['x'] + p2['x']) * a;\n      cy += (p1['y'] + p2['y']) * a;\n      ar += a;\n    }\n    ar = ar * 3; // we want 1 / 6 the area and we currently have 2*area\n    cx = cx / ar;\n    cy = cy / ar;\n    return new Vector(cx, cy);\n  };\n\n\n  // ## Box\n  //\n  // Represents an axis-aligned box, with a width and height.\n\n\n  // Create a new box, with the specified position, width, and height. If no position\n  // is given, the position will be `(0,0)`. If no width or height are given, they will\n  // be set to `0`.\n  /**\n   * @param {Vector=} pos A vector representing the bottom-left of the box (i.e. the smallest x and smallest y value).\n   * @param {?number=} w The width of the box.\n   * @param {?number=} h The height of the box.\n   * @constructor\n   */\n  function Box(pos, w, h) {\n    this['pos'] = pos || new Vector();\n    this['w'] = w || 0;\n    this['h'] = h || 0;\n  }\n  SAT['Box'] = Box;\n\n  // Returns a polygon whose edges are the same as this box.\n  /**\n   * @return {Polygon} A new Polygon that represents this box.\n   */\n  Box.prototype['toPolygon'] = Box.prototype.toPolygon = function () {\n    var pos = this['pos'];\n    var w = this['w'];\n    var h = this['h'];\n    return new Polygon(new Vector(pos['x'], pos['y']), [\n      new Vector(), new Vector(w, 0),\n      new Vector(w, h), new Vector(0, h)\n    ]);\n  };\n\n  // ## Response\n  //\n  // An object representing the result of an intersection. Contains:\n  //  - The two objects participating in the intersection\n  //  - The vector representing the minimum change necessary to extract the first object\n  //    from the second one (as well as a unit vector in that direction and the magnitude\n  //    of the overlap)\n  //  - Whether the first object is entirely inside the second, and vice versa.\n  /**\n   * @constructor\n   */\n  function Response() {\n    this['a'] = null;\n    this['b'] = null;\n    this['overlapN'] = new Vector();\n    this['overlapV'] = new Vector();\n    this.clear();\n  }\n  SAT['Response'] = Response;\n\n  // Set some values of the response back to their defaults.  Call this between tests if\n  // you are going to reuse a single Response object for multiple intersection tests (recommented\n  // as it will avoid allcating extra memory)\n  /**\n   * @return {Response} This for chaining\n   */\n  Response.prototype['clear'] = Response.prototype.clear = function () {\n    this['aInB'] = true;\n    this['bInA'] = true;\n    this['overlap'] = Number.MAX_VALUE;\n    return this;\n  };\n\n  // ## Object Pools\n\n  // A pool of `Vector` objects that are used in calculations to avoid\n  // allocating memory.\n  /**\n   * @type {Array<Vector>}\n   */\n  var T_VECTORS = [];\n  for (var i = 0; i < 10; i++) { T_VECTORS.push(new Vector()); }\n\n  // A pool of arrays of numbers used in calculations to avoid allocating\n  // memory.\n  /**\n   * @type {Array<Array<number>>}\n   */\n  var T_ARRAYS = [];\n  for (var i = 0; i < 5; i++) { T_ARRAYS.push([]); }\n\n  // Temporary response used for polygon hit detection.\n  /**\n   * @type {Response}\n   */\n  var T_RESPONSE = new Response();\n\n  // Tiny \"point\" polygon used for polygon hit detection.\n  /**\n   * @type {Polygon}\n   */\n  var TEST_POINT = new Box(new Vector(), 0.000001, 0.000001).toPolygon();\n\n  // ## Helper Functions\n\n  // Flattens the specified array of points onto a unit vector axis,\n  // resulting in a one dimensional range of the minimum and\n  // maximum value on that axis.\n  /**\n   * @param {Array<Vector>} points The points to flatten.\n   * @param {Vector} normal The unit vector axis to flatten on.\n   * @param {Array<number>} result An array.  After calling this function,\n   *   result[0] will be the minimum value,\n   *   result[1] will be the maximum value.\n   */\n  function flattenPointsOn(points, normal, result) {\n    var min = Number.MAX_VALUE;\n    var max = -Number.MAX_VALUE;\n    var len = points.length;\n    for (var i = 0; i < len; i++) {\n      // The magnitude of the projection of the point onto the normal\n      var dot = points[i].dot(normal);\n      if (dot < min) { min = dot; }\n      if (dot > max) { max = dot; }\n    }\n    result[0] = min; result[1] = max;\n  }\n\n  // Check whether two convex polygons are separated by the specified\n  // axis (must be a unit vector).\n  /**\n   * @param {Vector} aPos The position of the first polygon.\n   * @param {Vector} bPos The position of the second polygon.\n   * @param {Array<Vector>} aPoints The points in the first polygon.\n   * @param {Array<Vector>} bPoints The points in the second polygon.\n   * @param {Vector} axis The axis (unit sized) to test against.  The points of both polygons\n   *   will be projected onto this axis.\n   * @param {Response=} response A Response object (optional) which will be populated\n   *   if the axis is not a separating axis.\n   * @return {boolean} true if it is a separating axis, false otherwise.  If false,\n   *   and a response is passed in, information about how much overlap and\n   *   the direction of the overlap will be populated.\n   */\n  function isSeparatingAxis(aPos, bPos, aPoints, bPoints, axis, response) {\n    var rangeA = T_ARRAYS.pop();\n    var rangeB = T_ARRAYS.pop();\n    // The magnitude of the offset between the two polygons\n    var offsetV = T_VECTORS.pop().copy(bPos).sub(aPos);\n    var projectedOffset = offsetV.dot(axis);\n    // Project the polygons onto the axis.\n    flattenPointsOn(aPoints, axis, rangeA);\n    flattenPointsOn(bPoints, axis, rangeB);\n    // Move B's range to its position relative to A.\n    rangeB[0] += projectedOffset;\n    rangeB[1] += projectedOffset;\n    // Check if there is a gap. If there is, this is a separating axis and we can stop\n    if (rangeA[0] > rangeB[1] || rangeB[0] > rangeA[1]) {\n      T_VECTORS.push(offsetV);\n      T_ARRAYS.push(rangeA);\n      T_ARRAYS.push(rangeB);\n      return true;\n    }\n    // This is not a separating axis. If we're calculating a response, calculate the overlap.\n    if (response) {\n      var overlap = 0;\n      // A starts further left than B\n      if (rangeA[0] < rangeB[0]) {\n        response['aInB'] = false;\n        // A ends before B does. We have to pull A out of B\n        if (rangeA[1] < rangeB[1]) {\n          overlap = rangeA[1] - rangeB[0];\n          response['bInA'] = false;\n          // B is fully inside A.  Pick the shortest way out.\n        } else {\n          var option1 = rangeA[1] - rangeB[0];\n          var option2 = rangeB[1] - rangeA[0];\n          overlap = option1 < option2 ? option1 : -option2;\n        }\n        // B starts further left than A\n      } else {\n        response['bInA'] = false;\n        // B ends before A ends. We have to push A out of B\n        if (rangeA[1] > rangeB[1]) {\n          overlap = rangeA[0] - rangeB[1];\n          response['aInB'] = false;\n          // A is fully inside B.  Pick the shortest way out.\n        } else {\n          var option1 = rangeA[1] - rangeB[0];\n          var option2 = rangeB[1] - rangeA[0];\n          overlap = option1 < option2 ? option1 : -option2;\n        }\n      }\n      // If this is the smallest amount of overlap we've seen so far, set it as the minimum overlap.\n      var absOverlap = Math.abs(overlap);\n      if (absOverlap < response['overlap']) {\n        response['overlap'] = absOverlap;\n        response['overlapN'].copy(axis);\n        if (overlap < 0) {\n          response['overlapN'].reverse();\n        }\n      }\n    }\n    T_VECTORS.push(offsetV);\n    T_ARRAYS.push(rangeA);\n    T_ARRAYS.push(rangeB);\n    return false;\n  }\n  SAT['isSeparatingAxis'] = isSeparatingAxis;\n\n  // Calculates which Voronoi region a point is on a line segment.\n  // It is assumed that both the line and the point are relative to `(0,0)`\n  //\n  //            |       (0)      |\n  //     (-1)  [S]--------------[E]  (1)\n  //            |       (0)      |\n  /**\n   * @param {Vector} line The line segment.\n   * @param {Vector} point The point.\n   * @return  {number} LEFT_VORONOI_REGION (-1) if it is the left region,\n   *          MIDDLE_VORONOI_REGION (0) if it is the middle region,\n   *          RIGHT_VORONOI_REGION (1) if it is the right region.\n   */\n  function voronoiRegion(line, point) {\n    var len2 = line.len2();\n    var dp = point.dot(line);\n    // If the point is beyond the start of the line, it is in the\n    // left voronoi region.\n    if (dp < 0) { return LEFT_VORONOI_REGION; }\n    // If the point is beyond the end of the line, it is in the\n    // right voronoi region.\n    else if (dp > len2) { return RIGHT_VORONOI_REGION; }\n    // Otherwise, it's in the middle one.\n    else { return MIDDLE_VORONOI_REGION; }\n  }\n  // Constants for Voronoi regions\n  /**\n   * @const\n   */\n  var LEFT_VORONOI_REGION = -1;\n  /**\n   * @const\n   */\n  var MIDDLE_VORONOI_REGION = 0;\n  /**\n   * @const\n   */\n  var RIGHT_VORONOI_REGION = 1;\n\n  // ## Collision Tests\n\n  // Check if a point is inside a circle.\n  /**\n   * @param {Vector} p The point to test.\n   * @param {Circle} c The circle to test.\n   * @return {boolean} true if the point is inside the circle, false if it is not.\n   */\n  function pointInCircle(p, c) {\n    var differenceV = T_VECTORS.pop().copy(p).sub(c['pos']).sub(c['offset']);\n    var radiusSq = c['r'] * c['r'];\n    var distanceSq = differenceV.len2();\n    T_VECTORS.push(differenceV);\n    // If the distance between is smaller than the radius then the point is inside the circle.\n    return distanceSq <= radiusSq;\n  }\n  SAT['pointInCircle'] = pointInCircle;\n\n  // Check if a point is inside a convex polygon.\n  /**\n   * @param {Vector} p The point to test.\n   * @param {Polygon} poly The polygon to test.\n   * @return {boolean} true if the point is inside the polygon, false if it is not.\n   */\n  function pointInPolygon(p, poly) {\n    TEST_POINT['pos'].copy(p);\n    T_RESPONSE.clear();\n    var result = testPolygonPolygon(TEST_POINT, poly, T_RESPONSE);\n    if (result) {\n      result = T_RESPONSE['aInB'];\n    }\n    return result;\n  }\n  SAT['pointInPolygon'] = pointInPolygon;\n\n  // Check if two circles collide.\n  /**\n   * @param {Circle} a The first circle.\n   * @param {Circle} b The second circle.\n   * @param {Response=} response Response object (optional) that will be populated if\n   *   the circles intersect.\n   * @return {boolean} true if the circles intersect, false if they don't.\n   */\n  function testCircleCircle(a, b, response) {\n    // Check if the distance between the centers of the two\n    // circles is greater than their combined radius.\n    var differenceV = T_VECTORS.pop().copy(b['pos']).add(b['offset']).sub(a['pos']).sub(a['offset']);\n    var totalRadius = a['r'] + b['r'];\n    var totalRadiusSq = totalRadius * totalRadius;\n    var distanceSq = differenceV.len2();\n    // If the distance is bigger than the combined radius, they don't intersect.\n    if (distanceSq > totalRadiusSq) {\n      T_VECTORS.push(differenceV);\n      return false;\n    }\n    // They intersect.  If we're calculating a response, calculate the overlap.\n    if (response) {\n      var dist = Math.sqrt(distanceSq);\n      response['a'] = a;\n      response['b'] = b;\n      response['overlap'] = totalRadius - dist;\n      response['overlapN'].copy(differenceV.normalize());\n      response['overlapV'].copy(differenceV).scale(response['overlap']);\n      response['aInB'] = a['r'] <= b['r'] && dist <= b['r'] - a['r'];\n      response['bInA'] = b['r'] <= a['r'] && dist <= a['r'] - b['r'];\n    }\n    T_VECTORS.push(differenceV);\n    return true;\n  }\n  SAT['testCircleCircle'] = testCircleCircle;\n\n  // Check if a polygon and a circle collide.\n  /**\n   * @param {Polygon} polygon The polygon.\n   * @param {Circle} circle The circle.\n   * @param {Response=} response Response object (optional) that will be populated if\n   *   they interset.\n   * @return {boolean} true if they intersect, false if they don't.\n   */\n  function testPolygonCircle(polygon, circle, response) {\n    // Get the position of the circle relative to the polygon.\n    var circlePos = T_VECTORS.pop().copy(circle['pos']).add(circle['offset']).sub(polygon['pos']);\n    var radius = circle['r'];\n    var radius2 = radius * radius;\n    var points = polygon['calcPoints'];\n    var len = points.length;\n    var edge = T_VECTORS.pop();\n    var point = T_VECTORS.pop();\n\n    // For each edge in the polygon:\n    for (var i = 0; i < len; i++) {\n      var next = i === len - 1 ? 0 : i + 1;\n      var prev = i === 0 ? len - 1 : i - 1;\n      var overlap = 0;\n      var overlapN = null;\n\n      // Get the edge.\n      edge.copy(polygon['edges'][i]);\n      // Calculate the center of the circle relative to the starting point of the edge.\n      point.copy(circlePos).sub(points[i]);\n\n      // If the distance between the center of the circle and the point\n      // is bigger than the radius, the polygon is definitely not fully in\n      // the circle.\n      if (response && point.len2() > radius2) {\n        response['aInB'] = false;\n      }\n\n      // Calculate which Voronoi region the center of the circle is in.\n      var region = voronoiRegion(edge, point);\n      // If it's the left region:\n      if (region === LEFT_VORONOI_REGION) {\n        // We need to make sure we're in the RIGHT_VORONOI_REGION of the previous edge.\n        edge.copy(polygon['edges'][prev]);\n        // Calculate the center of the circle relative the starting point of the previous edge\n        var point2 = T_VECTORS.pop().copy(circlePos).sub(points[prev]);\n        region = voronoiRegion(edge, point2);\n        if (region === RIGHT_VORONOI_REGION) {\n          // It's in the region we want.  Check if the circle intersects the point.\n          var dist = point.len();\n          if (dist > radius) {\n            // No intersection\n            T_VECTORS.push(circlePos);\n            T_VECTORS.push(edge);\n            T_VECTORS.push(point);\n            T_VECTORS.push(point2);\n            return false;\n          } else if (response) {\n            // It intersects, calculate the overlap.\n            response['bInA'] = false;\n            overlapN = point.normalize();\n            overlap = radius - dist;\n          }\n        }\n        T_VECTORS.push(point2);\n        // If it's the right region:\n      } else if (region === RIGHT_VORONOI_REGION) {\n        // We need to make sure we're in the left region on the next edge\n        edge.copy(polygon['edges'][next]);\n        // Calculate the center of the circle relative to the starting point of the next edge.\n        point.copy(circlePos).sub(points[next]);\n        region = voronoiRegion(edge, point);\n        if (region === LEFT_VORONOI_REGION) {\n          // It's in the region we want.  Check if the circle intersects the point.\n          var dist = point.len();\n          if (dist > radius) {\n            // No intersection\n            T_VECTORS.push(circlePos);\n            T_VECTORS.push(edge);\n            T_VECTORS.push(point);\n            return false;\n          } else if (response) {\n            // It intersects, calculate the overlap.\n            response['bInA'] = false;\n            overlapN = point.normalize();\n            overlap = radius - dist;\n          }\n        }\n        // Otherwise, it's the middle region:\n      } else {\n        // Need to check if the circle is intersecting the edge,\n        // Change the edge into its \"edge normal\".\n        var normal = edge.perp().normalize();\n        // Find the perpendicular distance between the center of the\n        // circle and the edge.\n        var dist = point.dot(normal);\n        var distAbs = Math.abs(dist);\n        // If the circle is on the outside of the edge, there is no intersection.\n        if (dist > 0 && distAbs > radius) {\n          // No intersection\n          T_VECTORS.push(circlePos);\n          T_VECTORS.push(normal);\n          T_VECTORS.push(point);\n          return false;\n        } else if (response) {\n          // It intersects, calculate the overlap.\n          overlapN = normal;\n          overlap = radius - dist;\n          // If the center of the circle is on the outside of the edge, or part of the\n          // circle is on the outside, the circle is not fully inside the polygon.\n          if (dist >= 0 || overlap < 2 * radius) {\n            response['bInA'] = false;\n          }\n        }\n      }\n\n      // If this is the smallest overlap we've seen, keep it.\n      // (overlapN may be null if the circle was in the wrong Voronoi region).\n      if (overlapN && response && Math.abs(overlap) < Math.abs(response['overlap'])) {\n        response['overlap'] = overlap;\n        response['overlapN'].copy(overlapN);\n      }\n    }\n\n    // Calculate the final overlap vector - based on the smallest overlap.\n    if (response) {\n      response['a'] = polygon;\n      response['b'] = circle;\n      response['overlapV'].copy(response['overlapN']).scale(response['overlap']);\n    }\n    T_VECTORS.push(circlePos);\n    T_VECTORS.push(edge);\n    T_VECTORS.push(point);\n    return true;\n  }\n  SAT['testPolygonCircle'] = testPolygonCircle;\n\n  // Check if a circle and a polygon collide.\n  //\n  // **NOTE:** This is slightly less efficient than polygonCircle as it just\n  // runs polygonCircle and reverses everything at the end.\n  /**\n   * @param {Circle} circle The circle.\n   * @param {Polygon} polygon The polygon.\n   * @param {Response=} response Response object (optional) that will be populated if\n   *   they interset.\n   * @return {boolean} true if they intersect, false if they don't.\n   */\n  function testCirclePolygon(circle, polygon, response) {\n    // Test the polygon against the circle.\n    var result = testPolygonCircle(polygon, circle, response);\n    if (result && response) {\n      // Swap A and B in the response.\n      var a = response['a'];\n      var aInB = response['aInB'];\n      response['overlapN'].reverse();\n      response['overlapV'].reverse();\n      response['a'] = response['b'];\n      response['b'] = a;\n      response['aInB'] = response['bInA'];\n      response['bInA'] = aInB;\n    }\n    return result;\n  }\n  SAT['testCirclePolygon'] = testCirclePolygon;\n\n  // Checks whether polygons collide.\n  /**\n   * @param {Polygon} a The first polygon.\n   * @param {Polygon} b The second polygon.\n   * @param {Response=} response Response object (optional) that will be populated if\n   *   they interset.\n   * @return {boolean} true if they intersect, false if they don't.\n   */\n  function testPolygonPolygon(a, b, response) {\n    var aPoints = a['calcPoints'];\n    var aLen = aPoints.length;\n    var bPoints = b['calcPoints'];\n    var bLen = bPoints.length;\n    // If any of the edge normals of A is a separating axis, no intersection.\n    for (var i = 0; i < aLen; i++) {\n      if (isSeparatingAxis(a['pos'], b['pos'], aPoints, bPoints, a['normals'][i], response)) {\n        return false;\n      }\n    }\n    // If any of the edge normals of B is a separating axis, no intersection.\n    for (var i = 0; i < bLen; i++) {\n      if (isSeparatingAxis(a['pos'], b['pos'], aPoints, bPoints, b['normals'][i], response)) {\n        return false;\n      }\n    }\n    // Since none of the edge normals of A or B are a separating axis, there is an intersection\n    // and we've already calculated the smallest overlap (in isSeparatingAxis).  Calculate the\n    // final overlap vector.\n    if (response) {\n      response['a'] = a;\n      response['b'] = b;\n      response['overlapV'].copy(response['overlapN']).scale(response['overlap']);\n    }\n    return true;\n  }\n  SAT['testPolygonPolygon'] = testPolygonPolygon;\n\n  return SAT;\n}));\n"],
  "mappings": "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",
  "names": ["i"]
}
