{
  "version": 3,
  "sources": ["../../toxiclibsjs/geom/mesh/BezierPatch.js", "../../toxiclibsjs/geom/mesh/VertexSelector.js", "../../toxiclibsjs/geom/mesh/BoxSelector.js", "../../toxiclibsjs/geom/mesh/DefaultSelector.js", "../../toxiclibsjs/geom/mesh/OBJWriter.js", "../../toxiclibsjs/geom/mesh/PlaneSelector.js", "../../toxiclibsjs/geom/mesh/SphereFunction.js", "../../toxiclibsjs/geom/mesh/SphericalHarmonics.js", "../../toxiclibsjs/geom/mesh/SurfaceMeshBuilder.js", "../../toxiclibsjs/geom/mesh/SuperEllipsoid.js", "../../toxiclibsjs/geom/mesh/Terrain.js", "../../toxiclibsjs/geom/mesh/WETriangleMesh.js", "../../toxiclibsjs/geom/mesh.js", "../../toxiclibsjs/geom/CircleIntersector.js", "../../toxiclibsjs/geom/Cone.js", "../../toxiclibsjs/geom/ConvexPolygonClipper.js", "../../toxiclibsjs/geom/IsectData2D.js", "../../toxiclibsjs/geom/LineStrip3D.js", "../../toxiclibsjs/geom/Plane.js", "../../toxiclibsjs/geom/Ray3DIntersector.js", "../../toxiclibsjs/geom/Spline3D.js", "../../toxiclibsjs/geom/SutherlandHodgemanClipper.js", "../../toxiclibsjs/geom/Triangle2D.js", "../../toxiclibsjs/geom/AxisAlignedCylinder.js", "../../toxiclibsjs/geom/XAxisCylinder.js", "../../toxiclibsjs/geom/YAxisCylinder.js", "../../toxiclibsjs/geom/ZAxisCylinder.js", "../../toxiclibsjs/geom.js"],
  "sourcesContent": ["\nvar Vec3D = require('../Vec3D'),\n\tTriangleMesh = require('./TriangleMesh'),\n\tis = require('../../internals/is');\n\n/**\n * @class 4x4 bezier patch implementation with tesselation support (dynamic resolution)\n * for generating triangle mesh representations.\n * @member toxi\n */\nvar BezierPatch = function(points){\n\tif( is.Array(points) ){\n\t\tthis.points = points;\n\t} else {\n\t\tthis.points = [];\n\t\tfor (var i = 0; i < 4; i++) {\n\t\t\tthis.points[i] = this.points[i] || [];\n\t\t\tfor (var j = 0; j < 4; j++) {\n\t\t\t\tthis.points[i][j] = new Vec3D();\n\t\t\t}\n\t\t}\n\t}\n};\n\nBezierPatch.prototype = {\n\n\tcomputePointAt: function(u,v) {\n\t\treturn BezierPatch.computePointAt(u, v, this.points);\n\t},\n\n\tset: function(x,y,p) {\n\t\tthis.points[y][x].set(p);\n\t\treturn this;\n\t},\n\n\ttoMesh: function(mesh_or_res,_res) {\n\t\tvar mesh,\n\t\t\tres;\n\t\tif(_res === undefined){\n\t\t\tmesh = new TriangleMesh();\n\t\t\tres = mesh_or_res;\n\t\t} else {\n\t\t\tmesh = mesh_or_res;\n\t\t\tres = _res;\n\t\t}\n\t\tvar curr = new Array(res + 1),\n\t\t\tprev = new Array(res + 1);\n\t\tvar r1 = 1.0 / res;\n\t\tfor (var y = 0; y <= res; y++) {\n\t\t\tfor (var x = 0; x <= res; x++) {\n\t\t\t\tvar p = this.computePointAt(x * r1, y * r1, this.points);\n\t\t\t\tif (x > 0 && y > 0) {\n\t\t\t\t\tmesh.addFace(p, curr[x - 1], prev[x - 1]);\n\t\t\t\t\tmesh.addFace(p, prev[x - 1], prev[x]);\n\t\t\t\t}\n\t\t\t\tcurr[x] = p;\n\t\t\t}\n\t\t\tvar tmp = prev;\n\t\t\tprev = curr;\n\t\t\tcurr = tmp;\n\t\t}\n\t\treturn mesh;\n\n\t}\n};\n\n/**\nComputes a single point on the bezier surface given by the 2d array of\ncontrol points. The desired point's coordinates have to be specified in\nUV space (range 0.0 .. 1.0). The implementation does not check or enforce\nthe correct range of these coords and will not return valid points if the\nrange is exceeded.\n@param u positive normalized U coordinate on the bezier surface\n@param v positive normalized V coordinate on the bezier surface\n@param points 4x4 array defining the patch's control points\n@return point on surface\n*/\n\nBezierPatch.computePointAt = function(u,v,points){\n\t\tvar u1 = 1 - u;\n\t\tvar u1squared = u1 * u1 * 3 * u,\n\t\tu1cubed = u1 * u1 * u1,\n\t\tusquared = u * u,\n\t\tv1 = 1 - v,\n\t\tvsquared = v * v * 3,\n\t\tv1squared = v1 * v1 * 3,\n\t\tv1cubed = v1 * v1 * v1,\n\t\tvcubed = v * v * v,\n\n\t\tu1usq = u1 * usquared * 3,\n\t\tusqu = u * usquared,\n\t\tv1vsq = v1 * vsquared,\n\t\tv1sqv = v1squared * v;\n\n\t\tvar p0 = points[0];\n\t\tvar p1 = points[1];\n\t\tvar p2 = points[2];\n\t\tvar p3 = points[3];\n\n\t\tvar x = u1cubed * (p0[0].x * v1cubed + p0[1].x * v1sqv + p0[2].x * v1vsq + p0[3].x * vcubed) + u1squared * (p1[0].x * v1cubed + p1[1].x * v1sqv + p1[2].x * v1vsq + p1[3].x * vcubed) + u1usq * (p2[0].x * v1cubed + p2[1].x * v1sqv + p2[2].x * v1vsq + p2[3].x * vcubed) + usqu * (p3[0].x * v1cubed + p3[1].x * v1sqv + p3[2].x * v1vsq + p3[3].x * vcubed);\n\n\t\tvar y = u1cubed * (p0[0].y * v1cubed + p0[1].y * v1sqv + p0[2].y * v1vsq + p0[3].y * vcubed) + u1squared * (p1[0].y * v1cubed + p1[1].y * v1sqv + p1[2].y * v1vsq + p1[3].y * vcubed) + u1usq * (p2[0].y * v1cubed + p2[1].y * v1sqv + p2[2].y * v1vsq + p2[3].y * vcubed) + usqu * (p3[0].y * v1cubed + p3[1].y * v1sqv + p3[2].y * v1vsq + p3[3].y * vcubed);\n\n\t\tvar z = u1cubed * (p0[0].z * v1cubed + p0[1].z * v1sqv + p0[2].z * v1vsq + p0[3].z * vcubed) + u1squared * (p1[0].z * v1cubed + p1[1].z * v1sqv + p1[2].z * v1vsq + p1[3].z * vcubed) + u1usq * (p2[0].z * v1cubed + p2[1].z * v1sqv + p2[2].z * v1vsq + p2[3].z * vcubed) + usqu * (p3[0].z * v1cubed + p3[1].z * v1sqv + p3[2].z * v1vsq + p3[3].z * vcubed);\n\n\t\treturn new Vec3D(x, y, z);\n\n};\n\nmodule.exports = BezierPatch;\n\n", "\n/**\n * @class\n * @member toxi\n */\nvar VertexSelector = function(mesh){\n\tthis.mesh = mesh;\n\tthis.selection = [];\n};\n\nVertexSelector.prototype = {\n\t/**\n     * Adds all vertices selected by the given selector to the current\n     * selection. The other selector needs to be assigned to the same mesh\n     * instance.\n     * @param sel2 other selector\n     * @return itself\n     */\n\taddSelection: function(sel2){\n\t\tthis.checkMeshIdentity(sel2.getMesh());\n\t\tthis.selection = this.selection.concat(sel2.getSelection());\n\t\treturn this;\n\t},\n\t/**\n     * Utility function to check if the given mesh is the same instance as ours.\n     * @param mesh2\n     */\n    checkMeshIdentity: function(mesh2) {\n        if (mesh2 != this.mesh) {\n            throw new Error(\"The given selector is not using the same mesh instance\");\n        }\n    },\n    \n    clearSelection: function() {\n        this.selection = [];\n        return this;\n    },\n\n\tgetMesh: function() {\n        return this.mesh;\n    },\n    \n    getSelection: function() {\n        return this.selection;\n    },\n    /**\n     * Creates a new selection of all vertices NOT currently selected.\n     * @return itself\n     */\n    invertSelection: function() {\n        var newSel = [];\n        var vertices = this.mesh.getVertices();\n        var l = vertices.length;\n        for (var i=0;i<l;i++) {\n\t\t\tvar v = vertices[i];\n            if (this.selection.indexOf(v) < 0 ) {\n                newSel.push(v);\n            }\n        }\n        this.selection = newSel;\n        return this;\n    },\n\n\t/**\n     * Selects vertices identical or closest to the ones given in the list of\n     * points.\n     * @param points\n     * @return itself\n     */\n    selectSimilar: function(points) {\n\t\tvar l = points.length;\n        for (var i=0;i<l;i++) {\n\t\t\tvar v = points[i];\n            this.selection.push( this.mesh.getClosestVertexToPoint(v) );\n        }\n        return this;\n    },\n    \n     /**\n     * Selects vertices using an implementation specific method. This is the\n     * only method which needs to be implemented by any selector subclass.\n     * @return itself\n     */\n   selectVertices: function(){\n        return this;\n   },\n\t\n\tsetMesh: function(mesh) {\n        this.mesh = mesh;\n        this.clearSelection();\n    },\n    \n    size: function() {\n        return this.selection.length;\n    },\n\t/**\n     * Removes all vertices selected by the given selector from the current\n     * selection. The other selector needs to be assigned to the same mesh\n     * instance.\n     * @param sel2 other selector\n     * @return itself\n     */\n\tsubtractSelection: function(sel2) {\n        this.checkMeshIdentity(sel2.getMesh());\n        var removeThese = sel2.getSelection();\n        var i,l = removeThese.length;\n        for ( i=0; i<l; i++ ) {\n            this.selection.splice( this.selection.indexOf(removeThese[i]), 1 );\n        }\n        return this;\n\t}\n};\n\nmodule.exports = VertexSelector;\n\n   \n  \n\n", "\n\nvar extend = require('../../internals').extend,\n    VertexSelector = require('./VertexSelector');\n\n/**\n * @class\n * @member toxi\n * @augments toxi.VertexSelector\n */\nvar BoxSelector = function(mesh,box) {\n    VertexSelector.apply(this,[mesh]);\n    this.box = box;\n};\n\nextend(BoxSelector,VertexSelector);\n\nBoxSelector.prototype.selectVertices = function() {\n    this.clearSelection();\n    var verts = this.mesh.getVertices();\n    var l = verts.length;\n    for (var i=0;i<l;i++) {\n\t\tvar v = verts[i];\n        if (this.box.containsPoint(v)) {\n            this.selection.add(v);\n        }\n    }\n    return this;\n};\n\n\nmodule.exports = BoxSelector;\n\n\n", "\n\tvar extend = require('../../internals').extend,\n\t\tVertexSelector = require('./VertexSelector');\n\t/**\n\t * @class\n\t * @member toxi\n\t * @augments toxi.VertexSelector\n\t */\n\tvar DefaultSelector = function(mesh){\n\t\tVertexSelector.call(this,mesh);\n\t};\n\textend(DefaultSelector,VertexSelector);\n\tDefaultSelector.prototype.selectVertices = function(){\n\t\tthis.clearSelection();\n\t\tthis.selection = this.selection.concat( this.mesh.getVertices() );\n\t\treturn this;\n\t};\n\n\tmodule.exports = DefaultSelector;\n\n", "var internals = require('../../internals');\n\n\t//faster than str += \" \"\n\tvar StringBuffer = function(){\n\t\tthis.buffer = [];\n\t};\n\tStringBuffer.prototype.append = function(string){\n\t\tthis.buffer.push(string);\n\t\treturn this;\n\t};\n\tStringBuffer.prototype.toString = function(){\n\t\treturn this.buffer.join(\"\");\n\t};\n\t\n\tvar OBJWriter = function(){\n\t\tthis.VERSION = \"0.3\";\n\t\tthis.__stringBuffer = new StringBuffer();\n\t\tthis.objStream = undefined;\n\t\tthis.__filename = \"objwriter.obj\";\n\t\tthis._numVerticesWritten = 0;\n\t\tthis._numNormalsWritten = 0;\n\t};\n\n\n\tOBJWriter.prototype = {\n\t\t/**\n\t\t * begin saving\n\t\t * @param {WritableStream | String} [stream] stream can be a node.js WritableStream, or it can be a filename or undefined\n\t\t */\n\t\tbeginSave: function( stream ){\n\t\t\tif( typeof stream == 'string' ){\n\t\t\t\t//if node.js create a writeable stream with this filename\n\t\t\t} else if( internals.hasProperties(stream,['write','end','writable'] && stream.writable)){\n\t\t\t\tthis.objStream = stream;\n\t\t\t} else {\n\t\t\t}\n\t\t\tthis._handleBeginSave();\n\t\t},\n\n\t\tendSave: function(){\n\t\t\tif(this.objStream !== undefined ){\n\t\t\t\ttry {\n\t\t\t\t\tthis.objStream.destroy();\n\t\t\t\t} catch( e ){\n\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\tface: function( a, b, c ){\n\t\t\tthis.__stringBuffer.append(\"f \" + a + \" \" + b + \" \" + c + \"\\n\");\n\t\t},\n\n\t\tfaceList: function(){\n\t\t\tthis.__stringBuffer.append(\"s off \\n\");\n\t\t},\n\n\t\tfaceWithNormals: function( a, b, c, na, nb, nc ){\n\t\t\tthis.__stringBuffer.append(\"f \" + a + \"//\" + na + \" \" + b + \"//\" + nb + \" \" + c + \"//\" + nc + \"\\n\");\n\t\t},\n\n\t\tgetCurrNormalOffset: function(){\n\t\t\treturn this._numNormalsWritten;\n\t\t},\n\n\t\tgetCurrVertexOffset: function(){\n\t\t\treturn this._numVerticesWritten;\n\t\t},\n\n\t\t//not in java version\n\t\tgetOutput: function(){\n\t\t\treturn this.__stringBuffer.toString();\n\t\t},\n\n\t\t_handleBeginSave: function(){\n\t\t\tthis.numVerticesWritten = 0;\n\t\t\tthis.numNormalsWrittern = 0;\n\t\t\tthis.__stringBuffer.append(\"# generated by OBJExport (js) v\" + this.VERSION+'\\n');\n\t\t},\n\n\t\tnewObject: function( name ){\n\t\t\tthis.__stringBuffer.append(\"o \" + name + \"\\n\");\n\t\t},\n\n\t\tnormal: function( vecN ){\n\t\t\tthis.__stringBuffer.append(\"vn \" + vecN.x + \" \" + vecN.y + \" \" + vecN.z + \"\\n\");\n\t\t\tthis._numNormalsWritten++;\n\t\t},\n\n\t\tvertex: function( vecV ){\n\t\t\tthis.__stringBuffer.append(\"v \" + vecV.x + \" \" + vecV.y + \" \" + vecV.z +\"\\n\");\n\t\t\tthis._numVerticesWritten++;\n\t\t}\n\t};\n\n\n\tmodule.exports = OBJWriter;\n\n", "\nvar extend = require('../../internals').extend,\n    VertexSelector = require('./VertexSelector');\n\n/**\n * @class\n * @member toxi\n * @augments toxi.VertexSelector\n */\nvar PlaneSelector = function(mesh,plane,classifier, tolerance) {\n    VertexSelector.apply(this,[mesh]);\n    this.plane = plane;\n    this.classifier = classifier;\n    this.tolerances = (tolerance === undefined)? 0.0001 : tolerance;\n};\nextend(PlaneSelector,VertexSelector);\nPlaneSelector.prototype.selectVertices = function() {\n    this.clearSelection();\n    var verts = this.mesh.getVertices();\n    var l = verts.length;\n    for (var i=0;i<l;i++) {\n\t\tvar v = verts[i];\n        if (this.plane.classifyPoint(v, this.tolerance) == this.classifier) {\n            this.selection.add(v);\n        }\n    }\n    return this;\n};\n\nmodule.exports = PlaneSelector;\n\n", "\n\tmodule.exports = require('../Sphere').SphereFunction;\n\n", "\n\nvar mathUtils = require('../../math/mathUtils');\n\n/**\n * @class Spherical harmonics surface evaluator based on code by Paul Bourke:\n * http://local.wasp.uwa.edu.au/~pbourke/geometry/sphericalh/\n * @member toxi\n */\nvar SphericalHarmonics = function(m) {\n    this.m = m;\n};\n\nSphericalHarmonics.prototype = {\n    // toxiclibs - FIXME check where flipped vertex order is coming from sometimes\n    computeVertexFor: function(p,phi,theta) {\n        var r = 0;\n        r += Math.pow(mathUtils.sin(this.m[0] * theta), this.m[1]);\n        r += Math.pow(mathUtils.cos(this.m[2] * theta), this.m[3]);\n        r += Math.pow(mathUtils.sin(this.m[4] * phi), this.m[5]);\n        r += Math.pow(mathUtils.cos(this.m[6] * phi), this.m[7]);\n\n        var sinTheta = mathUtils.sin(theta);\n        p.x = r * sinTheta * mathUtils.cos(phi);\n        p.y = r * mathUtils.cos(theta);\n        p.z = r * sinTheta * mathUtils.sin(phi);\n        return p;\n    },\n\n    getPhiRange: function() {\n        return mathUtils.TWO_PI;\n    },\n\n    getPhiResolutionLimit: function(res) {\n        return res;\n    },\n\n    getThetaRange: function() {\n        return mathUtils.PI;\n    },\n\n    getThetaResolutionLimit: function(res) {\n        return res;\n    }\n};\n\nmodule.exports = SphericalHarmonics;\n\n", "\n\tmodule.exports = require('./meshCommon').SurfaceMeshBuilder;\n\n", "\n\nvar mathUtils = require('../../math/mathUtils');\n\nvar TriangleMesh = require('./TriangleMesh');\n\n/**\n * @class\n * @member toxi\n */\nvar\tSuperEllipsoid = function(n1,n2) {\n\tthis.p1 = n1;\n\tthis.p2 = n2;\n};\n\nSuperEllipsoid.prototype = {\n\tcomputeVertexFor: function(p,phi,theta) {\n\t\tphi -= mathUtils.HALF_PI;\n\t\tvar cosPhi = mathUtils.cos(phi),\n\t\t\tcosTheta = mathUtils.cos(theta),\n\t\t\tsinPhi = mathUtils.sin(phi),\n\t\t\tsinTheta = mathUtils.sin(theta);\n\n\t\tvar t = mathUtils.sign(cosPhi) * Math.pow(mathUtils.abs(cosPhi), this.p1);\n\t\tp.x = t * mathUtils.sign(cosTheta) * Math.pow(Math.abs(cosTheta), this.p2);\n\t\tp.y = mathUtils.sign(sinPhi) * Math.pow(Math.abs(sinPhi), this.p1);\n\t\tp.z = t * mathUtils.sign(sinTheta) * Math.pow(mathUtils.abs(sinTheta), this.p2);\n\t\treturn p;\n\t},\n \n\tgetPhiRange: function() {\n\t\treturn mathUtils.TWO_PI;\n\t},\n\n\tgetPhiResolutionLimit: function(res) {\n\t\treturn res / 2;\n\t},\n\n\tgetThetaRange: function() {\n\t\treturn mathUtils.TWO_PI;\n\t},\n\n\tgetThetaResolutionLimit: function(res) {\n\t\treturn res;\n\t}\n};\n\nmodule.exports = SuperEllipsoid;\n\n", "/**\n * Implementation of a 2D grid based heightfield with basic intersection\n * features and conversion to {@link TriangleMesh}. The terrain is always\n * located in the XZ plane with the positive Y axis as up vector.\n */\n\n\t//toxi.geom.mesh.Terrain is in meshCommon to avoid circular dependencies\n\tmodule.exports = require('./meshCommon').Terrain;\n", "\n\tmodule.exports = require('./meshCommon').WETriangleMesh;\n", "\n\texports.TriangleMesh = require('./mesh/TriangleMesh');\n\texports.BezierPatch = require('./mesh/BezierPatch');\n\texports.BoxSelector = require('./mesh/BoxSelector');\n\texports.DefaultSelector = require('./mesh/DefaultSelector');\n\texports.Face = require('./mesh/Face');\n\t//exports.LaplacianSmooth = require('./mesh/LaplacianSmooth');\n\texports.OBJWriter = require('./mesh/OBJWriter');\n\texports.PlaneSelector = require('./mesh/PlaneSelector');\n\texports.SphereFunction = require('./mesh/SphereFunction');\n\texports.SphericalHarmonics = require('./mesh/SphericalHarmonics');\n\texports.SurfaceMeshBuilder = require('./mesh/SurfaceMeshBuilder');\n\texports.SuperEllipsoid = require('./mesh/SuperEllipsoid');\n\texports.Terrain = require('./mesh/Terrain');\n\texports.TriangleMesh = require('./mesh/TriangleMesh');\n\texports.Vertex = require('./mesh/Vertex');\n\texports.VertexSelector = require('./mesh/VertexSelector');\n\texports.WETriangleMesh = require('./mesh/WETriangleMesh');\n\t//exports.subdiv = require('./mesh/subdiv');\n\n", "\n/**\n @class CircleIntersector\n @member toxi\n */\nvar CircleIntersector = function(circle) {\n    this.circle = circle;\n    this.isec = undefined;\n};\n\nCircleIntersector.prototype = {\n\n    getIntersectionData: function() {\n        return this.isec;\n    },\n\n    intersectsRay: function(ray) {\n        this.isec.clear();\n        var q = circle.sub(ray),\n        distSquared = q.magSquared(),\n        v = q.dot(ray.getDirection()),\n        r = circle.getRadius(),\n        d = r * r - (distSquared - v * v);\n        if (d >= 0.0) {\n            this.isec.isIntersection = true;\n            this.isec.dist = v -Math.sqrt(d);\n            this.isec.pos = ray.getPointAtDistance(isec.dist);\n            this.isec.normal = this.isec.pos.sub(this.circle).normalize();\n        }\n        return this.isec.isIntersection;\n    }\n};\n\nmodule.exports = CircleIntersector;\n\n", "\n\nvar extend = require('../internals').extend,\n\tVec3D = require('./Vec3D'),\n\tTriangleMesh = require('./mesh/TriangleMesh');\n\n/**\n * @class A geometric definition of a cone (and cylinder as a special case) with\n * support for mesh creation/representation. The class is currently still\n * incomplete in that it doesn't provide any other features than the\n * construction of a cone shaped mesh.\n * @augments toxi.Vec3D\n * @member toxi\n * @param pos\n *            centre position\n * @param dir\n *            direction vector\n * @param rNorth\n *            radius on the side in the forward direction\n * @param rSouth\n *            radius on the side in the opposite direction\n * @param len\n *            length of the cone\n */\n\nfunction err( param ){\n\tthrow Error(\"Missing parameter: \" + param);\n}\nvar\tCone = function(pos,dir,rNorth, rSouth,len) {\n\t//if its a parameter object\n\tvar self = this;\n\tif ( typeof pos === 'object' && arguments.length === 1 ){\n\t\tprocess(\n\t\t\tpos.pos || pos.position || new Vec3D(),\n\t\t\tpos.dir || pos.direction || err( \"direction\" ),\n\t\t\tpos.rNorth || pos.radiusNorth || err(\"radiusNorth\"),\n\t\t\tpos.rSouth || pos.radiusSouth || err(\"radiusSouth\"),\n\t\t\tpos.len || pos.length || err(\"length\")\n\t\t);\n\t} else {\n\t\tprocess( pos, dir, rNorth, rSouth, len );\n\t}\n\tfunction process( pos, dir, radiusNorth, radiusSouth, length ){\n\t\tVec3D.apply(self,[pos]);\n\t\tself.dir = dir.getNormalized();\n\t\tself.radiusNorth = radiusNorth;\n\t\tself.radiusSouth = radiusSouth;\n\t\tself.length = length;\n\t}\n};\n\nextend(Cone,Vec3D);\n\nCone.prototype.toMesh = function(args) {\n\tvar opts = {\n\t\tmesh : undefined,\n\t\tsteps : NaN,\n\t\tthetaOffset : 0,\n\t\ttopClosed : true,\n\t\tbottomClosed : true\n\t};\n\t\n\t\t\n\tif ( arguments.length == 1) {\n\t\tif (typeof arguments[0] == 'object') {\n\t\t\t//##then it was a javascript option-object\n\t\t\tvar optionsObject = arguments[0];\n\t\t\topts.mesh = optionsObject.mesh;\n\t\t\topts.steps = optionsObject.steps || optionsObject.resolution || optionsObject.res;\n\t\t\topts.thetaOffset = optionsObject.thetaOffset || opts.thetaOffset;\n\t\t\topts.topClosed = optionsObject.topClosed || opts.topClosed;\n\t\t\topts.bottomClosed = optionsObject.bottomClosed || opts.bottomClosed;\n\t\t} else {\n\t\t\topts.steps = arguments[0];\n\t\t}\n\t}\n\telse if ( arguments.length == 2 ) {\n\t\topts.steps = arguments[0];\n\t\topts.thetaOffset = arguments[1];\n\t}\n\telse if ( arguments.length == 5 ) {\n\t\topts.mesh = arguments[0];\n\t\topts.steps = arguments[1];\n\t\topts.thetaOffset = arguments[2];\n\t\topts.topClosed = arguments[3];\n\t\topts.bottomClosed = arguments[4];\n\t}\n\t\n\tvar c = this.add(0.01, 0.01, 0.01),\n\t\tn = c.cross(this.dir.getNormalized()).normalize(),\n\t\thalfAxis = this.dir.scale(this.length * 0.5),\n\t\tp = this.sub(halfAxis),\n\t\tq = this.add(halfAxis),\n\t\tsouth = [],\n\t\tnorth = [],\n\t\tphi = (Math.PI*2) / opts.steps;\n\t\n\t\n\tvar i = 0, j=1;\n\tfor(i=0;i<opts.steps;i++){\n\t\tvar theta = i * phi + opts.thetaOffset;\n\t\tvar nr = n.getRotatedAroundAxis(this.dir,theta);\n\t\t\t\n\t\tsouth[i] = nr.scale(this.radiusSouth).addSelf(p);\n\t\tnorth[i] = nr.scale(this.radiusNorth).addSelf(q);\n\t}\n\t\n\t\n\tvar numV = opts.steps * 2 + 2,\n\t\tnumF = opts.steps * 2 + (opts.topClosed ? opts.steps : 0) + (opts.bottomClosed ? opts.steps : 0),\n\t\tmesh = opts.mesh || new TriangleMesh(\"cone\",numV,numF);\n\n\tfor(i=0; i<opts.steps; i++, j++){\n\t\tif(j == opts.steps){\n\t\t\tj = 0;\n\t\t}\n\t\tmesh.addFace(south[i],north[i],south[j],undefined,undefined,undefined,undefined);\n\t\tmesh.addFace(south[j],north[i],north[j],undefined,undefined,undefined,undefined);\n\t\tif(opts.bottomClosed){\n\t\t\tmesh.addFace(p, south[i], south[j], undefined,undefined,undefined,undefined);\n\t\t}\n\t\tif(opts.topClosed){\n\t\t\tmesh.addFace(north[i], q, north[j], undefined,undefined,undefined,undefined);\n\t\t}\n\t}\n\t\n\treturn mesh;\n};\n\nmodule.exports = Cone;\n\n\n", "var Line2D = require('./Line2D');\nvar Polygon2D = require('./Polygon2D');\n\n    var ConvexPolygonClipper = function(polygonBounds){\n        this.setBounds(polygonBounds);\n    };\n\n\n    ConvexPolygonClipper.prototype = {\n        constructor: ConvexPolygonClipper,\n\n        clipPolygon: function(poly){\n\n            //make a shallow copy to a new array\n            var points = poly.vertices.slice(0),\n                //hold clipped points\n                clipped,\n                //the boundary edges of the clipping path\n                boundsEdges = this.bounds.getEdges(),\n                //the current Line2D of the edge to clip along\n                clipEdge,\n                i = 0,\n                j = 0,\n                _tmp,\n                //point classification for testing\n                sign,\n                //vectors\n                p,\n                q;\n\n            //add the first one as a double-entry\n            points.push(points[0]);\n\n            for( i = 0; i < boundsEdges.length; i++ ){\n                clipEdge = boundsEdges[i];\n\n                clipped = [];\n\n                sign = clipEdge.classifyPoint(this.boundsCentroid);\n\n                for( j = 0; j < points.length - 1; j++ ){\n                    p = points[j];\n                    q = points[j+1];\n\n                    if( clipEdge.classifyPoint(p) === sign ){\n                        if( clipEdge.classifyPoint(q) === sign ){\n                            clipped.push(q.copy());\n                        } else {\n                            clipped.push(this._getClippedPosOnEdge(clipEdge, p, q));\n                        }\n                        continue;\n                    }\n                    if( clipEdge.classifyPoint(q) === sign ){\n                        clipped.push(this._getClippedPosOnEdge(clipEdge, p, q));\n                        clipped.push(q.copy());\n                    }\n                }\n                //if points have been clipped, make sure the last entry is still the same\n                //as the first entry\n                if( clipped.length > 0 && clipped[0] !== clipped[clipped.length-1] ){\n                    clipped.push(clipped[0]);\n                }\n\n                _tmp = points;\n                points = clipped;\n                clipped = _tmp;\n            }\n\n            return new Polygon2D(points).removeDuplicates(0.001);\n        },\n\n        getBounds: function(){\n            return this.bounds;\n        },\n\n        _getClippedPosOnEdge: function(clipEdge, p, q){\n            return clipEdge.intersectLine(new Line2D(p, q)).getPos();\n        },\n\n        //unused but included to match, source\n        _isKnownVertex: function(list, q){\n            for(var i=0, l=list.length; i<l; i++){\n                if( list[i].equalsWitTolerance(q, 0.001) ){\n                    return true;\n                }\n            }\n            return false;\n        },\n\n        setBounds: function(bounds){\n            this.bounds = bounds;\n            this.boundsCentroid = this.bounds.getCentroid();\n        }\n    };\n\n\n\n    module.exports = ConvexPolygonClipper;\n\n\n\n", "\n\nvar Vec2D = require('./Vec2D');\n\n/**\n * @class\n * @member toxi\n */\nvar\tIsectData2D = function(isec){\n\tif(isec !== undefined){\n\t\tthis.isIntersection = isec.isIntersection;\n\t\tthis.dist = isec.dist;\n\t\tthis.pos = isec.pos.copy();\n\t\tthis.dir = isec.dir.copy();\n\t\tthis.normal = isec.normal.copy();\n\t}\n\telse {\n\t\tthis.clear();\n\t}\n};\n\nIsectData2D.prototype = {\n\tclear: function(){\n\t\tthis.isIntersection = false;\n\t\tthis.dist = 0;\n\t\tthis.pos = new Vec2D();\n\t\tthis.dir = new Vec2D();\n\t\tthis.normal = new Vec2D();\n\t},\n\t\n\ttoString: function(){\n\t\tvar s = \"isec: \"+this.isIntersection;\n\t\tif(this.isIntersection){\n\t\t\ts+= \" at:\"+this.pos+ \" dist:\"+this.dist+\" normal:\"+this.normal;\n\t\t}\n\t\treturn s;\n\t}\n};\n\nmodule.exports = IsectData2D;\n\n", "\n\n\tvar Vec3D = require('./vectors').Vec3D,\n\t\tLine3D = require('./Line3D'),\n\t\thasXYZ = require('../internals/has').XYZ,\n\t\tIterator = require('../internals/Iterator');\n\n\t/**\n\t* construct a LineStrip3D\n\t* @constructor\n\t* @param {Vec3D[]} [vertices] optional vertices to start with\n\t*/\n\tvar LineStrip3D = function( vertices ){\n\t\tthis.vertices = vertices || [];\n\t};\n\n\tLineStrip3D.prototype = {\n\t\tconstructor: LineStrip3D,\n\t\t/**\n\t\t* add a vector to the line-strip, it will always be a copy\n\t\t* @param {Vec3D | Number } x either a Vec3D or an x coordinate\n\t\t* @param {Number} [y]\n\t\t* @param {Number} [z]\n\t\t* @return itself\n\t\t*/\n\t\tadd: function( x, y, z ){\n\t\t\tif( hasXYZ( x ) ){\n\t\t\t\t//it was 1 param, it was a vector or object\n\t\t\t\tthis.vertices.push( new Vec3D(x) );\n\t\t\t} else {\n\t\t\t\tthis.vertices.push( new Vec3D(x,y,z) );\n\t\t\t}\n\t\t\treturn this;\n\t\t},\n\t\tget: function( i ){\n\t\t\tif( i < 0 ){\n\t\t\t\ti += this.vertices.length;\n\t\t\t}\n\t\t\treturn this.vertices[i];\n\t\t},\n\t\t/**\n\t\t* Computes a list of points along the spline which are uniformly separated\n\t\t* by the given step distance.\n\t\t*\n\t\t* @param {Number} step\n\t\t* @param {Boolean} [doAddFinalVertex] true by default\n\t\t* @return {Vec3D[]} point list\n\t\t*/\n\t\tgetDecimatedVertices: function( step, doAddFinalVertex ){\n\t\t\tif( doAddFinalVertex !== false ){\n\t\t\t\tdoAddFinalVertex = true;\n\t\t\t}\n\t\t\tvar uniform = [];\n\t\t\tif( this.vertices.length < 3 ){\n\t\t\t\tif( this.vertices.length === 2 ){\n\t\t\t\t\tnew Line3D( this.vertices[0], this.vertices[1])\n\t\t\t\t\t\t.splitIntoSegments( uniform, step, true );\n\t\t\t\t\tif( !doAddFinalVertex ){\n\t\t\t\t\t\tuniform.pop();\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\tvar arcLen = this.getEstimatedArcLength(),\n\t\t\t\tdelta = step / arcLen,\n\t\t\t\tcurrIdx = 0,\n\t\t\t\tcurrT,\n\t\t\t\tt,\n\t\t\t\tp,\n\t\t\t\tq,\n\t\t\t\tfrac,\n\t\t\t\ti;\n\n\t\t\tfor( t = 0; t<1.0; t+=delta ){\n\t\t\t\tcurrT = t * arcLen;\n\t\t\t\twhile( currT >= this.arcLenIndex[currIdx] ){\n\t\t\t\t\tcurrIdx++;\n\t\t\t\t}\n\t\t\t\tp = this.get(currIdx-1);\n\t\t\t\tq = this.get(currIdx);\n\t\t\t\tfrac = ((currT-this.arcLenIndex[currIdx-1]) / (this.arcLenIndex[currIdx] - this.arcLenIndex[currIdx-1]) );\n\t\t\t\ti = p.interpolateTo( q, frac );\n\t\t\t\tuniform.push( i );\n\t\t\t}\n\t\t\tif( doAddFinalVertex ){\n\t\t\t\tuniform.push( this.get(-1).copy() );\n\t\t\t}\n\t\t\treturn uniform;\n\t\t},\n\t\tgetEstimatedArcLength: function(){\n\t\t\tif( this.arcLenIndex === undefined || this.arcLenIndex.length !== this.vertices.length ){\n\t\t\t\tthis.arcLenIndex = [0];\n\t\t\t}\n\t\t\tvar arcLen = 0,\n\t\t\t\tp,\n\t\t\t\tq;\n\t\t\tfor( var i=1, l = this.vertices.length; i<l; i++){\n\t\t\t\tp = this.vertices[i-1];\n\t\t\t\tq = this.vertices[i];\n\t\t\t\tarcLen += p.distanceTo(q);\n\t\t\t\t//this will start at index 1\n\t\t\t\tthis.arcLenIndex[i] = arcLen;\n\t\t\t}\n\t\t\treturn arcLen;\n\t\t},\n\t\tgetSegments: function(){\n\t\t\tvar i = 1,\n\t\t\t\tnum = this.vertices.length,\n\t\t\t\tsegments = [];\n\t\t\tfor( ; i<num; i++ ){\n\t\t\t\tsegments.push( new Line3D(this.get(i-1), this.get(i)) );\n\t\t\t}\n\t\t\treturn segments;\n\t\t},\n\t\tgetVertices: function(){\n\t\t\treturn vertices;\n\t\t},\n\t\titerator: function(){\n\t\t\treturn new Iterator( this.vertices );\n\t\t},\n\t\tsetVertices: function( vertices ){\n\t\t\tthis.vertices = vertices;\n\t\t}\n\t};\n\n\tmodule.exports = LineStrip3D;\n\n", "\n\n    var extend = require('../internals').extend,\n        mathUtils = require('../math/mathUtils'),\n        Ray3D = require('./Ray3D'),\n        vectors = require('./vectors'),\n        Vec3D = vectors.Vec3D,\n        Vec2D = vectors.Vec2D,\n        TriangleMesh = require('./mesh/TriangleMesh');\n\n    /**\n    * @class\n    * @member toxi\n    * @augments Vec3D\n    */\n    var\tPlane = function(tri_or_origin,norm) {\n        var origin, normal;\n        if(arguments.length === 0){\n            origin = new Vec3D();\n            normal = Vec3D.Y_AXIS.copy();\n        } else if(arguments.length == 1){ //it should've been a Triangle\n            origin = arguments[0].computeCentroid();\n            normal = arguments[0].computeNormal();\n        } else { //Vec3D, Vec3D\n            origin = arguments[0];\n            normal = arguments[1].getNormalized();\n        }\n        Vec3D.apply(this,[origin]);\n        this.normal = normal;\n    };\n    extend(Plane,Vec3D);\n    Plane.Classifier = {\n        FRONT: \"front\",\n        BACK: \"back\",\n        ON_PLANE: \"on plane\"\n    };\n    Plane.XY = new Plane(new Vec3D(), Vec3D.Z_AXIS);\n    Plane.XZ = new Plane(new Vec3D(), Vec3D.Y_AXIS);\n    Plane.YZ = new Plane(new Vec3D(), Vec3D.X_AXIS);\n\n\n    /**\n    * Classifies the relative position of the given point to the plane using\n    * the given tolerance.\n    * @return One of the 3 classification types: FRONT, BACK, ON_PLANE\n    */\n    Plane.prototype.classifyPoint = function(p, tolerance){\n        var d = this.sub(p).normalize().dot(this.normal);\n        if( d < -tolerance){\n            return Plane.Classifier.FRONT;\n        } else if( d > tolerance){\n            return Plane.Classifier.BACK;\n        }\n        return Plane.Classifier.ON_PLANE;\n    };\n\n    Plane.prototype.containsPoint = function(p){\n        return this.classifyPoint(p, mathUtils.EPS) == Plane.Classifier.ON_PLANE;\n    };\n\n    Plane.prototype.getDistanceToPoint = function(p){\n        var sn = this.normal.dot(p.sub(this)),\n            sd = this.normal.magSquared(),\n            isec = p.add(this.normal.scale(sn / sd));\n            return isec.distanceTo(p);\n    };\n\n    Plane.prototype.getIntersectionWithRay = function(r){\n        var denom = this.normal.dot(r.getDirection()),\n            u;\n        if(denom > mathUtils.EPS){\n            u = this.normal.dot(this.sub(r)) / denom;\n            return r.getPointAtDistance(u);\n        } else {\n            return undefined;\n        }\n    };\n\n    Plane.prototype.getProjectedPoint = function(p){\n        var dir, proj;\n        if(this.normal.dot(this.sub(p)) < 0){\n            dir = this.normal.getInverted();\n        } else {\n            dir = this.normal;\n        }\n        proj = new Ray3D(p,dir).getPointAtDistance(this.getDistanceToPoint(p));\n        return proj;\n    };\n    /**\n    * Calculates the distance of the vector to the given plane in the specified\n    * direction. A plane is specified by a 3D point and a normal vector\n    * perpendicular to the plane. Normalized directional vectors expected (for\n    * rayDir and planeNormal).\n    *\n    * @param {Ray3D} ray intersection ray\n    * @return {Number} distance to plane in world units, -1 if no intersection.\n    */\n\n    Plane.prototype.intersectRayDistance = function(ray){\n        var d = this.normal.dot(this),\n            numer = this.normal.dot(ray) + d,\n            denom = this.normal.dot(ray.dir);\n\n            //normal is orthogonal to vector, cant intersect\n            if(mathUtils.abs(denom) < mathUtils.EPS){\n                return -1;\n            }\n            return - (numer / denom);\n    };\n\n    /**\n    * Creates a TriangleMesh representation of the plane as a finite, squared\n    * quad of the requested size, centred around the current plane point.\n    * @param {TriangleMesh} mesh (optional)\n    * @param size desired edge length\n    * @return mesh\n    */\n    Plane.prototype.toMesh = function( mesh, size ){\n        if( arguments.length === 1 && typeof arguments[0] == 'number' ){\n            size = mesh;\n            mesh = null;\n        }\n        mesh = mesh || new TriangleMesh(\"plane\", 4, 2);\n        var p = this.equalsWithTolerance(Vec3D.ZERO, 0.01) ? this.add(0.01, 0.01, 0.01) : this;\n        size *= 0.5;\n        var n = p.cross(this.normal).normalizeTo(size),\n            m = n.cross(this.normal).normalizeTo(size),\n            a = this.add(n).addSelf(m),\n            b = this.add(n).subSelf(m),\n            c = this.sub(n).subSelf(m),\n            d = this.sub(n).addSelf(m);\n\n        mesh.addFace(a, d, b, undefined, undefined, undefined, undefined);\n        mesh.addFace(b, d, c, undefined, undefined, undefined, undefined);\n        return mesh;\n    };\n\n\n    module.exports = Plane;\n\n\n\n", "\n\nvar IsectData3D = require('./IsectData3D'),\n\tmathUtils = require('../math/mathUtils'),\n    Ray3DIntersector;\n\n/**\n * @class\n * @member toxi\n */\nRay3DIntersector = function(ray){\n\tthis.ray = ray;\n\tthis.isec = new IsectData3D();\n};\n\nRay3DIntersector.prototype = {\n\tgetIntersectionData: function(){\n\t\treturn this.isec;\n\t},\n\n\tintersectsRay: function(other){\n\t\tvar n = this.ray.dir.cross(other.dir);\n\t\tvar sr = this.ray.sub(other);\n\t\tvar absX = mathUtils.abs(n.x);\n\t\tvar absY = mathUtils.abs(n.y);\n\t\tvar absZ = mathUtils.abs(n.z);\n\t\tvar t;\n\t\tif(absZ > absX && absZ > absY){\n\t\t\tt = (sr.x * other.dir.y - sr.y * other.dir.x) / n.z;\n\t\t} else if(absX > absY){\n\t\t\tt = (sr.y * other.dir.z - sr.z * other.dir.y) / n.x;\n\t\t} else {\n\t\t\tt = (sr.z * other.dir.x - sr.x * other.dir.z) / n.y;\n\t\t}\n\t\tthis.isec.isIntersection = (t <= mathUtils.EPS && !isFinite(t));\n\t\tthis.isec.pos = this.ray.getPointAtDistance(-t);\n\t\treturn this.isec.isIntersection;\n\t}\n};\n\nmodule.exports = Ray3DIntersector;\n\n", "var Vec3D = require('./Vec3D');\nvar is = require('../internals/is');\nvar BernsteinPolynomial = require('./BernsteinPolynomial');\n\n    /**\n     * @class\n     * @member toxi\n     * @param {Vec3D[]} points array of Vec3D's\n     * @param {BernsteinPolynomial} [bernsteinPoly]\n     */\n    var\tSpline3D = function(points, bernsteinPoly, tightness){\n        if( arguments.length === 1 && !is.Array( points ) && is.Object(points) ){\n            //if its an options object\n            bernsteinPoly = bernsteinPoly || points.bernsteinPoly;\n            tightness = tightness || points.tightness;\n            points = points.points;\n        }\n        var i = 0, l;\n        this.pointList = [];\n        if( typeof tightness !== 'number' ){\n            tightness = Spline3D.DEFAULT_TIGHTNESS;\n        }\n        this.setTightness(tightness);\n        //this may be undefined\n        this.bernstein = bernsteinPoly;\n        if( points !== undefined ){\n            for(i = 0, l = points.length; i<l; i++){\n                this.add( points[i].copy() );\n            }\n        }\n        this.coeffA = [];\n        this.delta = [];\n        this.bi = [];\n        for (i = 0; i < this.numP; i++) {\n            this.coeffA[i] = new Vec3D();\n            this.delta[i] = new Vec3D();\n            this.bi[i] = 0;\n        }\n        this.bi = [];\n    };\n\n\n    Spline3D.prototype = {\n        add: function(p){\n            this.pointList.push(p.copy());\n            this.numP = this.pointList.length;\n            return this;\n        },\n\n\n        computeVertices: function(res){\n            this.updateCoefficients();\n            if( res < 1 ){\n                res = 1;\n            }\n            res++;\n            if (this.bernstein === undefined || this.bernstein.resolution != res) {\n                this.bernstein = new BernsteinPolynomial(res);\n            }\n            var bst = this.bernstein;\n            this.vertices = [];\n            this.findCPoints();\n            var deltaP = new Vec3D();\n            var deltaQ = new Vec3D();\n            res--;\n            for (var i = 0; i < this.numP - 1; i++) {\n                var p = this.points[i];\n                var q = this.points[i + 1];\n                deltaP.set(this.delta[i]).addSelf(p);\n                deltaQ.set(q).subSelf(this.delta[i + 1]);\n                for (var k = 0; k < res; k++) {\n                    var x = p.x * bst.b0[k] + deltaP.x * bst.b1[k] +\n                        deltaQ.x * bst.b2[k] +\n                        q.x * bst.b3[k];\n                    var y = p.y * bst.b0[k] + deltaP.y * bst.b1[k] +\n                        deltaQ.y * bst.b2[k] +\n                        q.y * bst.b3[k];\n                    var z = p.z * bst.b0[k] + deltaP.z * bst.b1[k] +\n                        deltaQ.z * bst.b2[k] + q.z * bst.b3[k];\n                    this.vertices.push(new Vec3D(x, y, z));\n                }\n            }\n            this.vertices.push(this.points[this.points.length-1].copy());\n            return this.vertices;\n        },\n\n        findCPoints: function(){\n            this.bi[1] = -0.25;\n            var i, p0, p2, d0;\n            p0 = this.pointList[0];\n            p2 = this.pointList[2];\n            d0 = this.delta[0];\n            this.coeffA[1].set(\n                (p2.x - p0.x - d0.x) * this.tightness, //x\n                (p2.y - p0.y - d0.y) * this.tightness, //y\n                (p2.z - p0.z - d0.z) * this.tightness //z\n            );\n            for (i = 2; i < this.numP - 1; i++) {\n                this.bi[i] = -1 / (this.invTightness + this.bi[i - 1]);\n                this.coeffA[i].set(\n                    -(this.points[i + 1].x - this.points[i - 1].x - this.coeffA[i - 1].x) * this.bi[i],\n                    -(this.points[i + 1].y - this.points[i - 1].y - this.coeffA[i - 1].y) * this.bi[i],\n                    -(this.points[i + 1].z - this.points[i - 1].z - this.coeffA[i - 1].z) * this.bi[i]\n                );\n            }\n            for (i = this.numP - 2; i > 0; i--) {\n                this.delta[i].set(\n                    this.coeffA[i].x + this.delta[i + 1].x * this.bi[i],\n                    this.coeffA[i].y + this.delta[i + 1].y * this.bi[i],\n                    this.coeffA[i].z + this.delta[i + 1].z * this.bi[i]\n                );\n            }\n        },\n\n        getDecimatedVertices: function(step,doAddFinalVertex){\n            if(doAddFinalVertex === undefined)doAddFinalVertex = true;\n            if(this.vertices === undefined || this.vertices.length < 2){\n                this.computeVertices(Spline3D.DEFAULT_RES);\n            }\n            var arcLen = this.getEstimatedArcLength();\n            var uniform = [];\n            var delta = step / arcLen;\n            var currIdx = 0;\n            for(var t =0; t<1.0; t+= delta){\n                var currT = t * arcLen;\n                while(currT >= this.arcLenIndex[currIdx]){\n                    currIdx++;\n                }\n                var p = this.vertices[currIdx - 1];\n                var q = this.vertices[currIdx];\n                var frac = ((currT - this.arcLenIndex[currIdx - 1]) / (this.arcLenIndex[currIdx] - this.arcLenIndex[currIdx - 1]));\n\n                var i = p.interpolateTo(q,frac);\n                uniform.push(i);\n            }\n            if(doAddFinalVertex){\n                uniform.push(this.vertices[this.vertices.length-1]);\n            }\n            return uniform;\n        },\n\n\n        getEstimatedArcLength: function(){\n            var len;\n            var arcLen = 0;\n\n            if(this.arcLenIndex === undefined || (this.arcLenIndex !== undefined && this.arcLenIndex.length != this.vertices.length)){\n                this.arcLenIndex = [0];\n                len = this.vertices.length;\n            }\n            else {\n                len = this.arcLenIndex.length;\n            }\n\n            for(var i=1;i<len;i++){\n                var p = this.vertices[i-1];\n                var q = this.vertices[i];\n                arcLen += p.distanceTo(q);\n                this.arcLenIndex[i] = arcLen;\n            }\n\n            return arcLen;\n        },\n\n\n        getNumPoints: function(){\n            return this.numP;\n        },\n\n        getPointList: function(){\n            return this.pointList;\n        },\n\n        getTightness: function(){\n            return this.tightness;\n        },\n\n        setPointList: function(plist){\n            this.pointList =plist.slice(0);\n            return this;\n        },\n\n        setTightness: function(tight){\n            this.tightness = tight;\n            this.invTightness = 1 / this.tightness;\n            return this;\n        },\n\n        updateCoefficients: function(){\n            this.numP = this.pointList.length;\n            if(this.points === undefined || (this.points !== undefined && this.points.length != this.numP)) {\n                this.coeffA = [];\n                this.delta = [];\n                this.bi = [];\n                for(var i=0;i<this.numP; i++){\n                    this.coeffA[i] = new Vec3D();\n                    this.delta[i] = new Vec3D();\n                }\n                this.setTightness(this.tightness);\n            }\n            this.points = this.pointList.slice(0);\n        }\n\n    };\n\n    Spline3D.DEFAULT_TIGHTNESS = 0.25;\n    Spline3D.DEFAULT_RES = 16;\n\n    module.exports = Spline3D;\n\n", "\n\t/**\n\t* A version of the Sutherland-Hodgeman algorithm to clip 2D polygons optimized\n\t* for rectangular clipping regions.\n\t* More information: http://en.wikipedia.org/wiki/Sutherland-Hodgman_algorithm\n\t*/\n\tvar Polygon2D = require('./Polygon2D'),\n\t\tVec2D = require('./vectors').Vec2D;\n\n\t//function for finding clipped position on each edge\n\t//faster than a switch\n\tvar clippedPos = {\n\t\t0: function( b, p1, p2 ){\n\t\t\tvar x = p1.x + ( (b.y-p1.y) * (p2.x-p1.x) ) / ( p2.y-p1.y );\n\t\t\treturn new Vec2D( x, b.y );\n\t\t},\n\t\t1: function( b, p1, p2 ){\n\t\t\tvar bx = b.x + b.width;\n\t\t\tvar y = p1.y + ( (bx-p1.x) * (p2.y-p1.y) ) / (p2.x-p1.x);\n\t\t\treturn new Vec2D( bx, y );\n\t\t},\n\t\t2: function( b, p1, p2 ){\n\t\t\tvar by = b.y + b.height;\n\t\t\tvar x = p1.x + ( (by-p1.y) * (p2.x-p1.x) ) / ( p2.y-p1.y );\n\t\t\treturn new Vec2D( x, by );\n\t\t},\n\t\t3: function( b, p1, p2 ){\n\t\t\tvar y = p1.y + ( (b.x-p1.x) * (p2.y-p1.y) ) / ( p2.x-p1.x );\n\t\t\treturn new Vec2D( b.x, y );\n\t\t}\n\t};\n\n\t/**\n\t * method for getting the position on the edge\n\t * @private\n\t * @param {Rect} bounds\n\t * @param {Number} edgeID\n\t * @param {Vec2D} p1\n\t * @param {Vec2D} p2\n\t * @returns Vec2D\n\t */\n\tvar getClippedPosOnEdge = function( bounds, edgeID, p1, p2 ){\n\t\treturn clippedPos[edgeID]( bounds, p1, p2 );\n\t};\n\n\n\t//tests for each edgeID whether the point is within the edge\n\tvar insideEdgeConditions = {\n\t\t0: function( bounds, p ){\n\t\t\treturn p.y >= bounds.y;\n\t\t},\n\t\t1: function( bounds, p ){\n\t\t\treturn p.x < bounds.x + bounds.width;\n\t\t},\n\t\t2: function( bounds, p ){\n\t\t\treturn p.y < bounds.y + bounds.height;\n\t\t},\n\t\t3: function( bounds, p ){\n\t\t\treturn p.x >= bounds.x;\n\t\t}\n\t};\n\n\t/**\n\t * @private\n\t * @param {Rect} bounds\n\t * @param {Vec2D} p\n\t * @param {Number} edgeID\n\t * @return {Boolean}\n\t */\n\tvar isInsideEdge = function( bounds, p, edgeID ){\n\t\treturn insideEdgeConditions[edgeID]( bounds, p );\n\t};\n\n\n\t/**\n\t * SutherlandHodgemanClipper constructor\n\t * @param {Rect} bounds\n\t */\n\tvar SutherlandHodgemanClipper = function( bounds ){\n\t\tthis.bounds = bounds;\n\t};\n\n\tSutherlandHodgemanClipper.prototype = {\n\t\tconstructor: SutherlandHodgemanClipper,\n\t\tclipPolygon: function( poly ){\n\t\t\tvar points = poly.vertices.slice(0), //copy of poly's points\n\t\t\t\tclipped, //will contain the clipped points\n\t\t\t\tedgeID = 0, //numeric id for each edge\n\t\t\t\ti = 0,\n\t\t\t\tnum = points.length-1,\n\t\t\t\tp, //current point in loop\n\t\t\t\tq; //next point in loop\n\n\t\t\t//duplicate the first point ref\n\t\t\tpoints.push( points[0] );\n\t\t\tfor( ; edgeID < 4; edgeID++ ){\n\t\t\t\ti = 0; //make sure the inner-loop starts over\n                num = points.length - 1;\n\t\t\t\tclipped = []; //new clipped coords for this iteration\n\t\t\t\tfor( ; i<num; i++ ){\n\t\t\t\t\tp = points[i];\n\t\t\t\t\tq = points[i+1];\n\t\t\t\t\tif( isInsideEdge( this.bounds, p, edgeID ) ){\n\t\t\t\t\t\tif( isInsideEdge( this.bounds, q, edgeID ) ){\n\t\t\t\t\t\t\tclipped.push( q.copy() );\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tclipped.push( getClippedPosOnEdge(this.bounds, edgeID, p, q) );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tif( isInsideEdge( this.bounds, q, edgeID) ){\n\t\t\t\t\t\tclipped.push( getClippedPosOnEdge(this.bounds, edgeID, p, q) );\n\t\t\t\t\t\tclipped.push( q.copy() );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif( clipped.length > 0 && clipped[0] !== clipped[clipped.length-1] ){\n\t\t\t\t\tclipped.push( clipped[0] );\n\t\t\t\t}\n\t\t\t\tpoints = clipped;\n\t\t\t}\n\t\t\treturn new Polygon2D( points ).removeDuplicates( 0.001 );\n\t\t},\n\t\tgetBounds: function(){\n\t\t\treturn this.bounds;\n\t\t},\n\t\t//protected + unused in java\n\t\tisKnownVertex: function( list, q ){\n\t\t\tfor( var i=0, l=list.length; i<l; i++){\n\t\t\t\tif( list[i].equalsWithTolerance(q, 0.0001) ){\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t},\n\t\tsetBounds: function( bounds ){\n\t\t\tthis.bounds = bounds;\n\t\t}\n\t};\n\n\tmodule.exports = SutherlandHodgemanClipper;\n", "\n\nvar Vec2D = require('./Vec2D'),\n\tLine2D = require('./Line2D'),\n\tRect = require('./Rect'),\n\tCircle = require('./Circle'),\n\tPolygon2D = require('./Polygon2D'),\n\tmathUtils = require('../math/mathUtils');\n\n/**\n * @class\n * @member toxi\n * @param {toxi.Vec2D} a\n * @param {toxi.Vec2D} b\n * @param {toxi.Vec2D} c\n */\nvar\tTriangle2D = function(_a,_b,_c){\n\tif(arguments.length === 3){\n\t\tthis.a = _a.copy();\n\t\tthis.b = _b.copy();\n\t\tthis.c = _c.copy();\n\t}\n};\n\nTriangle2D.createEquilateralFrom = function(a,b){\n\tvar c = a.interpolateTo(b,0.5),\n\t\tdir = a.sub(b),\n\t\tn = dir.getPerpendicular();\n\t\tc.addSelf(n.normalizeTo(dir.magnitude() * mathUtils.SQRT3 / 2));\n\t\treturn new Triangle2D(a,b,c);\n};\n\nTriangle2D.isClockwise = function(a,b,c){\n\tvar determ = (b.x-a.x) * (c.y - a.y) - (c.x - a.x) * (b.y - a.y);\n\treturn (determ < 0.0);\n};\n\n\nTriangle2D.prototype = {\n\tadjustTriangleSizeBy: function(offAB,offBC,offCA){\n\t\tif(arguments.length == 1){\n\t\t\toffBC = offAB;\n\t\t\toffCA = offAB;\n\t\t}\n\t\tthis.computeCentroid();\n\t\tvar ab = new Line2D(this.a.copy(),this.b.copy()).offsetAndGrowBy(offAB,100000,this.centroid);\n\t\tvar bc = new Line2D(this.b.copy(),this.c.copy()).offsetAndGrowBy(offBC,100000,this.centroid);\n\t\tvar ca = new Line2D(this.c.copy(),this.a.copy()).offsetAndGrowBy(offCA,100000,this.centroid);\n\t\t\n\t\tthis.a = ab.intersectLine(ca).getPos();\n\t\tthis.b = ab.intersectLine(bc).getPos();\n\t\tthis.c = bc.intersectLine(ca).getPos();\n\t\tthis.computeCentroid();\n\t\treturn this;\n\t},\n\t\n\tcomputeCentroid: function(){\n\t\tthis.centroid = this.a.add(this.b).addSelf(this.c).scaleSelf(1/3);\n\t\treturn this.centroid;\n\t},\n\t/**\n     * Checks if point vector is inside the triangle created by the points a, b\n     * and c. These points will create a plane and the point checked will have\n     * to be on this plane in the region between a,b,c.\n     * \n     * Note: The triangle must be defined in clockwise order a,b,c\n     * \n     * @return true, if point is in triangle.\n     */\n     containsPoint: function(_p){\n\t\tvar v1 = _p.sub(this.a).normalize(),\n\t\t\tv2 = _p.sub(this.b).normalize(),\n\t\t\tv3 = _p.sub(this.c).normalize(),\n\t\t\ttotalAngles = Math.acos(v1.dot(v2));\n\t\t\ttotalAngles += Math.acos(v2.dot(v3));\n\t\t\ttotalAngles += Math.acos(v3.dot(v1));\n\t\t\treturn (mathUtils.abs(totalAngles- mathUtils.TWO_PI) <= 0.01);\n     },\n     \n     copy: function(){\n\t\treturn new Triangle2D(this.a.copy(),this.b.copy(),this.c.copy());\n     },\n     \n     flipVertexOrder: function(){\n\t\tvar t = this.a;\n\t\tthis.a = this.c;\n\t\tthis.c = t;\n\t\treturn this;\n     },\n     \n     getArea: function(){\n\t\treturn this.b.sub(this.a).cross(this.c.sub(this.a)) * 0.5;\n     },\n     \n     getBounds: function(){\n\t\treturn new Rect(Vec2D.min(Vec2D.min(this.a,this.b),this.c),Vec2D.max(Vec2D.max(this.a,this.b),this.c));\n     },\n     \n     getCircumCircle: function(){\n\t\tvar cr = this.a.bisect(this.b).cross(this.b.bisect(this.c)),\n\t\t\tcirca = new Vec2D(cr.x/cr.z, cr.y / cr.z),\n\t\t\tsa = this.a.distanceTo(this.b),\n\t\t\tsb = this.b.distanceTo(this.c),\n\t\t\tsc = this.c.distanceTo(this.a);\n\t\tvar radius = sa * sb * sc / Math.sqrt((sa+sb+sc) * (-sa+sb+sc)*(sa-sb+sc)*(sa+sb-sc));\n\t\treturn new Circle(circa,radius);\n     },\n     \n     getCircumference: function(){\n\t\treturn this.a.distanceTo(this.b) + this.b.distanceTo(this.c) + this.c.distanceTo(this.a);\n     },\n     \n     getClosestPointTo: function(_p){\n\t\tvar edge = new Line2D(this.a,this.b),\n\t\t\tRab = edge.closestPointTo(_p),\n\t\t\tRbc = edge.set(this.b,this.c).closestPointTo(_p),\n\t\t\tRca = edge.set(this.c,this.a).closestPointTo(_p),\n\t\t\tdAB = _p.sub(Rab).magSquared(),\n\t\t\tdBC = _p.sub(Rbc).magSquared(),\n\t\t\tdCA = _p.sub(Rca).magSquared(),\n\t\t\tmin = dAB,\n\t\t\tresult = Rab;\n\n\t\tif(dBC < min){\n\t\t\tmin = dBC;\n\t\t\tresult = Rbc;\n\t\t}\n\t\tif(dCA < min){\n\t\t\tresult = Rca;\n\t\t}\n\t\treturn result;\n\t},\n     \n\tintersectsTriangle: function(tri){\n\t\tif(this.containsPoint(tri.a) || this.containsPoint(tri.b) || this.containsPoint(tri.c)){\n\t\t\treturn true;\n\t\t}\n\t\tif(tri.containsPoint(this.a) || tri.containsPoint(this.b) || tri.containsPoint(this.c)){\n\t\t\treturn true;\n\t\t}\n\t\tvar ea = [\n\t\t\tnew Line2D(this.a,this.b),\n\t\t\tnew Line2D(this.b,this.c),\n\t\t\tnew Line2D(this.c,this.a)\n\t\t];\n\t\tvar eb = [\n\t\t\tnew Line2D(tri.a,tri.b),\n\t\t\tnew Line2D(tri.b,tri.c),\n\t\t\tnew Line2D(tri.c,tri.a)\n\t\t];\n\t\tfor(var i=0,eaLen = ea.length;i<eaLen;i++){\n\t\t\tvar la = ea[i];\n\t\t\tfor(var j=0,ebLen = eb.length;j<ebLen;j++){\n\t\t\t\tvar lb = eb[j];\n\t\t\t\tvar type = la.intersectLine(lb).getType();\n\t\t\t\tif(type != Line2D.LineIntersection.Type.NON_INTERSECTING && type != Line2D.LineIntersection.Type.PARALLEL){\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t},\n\t\n\tisClockwise: function(){\n\t\treturn Triangle2D.isClockwise(this.a,this.b,this.c);\n\t},\n\t\n\tset: function(a2,b2,c2){\n\t\tthis.a = a2;\n\t\tthis.b = b2;\n\t\tthis.c = c2;\n\t},\n\t\n\ttoPolygon2D: function(){\n\t\tvar poly = new Polygon2D();\n\t\tpoly.add(this.a.copy());\n\t\tpoly.add(this.b.copy());\n\t\tpoly.add(this.c.copy());\n\t\treturn poly;\n\t},\n\t\n\ttoString: function(){\n\t\treturn \"Triangle2D: \"+this.a+ \",\"+this.b+\",\"+this.c;\n\t}\n\n};\n\nmodule.exports = Triangle2D;\n\n", "\n\nvar Cone = require('./Cone');\n\n/** \n @member toxi\n @constructor\n @description An Abstract (don't use this directly) Axis-aligned Cylinder class\n */\nvar\tAxisAlignedCylinder = function(pos,radius,length) {\n\tthis.pos = (pos===undefined)? undefined: pos.copy();\n\tthis.setRadius(radius);\n\tthis.setLength(length);\n};\n\nAxisAlignedCylinder.prototype = {\n\t/**\n\tChecks if the given point is inside the cylinder. \n\t@param p\n\t@return true, if inside\n\t*/\n\tcontainsPoint: function(p){\n\t\tthrow Error(\"AxisAlignedCylinder.containsPoint(): not implmented\");\n\t},\n\n\t/**\n\t@return the length\n\t*/\n\tgetLength: function() {\n\t\treturn this.length;\n\t},\n\n\t/**\n\t@return the cylinder's orientation axis\n\t*/\n\tgetMajorAxis: function(){\n\t\tthrow Error(\"AxisAlignedCylinder.getMajorAxis(): not implemented\");\n\t},\n\n\t/**\n\tReturns the cylinder's position (centroid).\n\t@return the pos\n\t*/\n\tgetPosition: function() {\n\t\treturn this.pos.copy();\n\t},\n\n\t/**\n\t@return the cylinder radius\n\t*/\n\tgetRadius: function() {\n\t\treturn this.radius;\n\t},\n\n\t/**\n\t@param length the length to set\n\t*/\n\tsetLength: function(length) {\n\t\tthis.length = length;\n\t},\n\n\t/**\n\t@param pos the pos to set\n\t*/\n\tsetPosition: function(pos) {\n\t\tthis.pos.set(pos);\n\t},\n\n   setRadius: function(radius) {\n\t\tthis.radius = radius;\n\t\tthis.radiusSquared = radius * radius;\n\t},\n\n\t/**\n\tBuilds a TriangleMesh representation of the cylinder at a default\n\tresolution 30 degrees. \n\t@return mesh instance\n\t*/\n\ttoMesh: function(a,b,c) {\n\t\tvar opts = {\n\t\t\tmesh: undefined,\n\t\t\tsteps: 12,\n\t\t\tthetaOffset: 0\n\t\t};\n\t\tif(arguments.length == 1 && typeof arguments[0] == 'object'){ //options object\n\t\t\tfor(var prop in arguments[0]){\n\t\t\t\topts[prop] = arguments[0][prop];\n\t\t\t}\n\t\t} else if(arguments.length == 2){\n\t\t\topts.steps = arguments[0];\n\t\t\topts.thetaOffset = arguments[1];\n\t\t}\n\t\tvar cone = new Cone(this.pos,this.getMajorAxis().getVector(), this.radius, this.radius, this.length);\n\t\treturn cone.toMesh(opts.mesh,opts.steps,opts.thetaOffset,true,true);\n\t}\n};\n\nmodule.exports = AxisAlignedCylinder;\n\n", "\n\nvar extend = require('../internals').extend,\n\tmathUtils = require('../math/mathUtils'),\n\tVec3D = require('./Vec3D'),\n\tAxisAlignedCylinder = require('./AxisAlignedCylinder');\n\n/**\n @module toxi/XAxisCylinder\n @constructor \n X-axis aligned Cylinder\n @member toxi\n @author Kyle Phillips\n @augments AxisAlignedCylinder\n */\nvar\tXAxisCylinder = function(pos,radius,length){\n\tAxisAlignedCylinder.apply(this,[pos,radius,length]);\n};\n\nextend(XAxisCylinder,AxisAlignedCylinder);\n\nXAxisCylinder.prototype.containsPoint = function(p){\n\tif(mathUtils.abs(p.x - this.pos.x) < this.length * 0.5){\n\t\tvar dy = p.y - this.pos.y;\n\t\tvar dz = p.z - this.pos.z;\n\t\tif(Math.abs(dz * dz + dy * dy) < this.radiusSquared){\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n};\nXAxisCylinder.prototype.getMajorAxis = function(){\n\treturn Vec3D.Axis.X;\n};\n\n\nmodule.exports = XAxisCylinder;\n\n", "\n\nvar extend = require('../internals').extend,\n\tmathUtils = require('../math/mathUtils'),\n\tVec3D = require('./Vec3D'),\n\tAxisAlignedCylinder = require('./AxisAlignedCylinder');\n\t\n/**\n @member toxi\n @class Y-axis aligned Cylinder\n */\nvar\tYAxisCylinder = function(pos,radius,length){\n\tAxisAlignedCylinder.apply(this,[pos,radius,length]);\n};\nextend(YAxisCylinder,AxisAlignedCylinder);\n\nYAxisCylinder.prototype.containsPoint = function(p){\n\tif(mathUtils.abs(p.y - this.pos.y) < this.length * 0.5){\n\t\tvar dx = p.x - this.pos.x;\n\t\tvar dz = p.z - this.pos.z;\n\t\tif(Math.abs(dz * dz + dx * dx) < this.radiusSquared){\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n};\nYAxisCylinder.prototype.getMajorAxis = function(){\n\treturn Vec3D.Axis.Y;\n};\n\nmodule.exports = YAxisCylinder;\n\n\n", "\n\nvar extend = require('../internals').extend,\n\tmathUtils = require('../math/mathUtils'),\n\tVec3D = require('./Vec3D'),\n\tAxisAlignedCylinder = require('./AxisAlignedCylinder');\n\n/**\n @member toxi\n @constructor Z-axis aligned Cylinder\n */\nvar\tZAxisCylinder = function(pos,radius,length){\n\tAxisAlignedCylinder.apply(this,[pos,radius,length]);\n};\nextend(ZAxisCylinder,AxisAlignedCylinder);\nZAxisCylinder.prototype.containsPoint = function(p){\n\t if (mathUtils.abs(p.z - this.pos.z) < this.length * 0.5) {\n            var dx = p.x - this.pos.x;\n            var dy = p.y - this.pos.y;\n            if (Math.abs(dx * dx + dy * dy) < this.radiusSquared) {\n                return true;\n            }\n\t}\n\treturn false;\n};\nZAxisCylinder.prototype.getMajorAxis = function(){\n\treturn Vec3D.Axis.Z;\n};\n\nmodule.exports = ZAxisCylinder;\n\n", "\n\texports.AABB = require('./geom/AABB');\n\texports.mesh = require('./geom/mesh');\n\texports.BernsteinPolynomial = require('./geom/BernsteinPolynomial');\n\texports.Circle = require('./geom/Circle');\n\texports.CircleIntersector = require('./geom/CircleIntersector');\n\texports.Cone = require('./geom/Cone');\n    exports.ConvexPolygonClipper = require('./geom/ConvexPolygonClipper');\n\texports.Ellipse = require('./geom/Ellipse');\n\texports.IsectData2D = require('./geom/IsectData2D');\n\texports.IsectData3D = require('./geom/IsectData3D');\n\texports.Line2D = require('./geom/Line2D');\n\texports.Line3D = require('./geom/Line3D');\n    exports.LineStrip3D = require('./geom/LineStrip3D');\n\texports.Matrix4x4 = require('./geom/Matrix4x4');\n\texports.Plane = require('./geom/Plane');\n\texports.Polygon2D = require('./geom/Polygon2D');\n\texports.Quaternion = require('./geom/Quaternion');\n\texports.Ray2D = require('./geom/Ray2D');\n\texports.Ray3D = require('./geom/Ray3D');\n\texports.Ray3DIntersector = require('./geom/Ray3DIntersector');\n\texports.Rect = require('./geom/Rect');\n\texports.Sphere = require('./geom/Sphere');\n\texports.Spline2D = require('./geom/Spline2D');\n    exports.Spline3D = require('./geom/Spline3D');\n    exports.SutherlandHodgemanClipper = require('./geom/SutherlandHodgemanClipper');\n\texports.Triangle2D = require('./geom/Triangle2D');\n\texports.Triangle3D = require('./geom/Triangle3D');\n\texports.Vec2D = require('./geom/Vec2D');\n\texports.Vec3D = require('./geom/Vec3D');\n\texports.XAxisCylinder = require('./geom/XAxisCylinder');\n\texports.YAxisCylinder = require('./geom/YAxisCylinder');\n\texports.ZAxisCylinder = require('./geom/ZAxisCylinder');\n\n\n"],
  "mappings": "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",
  "names": ["vertices", "circle", "pos", "dir", "isec", "vertices", "isec"]
}
