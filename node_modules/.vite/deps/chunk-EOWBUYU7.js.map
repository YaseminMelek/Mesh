{
  "version": 3,
  "sources": ["../../toxiclibsjs/geom/Vec3D.js", "../../toxiclibsjs/geom/Matrix4x4.js", "../../toxiclibsjs/geom/Line3D.js", "../../toxiclibsjs/geom/Ray3D.js", "../../toxiclibsjs/geom/mesh/Face.js", "../../toxiclibsjs/geom/IsectData3D.js", "../../toxiclibsjs/geom/TriangleIntersector.js", "../../toxiclibsjs/geom/Quaternion.js", "../../toxiclibsjs/geom/mesh/Vertex.js", "../../toxiclibsjs/geom/Sphere.js", "../../toxiclibsjs/geom/mesh/WingedEdge.js", "../../toxiclibsjs/geom/mesh/subdiv/EdgeLengthComparator.js", "../../toxiclibsjs/geom/mesh/subdiv/SubdivisionStrategy.js", "../../toxiclibsjs/geom/mesh/subdiv/MidpointSubdivision.js", "../../toxiclibsjs/math/Interpolation2D.js", "../../toxiclibsjs/geom/mesh/meshCommon.js", "../../toxiclibsjs/geom/AABB.js", "../../toxiclibsjs/geom/Triangle3D.js", "../../toxiclibsjs/geom/BernsteinPolynomial.js", "../../toxiclibsjs/geom/Line2D.js", "../../toxiclibsjs/geom/Ray2D.js", "../../toxiclibsjs/geom/Ellipse.js", "../../toxiclibsjs/geom/Circle.js", "../../toxiclibsjs/geom/mesh/TriangleMesh.js", "../../toxiclibsjs/geom/Polygon2D.js", "../../toxiclibsjs/geom/Rect.js", "../../toxiclibsjs/geom/Spline2D.js"],
  "sourcesContent": ["\n\t//Vec3D is defined in toxi/geom/vectors to circumvent circular dependencies\n\tmodule.exports = require('./vectors').Vec3D;\n", "\n\nvar mathUtils = require('../math/mathUtils'),\n    internals = require('../internals'),\n\tVec3D = require('./Vec3D');\n\n\n/**\n * @description Implements a simple row-major 4x4 matrix class, all matrix operations are\n * applied to new instances. Use {@link #transpose()} to convert from\n * column-major formats...\n * @exports Matrix4x4 as toxi.Matrix4x4\n * @constructor\n */\nvar Matrix4x4 = function(v11,v12,v13,v14,v21,v22,v23,v24,v31,v32,v33,v34,v41,v42,v43,v44){\n\tthis.temp = [];\n\tthis.matrix = [];\n\tvar self = this;\n\tif(arguments.length === 0) { //if no variables were supplied\n\t\tthis.matrix[0] = [1,0,0,0];\n\t\tthis.matrix[1] = [0,1,0,0];\n\t\tthis.matrix[2] = [0,0,1,0];\n\t\tthis.matrix[3] = [0,0,0,1];\n\t} else if(typeof(v11) == 'number'){ //if the variables were numbers\n\t\tvar m1 = [v11,v12,v13,v14];\n\t\tvar m2 = [v21,v22,v23,v24];\n\t\tvar m3 = [v31,v32,v33,v34];\n\t\tvar m4 = [v41,v42,v43,v44];\n\t\tthis.matrix = [m1,m2,m3,m4];\n\t} else if( internals.is.Array( v11 ) ){ //if it was sent in as one array\n\t\tvar array = v11;\n\t\tif (array.length != 9 && array.length != 16) {\n\t\t\tthrow new Error(\"Matrix4x4: Array length must == 9 or 16\");\n\t\t}\n\t\tif (array.length == 16) {\n\t\t\tthis.matrix = [];\n\t\t\tthis.matrix[0] = array.slice(0,4);\n\t\t\tthis.matrix[1] = array.slice(4,8);\n\t\t\tthis.matrix[2] = array.slice(8,12);\n\t\t\tthis.matrix[3] = array.slice(12);\n\t\t} else {\n\t\t\tthis.matrix[0] = array.slice(0,3);\n\t\t\tthis.matrix[0][3] = NaN;\n\t\t\tthis.matrix[1] = array.slice(3,6);\n\t\t\tthis.matrix[1][3] = NaN;\n\t\t\tthis.matrix[2] = array.slice(6,9);\n\t\t\tthis.matrix[2][3] = NaN;\n\t\t\tthis.matrix[3] = [NaN,NaN,NaN,NaN];\n\t\t}\n\t} else if( internals.is.Matrix4x4( v11 ) ){\n\n\t//else it should've been a Matrix4x4 that was passed in\n\t\tvar m = v11,\n\t\t\ti = 0,\n\t\t\tj = 0,\n\t\t\tlenM,\n\t\t\tlenMM;\n\n\t\tif(m.matrix.length == 16){\n\t\t\tfor(i=0;i<4;i++){\n\t\t\t\tthis.matrix[i] = [m.matrix[i][0], m.matrix[i][1],m.matrix[i][2],m.matrix[i][3]];\n\t\t\t}\n\t\t} else {\n\t\t\tif(m.matrix.length == 4){\n\t\t\t\tlenM = m.matrix.length;\n\t\t\t\tfor(i = 0; i < lenM; i++){\n\t\t\t\t\tlenMM = m.matrix[i].length;\n\t\t\t\t\tself.matrix[i] = [];\n\t\t\t\t\tfor(j = 0; j < lenMM; j++){\n\t\t\t\t\t\tself.matrix[i][j] = m.matrix[i][j];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t/*console.log(\"m.matrix.length: \"+m.matrix.length);\n\t\t\t//should be a length of 9\n\t\t\tfor(i=0;i<3;i++){\n\t\t\t\tthis.matrix[i] = [m.matrix[i][0], m.matrix[i][1],m.matrix[i][2],NaN];\n\t\t\t}\n\t\t\tthis.matrix[3] = [NaN,NaN,NaN,NaN];*/\n\t\t}\n\t} else {\n\t\tconsole.error(\"Matrix4x4: incorrect parameters used to construct new instance\");\n\t}\n};\n\nMatrix4x4.prototype = {\n\tadd: function(rhs) {\n        var result = new Matrix4x4(this);\n        return result.addSelf(rhs);\n    },\n\n    addSelf: function(m) {\n        for (var i = 0; i < 4; i++) {\n            var mi = this.matrix[i];\n            var rhsm = m.matrix[i];\n            mi[0] += rhsm[0];\n            mi[1] += rhsm[1];\n            mi[2] += rhsm[2];\n            mi[3] += rhsm[3];\n        }\n        return this;\n    },\n\n    /**\n     * Creates a copy of the given vector, transformed by this matrix.\n     *\n     * @param v\n     * @return transformed vector\n     */\n    applyTo: function(v) {\n        return this.applyToSelf(new Vec3D(v));\n    },\n\n    applyToSelf: function(v) {\n        for (var i = 0; i < 4; i++) {\n            var m = this.matrix[i];\n            this.temp[i] = v.x * m[0] + v.y * m[1] + v.z * m[2] + m[3];\n        }\n        v.set(this.temp[0], this.temp[1], this.temp[2]).scaleSelf((1.0 / this.temp[3]));\n        return v;\n    },\n\n    copy: function() {\n        return new Matrix4x4(this);\n    },\n\n    getInverted: function() {\n        return new Matrix4x4(this).invert();\n    },\n\n    getRotatedAroundAxis: function(axis,theta) {\n        return new Matrix4x4(this).rotateAroundAxis(axis, theta);\n    },\n\n    getRotatedX: function(theta) {\n        return new Matrix4x4(this).rotateX(theta);\n    },\n\n    getRotatedY: function(theta) {\n        return new Matrix4x4(this).rotateY(theta);\n    },\n\n    getRotatedZ: function(theta) {\n        return new Matrix4x4(this).rotateZ(theta);\n    },\n\n    getTransposed: function() {\n        return new Matrix4x4(this).transpose();\n    },\n\n    identity: function() {\n        var m = this.matrix[0];\n        m[1] = m[2] = m[3] = 0;\n        m = this.matrix[1];\n        m[0] = m[2] = m[3] = 0;\n        m = this.matrix[2];\n        m[0] = m[1] = m[3] = 0;\n        m = this.matrix[3];\n        m[0] = m[1] = m[2] = 0;\n        this.matrix[0][0] = 1;\n        this.matrix[1][1] = 1;\n        this.matrix[2][2] = 1;\n        this.matrix[3][3] = 1;\n        return this;\n    },\n\n    /**\n     * Matrix Inversion using Cramer's Method Computes Adjoint matrix divided by\n     * determinant Code modified from\n     * http://www.intel.com/design/pentiumiii/sml/24504301.pdf\n     *\n     * @return itself\n     */\n\tinvert: function() {\n        var tmp = [], //12\n\t\t\tsrc = [], //16\n\t\t\tdst = [], //16\n\t\t\tmat = this.toArray(),\n\t\t\ti = 0;\n\n        for (i = 0; i < 4; i++) {\n            var i4 = i << 2;\n            src[i] = mat[i4];\n            src[i + 4] = mat[i4 + 1];\n            src[i + 8] = mat[i4 + 2];\n            src[i + 12] = mat[i4 + 3];\n        }\n\n        // calculate pairs for first 8 elements (cofactors)\n        tmp[0] = src[10] * src[15];\n        tmp[1] = src[11] * src[14];\n        tmp[2] = src[9] * src[15];\n        tmp[3] = src[11] * src[13];\n        tmp[4] = src[9] * src[14];\n        tmp[5] = src[10] * src[13];\n        tmp[6] = src[8] * src[15];\n        tmp[7] = src[11] * src[12];\n        tmp[8] = src[8] * src[14];\n        tmp[9] = src[10] * src[12];\n        tmp[10] = src[8] * src[13];\n        tmp[11] = src[9] * src[12];\n\n        // calculate first 8 elements (cofactors)\n        var src0 = src[0],\n\t\t\tsrc1 = src[1],\n\t\t\tsrc2 = src[2],\n\t\t\tsrc3 = src[3],\n\t\t\tsrc4 = src[4],\n\t\t\tsrc5 = src[5],\n\t\t\tsrc6 = src[6],\n\t\t\tsrc7 = src[7];\n\t\tdst[0] = tmp[0] * src5 + tmp[3] * src6 + tmp[4] * src7;\n\t\tdst[0] -= tmp[1] * src5 + tmp[2] * src6 + tmp[5] * src7;\n\t\tdst[1] = tmp[1] * src4 + tmp[6] * src6 + tmp[9] * src7;\n\t\tdst[1] -= tmp[0] * src4 + tmp[7] * src6 + tmp[8] * src7;\n\t\tdst[2] = tmp[2] * src4 + tmp[7] * src5 + tmp[10] * src7;\n\t\tdst[2] -= tmp[3] * src4 + tmp[6] * src5 + tmp[11] * src7;\n\t\tdst[3] = tmp[5] * src4 + tmp[8] * src5 + tmp[11] * src6;\n\t\tdst[3] -= tmp[4] * src4 + tmp[9] * src5 + tmp[10] * src6;\n\t\tdst[4] = tmp[1] * src1 + tmp[2] * src2 + tmp[5] * src3;\n\t\tdst[4] -= tmp[0] * src1 + tmp[3] * src2 + tmp[4] * src3;\n\t\tdst[5] = tmp[0] * src0 + tmp[7] * src2 + tmp[8] * src3;\n\t\tdst[5] -= tmp[1] * src0 + tmp[6] * src2 + tmp[9] * src3;\n\t\tdst[6] = tmp[3] * src0 + tmp[6] * src1 + tmp[11] * src3;\n\t\tdst[6] -= tmp[2] * src0 + tmp[7] * src1 + tmp[10] * src3;\n\t\tdst[7] = tmp[4] * src0 + tmp[9] * src1 + tmp[10] * src2;\n\t\tdst[7] -= tmp[5] * src0 + tmp[8] * src1 + tmp[11] * src2;\n\n        // calculate pairs for second 8 elements (cofactors)\n\t\ttmp[0] = src2 * src7;\n\t\ttmp[1] = src3 * src6;\n\t\ttmp[2] = src1 * src7;\n\t\ttmp[3] = src3 * src5;\n\t\ttmp[4] = src1 * src6;\n\t\ttmp[5] = src2 * src5;\n\t\ttmp[6] = src0 * src7;\n\t\ttmp[7] = src3 * src4;\n\t\ttmp[8] = src0 * src6;\n\t\ttmp[9] = src2 * src4;\n\t\ttmp[10] = src0 * src5;\n\t\ttmp[11] = src1 * src4;\n\n        // calculate second 8 elements (cofactors)\n\t\tsrc0 = src[8];\n\t\tsrc1 = src[9];\n\t\tsrc2 = src[10];\n\t\tsrc3 = src[11];\n\t\tsrc4 = src[12];\n\t\tsrc5 = src[13];\n\t\tsrc6 = src[14];\n\t\tsrc7 = src[15];\n\t\tdst[8] = tmp[0] * src5 + tmp[3] * src6 + tmp[4] * src7;\n\t\tdst[8] -= tmp[1] * src5 + tmp[2] * src6 + tmp[5] * src7;\n\t\tdst[9] = tmp[1] * src4 + tmp[6] * src6 + tmp[9] * src7;\n\t\tdst[9] -= tmp[0] * src4 + tmp[7] * src6 + tmp[8] * src7;\n\t\tdst[10] = tmp[2] * src4 + tmp[7] * src5 + tmp[10] * src7;\n\t\tdst[10] -= tmp[3] * src4 + tmp[6] * src5 + tmp[11] * src7;\n\t\tdst[11] = tmp[5] * src4 + tmp[8] * src5 + tmp[11] * src6;\n\t\tdst[11] -= tmp[4] * src4 + tmp[9] * src5 + tmp[10] * src6;\n\t\tdst[12] = tmp[2] * src2 + tmp[5] * src3 + tmp[1] * src1;\n\t\tdst[12] -= tmp[4] * src3 + tmp[0] * src1 + tmp[3] * src2;\n\t\tdst[13] = tmp[8] * src3 + tmp[0] * src0 + tmp[7] * src2;\n\t\tdst[13] -= tmp[6] * src2 + tmp[9] * src3 + tmp[1] * src0;\n\t\tdst[14] = tmp[6] * src1 + tmp[11] * src3 + tmp[3] * src0;\n\t\tdst[14] -= tmp[10] * src3 + tmp[2] * src0 + tmp[7] * src1;\n\t\tdst[15] = tmp[10] * src2 + tmp[4] * src0 + tmp[9] * src1;\n\t\tdst[15] -= tmp[8] * src1 + tmp[11] * src2 + tmp[5] * src0;\n\n\t\tvar det = 1.0 / (src[0] * dst[0] + src[1] * dst[1] + src[2] * dst[2] + src[3] * dst[3]);\n\t\tfor (i = 0, k = 0; i < 4; i++) {\n\t\t\tvar m = this.matrix[i];\n\t\t\tfor (var j = 0; j < 4; j++) {\n\t\t\t\tm[j] = dst[k++] * det;\n\t\t\t}\n\t\t}\n\t\treturn this;\n    },\n\n    multiply: function(a) {\n\t\tif(typeof(a) == \"number\"){\n\t\t\treturn new Matrix4x4(this).multiply(a);\n\t\t}\n\t\t//otherwise it should be a Matrix4x4\n\t\treturn new Matrix4x4(this).multiplySelf(a);\n    },\n\n    multiplySelf: function(a) {\n\t\tvar i = 0,\n\t\t\tm;\n\t\tif(typeof(a) == \"number\"){\n\t\t\tfor (i = 0; i < 4; i++) {\n\t\t\t\tm = this.matrix[i];\n\t\t\t\tm[0] *= a;\n\t\t\t\tm[1] *= a;\n\t\t\t\tm[2] *= a;\n\t\t\t\tm[3] *= a;\n\t\t\t}\n\t\t\treturn this;\n\t\t}\n\t\t//otherwise it should be a matrix4x4\n\t\tvar mm0 = a.matrix[0],\n\t\t\tmm1 = a.matrix[1],\n\t\t\tmm2 = a.matrix[2],\n\t\t\tmm3 = a.matrix[3];\n        for (i = 0; i < 4; i++) {\n            m = this.matrix[i];\n            for (var j = 0; j < 4; j++) {\n                this.temp[j] = m[0] * mm0[j] + m[1] * mm1[j] + m[2] * mm2[j] + m[3] * mm3[j];\n            }\n            m[0] = this.temp[0];\n            m[1] = this.temp[1];\n            m[2] = this.temp[2];\n            m[3] = this.temp[3];\n        }\n        return this;\n    },\n    /**\n     * Applies rotation about arbitrary axis to matrix\n     *\n     * @param axis\n     * @param theta\n     * @return rotation applied to this matrix\n     */\n    rotateAroundAxis: function(axis, theta) {\n        var x, y, z, s, c, t, tx, ty;\n        x = axis.x;\n        y = axis.y;\n        z = axis.z;\n        s = Math.sin(theta);\n        c = Math.cos(theta);\n        t = 1 - c;\n        tx = t * x;\n        ty = t * y;\n\t\t_TEMP.set(\n\t\t\ttx * x + c, tx * y + s * z, tx * z - s * y, 0, tx * y - s * z,\n\t\t\tty * y + c, ty * z + s * x, 0, tx * z + s * y, ty * z - s * x,\n\t\t\tt * z * z + c, 0, 0, 0, 0, 1\n\t\t);\n        return this.multiplySelf(_TEMP);\n    },\n\n    /**\n     * Applies rotation about X to this matrix.\n     *\n     * @param theta\n     *            rotation angle in radians\n     * @return itself\n     */\n    rotateX: function(theta) {\n        _TEMP.identity();\n        _TEMP.matrix[1][1] = _TEMP.matrix[2][2] = Math.cos(theta);\n        _TEMP.matrix[2][1] = Math.sin(theta);\n        _TEMP.matrix[1][2] = -_TEMP.matrix[2][1];\n        return this.multiplySelf(_TEMP);\n    },\n\n    /**\n     * Applies rotation about Y to this matrix.\n     *\n     * @param theta\n     *            rotation angle in radians\n     * @return itself\n     */\n    rotateY: function(theta) {\n        _TEMP.identity();\n        _TEMP.matrix[0][0] = _TEMP.matrix[2][2] = Math.cos(theta);\n        _TEMP.matrix[0][2] = Math.sin(theta);\n        _TEMP.matrix[2][0] = -_TEMP.matrix[0][2];\n        return this.multiplySelf(_TEMP);\n    },\n\n    // Apply Rotation about Z to Matrix\n    rotateZ: function(theta) {\n        _TEMP.identity();\n        _TEMP.matrix[0][0] = _TEMP.matrix[1][1] = Math.cos(theta);\n        _TEMP.matrix[1][0] = Math.sin(theta);\n        _TEMP.matrix[0][1] = -_TEMP.matrix[1][0];\n        return this.multiplySelf(_TEMP);\n    },\n\n    scale: function(a,b,c) {\n\t\treturn new Matrix4x4(this).scaleSelf(a,b,c);\n    },\n\n    scaleSelf: function(a,b,c) {\n\t\tif( internals.has.XYZ( a ) ){\n\t\t\tb = a.y;\n\t\t\tc = a.z;\n\t\t\ta = a.x;\n\t\t} else if(b === undefined || c === undefined) {\n\t\t\tb = a;\n\t\t\tc = a;\n\t\t}\n        _TEMP.identity();\n        _TEMP.matrix[0][0] = a;\n        _TEMP.matrix[1][1] = b;\n        _TEMP.matrix[2][2] = c;\n        return this.multiplySelf(_TEMP);\n    },\n\n\tset: function(a,b,c, d, e,f,g, h, i, j, k, l, m, n, o, p) {\n\t\tvar mat;\n\t\tif(typeof(a) == \"number\"){\n\t\t\tmat = this.matrix[0];\n\t\t\tmat[0] = a;\n\t\t\tmat[1] = b;\n\t\t\tmat[2] = c;\n\t\t\tmat[3] = d;\n\t\t\tmat = this.matrix[1];\n\t\t\tmat[0] = e;\n\t\t\tmat[1] = f;\n\t\t\tmat[2] = g;\n\t\t\tmat[3] = h;\n\t\t\tmat = this.matrix[2];\n\t\t\tmat[0] = i;\n\t\t\tmat[1] = j;\n\t\t\tmat[2] = k;\n\t\t\tmat[3] = l;\n\t\t\tmat = this.matrix[3];\n\t\t\tmat[0] = m;\n\t\t\tmat[1] = n;\n\t\t\tmat[2] = o;\n\t\t\tmat[3] = p;\n\t\t} else {\n\t\t\t//it must be a matrix4x4\n\t\t\tfor (var it_n = 0; it_n < 4; it_n++) {\n\t            mat = this.matrix[it_n];\n\t\t\t\tvar mat_n = mat.matrix[it_n];\n\t\t\t\tmat[0] = mat_n[0];\n\t\t\t\tmat[1] = mat_n[1];\n\t\t\t\tmat[2] = mat_n[2];\n\t\t\t\tmat[3] = mat_n[3];\n\t\t\t}\n\t\t}\n\t\treturn this;\n    },\n\n    setFrustrum: function(left,right,top,bottom,near,far){\n    \tvar rl = (right - left),\n    \t\ttb = (top - bottom),\n    \t\tfn = (far - near);\n\n\n    \treturn this.set(\n    \t\t(2.0 * near) / rl,\n    \t\t0,\n    \t\t(left + right) / rl,\n    \t\t0,\n    \t\t0,\n    \t\t(2.0 * near) / tb,\n    \t\t(top + bottom) / tb,\n    \t\t0,\n    \t\t0,\n    \t\t0,\n    \t\t-(near + far) / fn,\n    \t\t(-2 * near * far) / fn,\n    \t\t0,\n    \t\t0,\n    \t\t-1,\n    \t\t0\n    \t);\n    },\n\n    setOrtho: function(left,right,top,bottom,near,far){\n    \tvar mat = [\n    \t\t2.0 / (right - left),\n    \t\t0,\n    \t\t0,\n    \t\t(left + right) / (right - left),\n            0,\n            2.0 / (top - bottom),\n            0,\n            (top + bottom) / (top - bottom),\n            0,\n            0,\n            -2.0 / (far - near),\n            (far + near) / (far - near),\n            0,\n            0,\n            0,\n            1\n    \t];\n\n    \treturn this.set.apply(this,mat);\n    },\n\n    setPerspective: function(fov,aspect,near,far){\n    \tvar y = near * Math.tan(0.5 * mathUtils.radians(fov)),\n    \t\tx = aspect * y;\n    \treturn this.setFrustrum(-x,x,y,-y,near,far);\n    },\n\n    setPosition: function(x,y,z){\n    \tthis.matrix[0][3] = x;\n    \tthis.matrix[1][3] = y;\n    \tthis.matrix[2][3] = z;\n    \treturn this;\n    },\n\n    setScale: function(sX,sY,sZ){\n    \tthis.matrix[0][0] = sX;\n    \tthis.matrix[1][1] = sY;\n    \tthis.matrix[2][2] = sZ;\n    \treturn this;\n    },\n\n\n    sub: function(m) {\n\t\treturn new Matrix4x4(this).subSelf(m);\n    },\n\n    subSelf: function(mat) {\n        for (var i = 0; i < 4; i++) {\n            var m = this.matrix[i];\n            var n = mat.matrix[i];\n            m[0] -= n[0];\n            m[1] -= n[1];\n            m[2] -= n[2];\n            m[3] -= n[3];\n        }\n        return this;\n    },\n\n    /**\n     * Copies all matrix elements into an linear array.\n     *\n     * @param result\n     *            array (or null to create a new one)\n     * @return matrix as 16 element array\n     */\n    toArray: function(result) {\n        if (result === undefined) {\n            result = [];\n        }\n        for (var i = 0, k = 0; i < 4; i++) {\n            var m = this.matrix[i];\n            for (var j = 0; j < 4; j++) {\n                result[k++] = m[j];\n            }\n        }\n        return result;\n    },\n\n    toFloatArray:function(result) {\n        return new Float32Array(this.toArray(result));\n    },\n\n    /*\n     * (non-Javadoc)\n     *\n     * @see java.lang.Object#toString()\n     */\n    toString: function() {\n        return \"| \" + this.matrix[0][0] + \" \" + this.matrix[0][1] + \" \" + this.matrix[0][2] + \" \" + this.matrix[0][3] + \" |\\n\" + \"| \" + this.matrix[1][0] + \" \" + this.matrix[1][1] + \" \" + this.matrix[1][2] + \" \" + this.matrix[1][3] + \" |\\n\" + \"| \" + this.matrix[2][0] + \" \" + this.matrix[2][1] + \" \" + this.matrix[2][2] + \" \" + this.matrix[2][3] + \" |\\n\" + \"| \" + this.matrix[3][0] + \" \" + this.matrix[3][1] + \" \" + this.matrix[3][2] + \" \" + this.matrix[3][3] + \" |\";\n    },\n\n    toTransposedFloatArray: function(result) {\n        if (result === undefined) {\n            result = [];\n        }\n        for (var i = 0, k = 0; i < 4; i++) {\n            for (var j = 0; j < 4; j++) {\n                result[k++] = this.matrix[j][i];\n            }\n        }\n        return result;\n    },\n\n    translate: function(dx,dy,dz) {\n\t\treturn new Matrix4x4(this).translateSelf(dx, dy, dz);\n    },\n\n    translateSelf: function( dx, dy, dz) {\n\t\tif( internals.has.XYZ( dx ) ){\n\t\t\tdy = dx.y;\n\t\t\tdz = dx.z;\n\t\t\tdx = dx.x;\n\t\t}\n\t\t_TEMP.identity();\n\t\t_TEMP.setPosition(dx,dy,dz);\n\t\treturn this.multiplySelf(_TEMP);\n    },\n\n    /**\n     * Converts the matrix (in-place) between column-major to row-major order\n     * (and vice versa).\n     *\n     * @return itself\n     */\n    transpose: function() {\n        return this.set(\n\t\t\tthis.matrix[0][0], this.matrix[1][0], this.matrix[2][0], this.matrix[3][0],\n\t\t\tthis.matrix[0][1], this.matrix[1][1], this.matrix[2][1], this.matrix[3][1],\n\t\t\tthis.matrix[0][2], this.matrix[1][2], this.matrix[2][2], this.matrix[3][2],\n\t\t\tthis.matrix[0][3], this.matrix[1][3], this.matrix[2][3], this.matrix[3][3]\n\t\t);\n\t}\n};\n\n//private temp matrix\nvar _TEMP = new Matrix4x4();\n\nmodule.exports = Matrix4x4;\n\n\n", "\n\nvar mathUtils = require('../math/mathUtils'),\n    Ray3D = require('./Ray3D');\n\n/**\n @class\n @member toxi\n */\nvar Line3D = function(vec_a, vec_b) {\n    this.a = vec_a;\n    this.b = vec_b;\n};\n\nLine3D.prototype = {\n    constructor: Line3D,\n    closestLineTo: function(l) {\n\n        var p43 = l.a.sub(l.b);\n        if (p43.isZeroVector()) {\n            return new Line3D.LineIntersection(Line3D.LineIntersection.Type.NON_INTERSECTING);\n        }\n\n        var p21 = this.b.sub(this.a);\n        if (p21.isZeroVector()) {\n            return new Line3D.LineIntersection(Line3D.LineIntersection.Type.NON_INTERSECTING);\n        }\n        var p13 = this.a.sub(l.a);\n\n        var d1343 = p13.x * p43.x + p13.y * p43.y + p13.z * p43.z;\n        var d4321 = p43.x * p21.x + p43.y * p21.y + p43.z * p21.z;\n        var d1321 = p13.x * p21.x + p13.y * p21.y + p13.z * p21.z;\n        var d4343 = p43.x * p43.x + p43.y * p43.y + p43.z * p43.z;\n        var d2121 = p21.x * p21.x + p21.y * p21.y + p21.z * p21.z;\n\n        var denom = d2121 * d4343 - d4321 * d4321;\n        if (Math.abs(denom) < mathUtils.EPS) {\n            return new Line3D.LineIntersection(Line3D.LineIntersection.Type.NON_INTERSECTING);\n        }\n        var numer = d1343 * d4321 - d1321 * d4343;\n        var mua = numer / denom;\n        var mub = (d1343 + d4321 * mua) / d4343;\n\n        var pa = this.a.add(p21.scaleSelf(mua));\n        var pb = l.a.add(p43.scaleSelf(mub));\n        return new Line3D.LineIntersection(Line3D.LineIntersection.Type.INTERSECTING, new Line3D(pa, pb), mua,mub);\n    },\n\n    /**\n    * Computes the closest point on this line to the given one.\n    *\n    * @param p\n    *            point to check against\n    * @return closest point on the line\n    */\n    closestPointTo: function(p) {\n        var v = this.b.sub(this.a);\n        var t = p.sub(this.a).dot(v) / v.magSquared();\n        // Check to see if t is beyond the extents of the line segment\n        if (t < 0.0) {\n            return this.a.copy();\n        } else if (t > 1.0) {\n            return this.b.copy();\n        }\n        // Return the point between 'a' and 'b'\n        return this.a.add(v.scaleSelf(t));\n    },\n\n    copy: function() {\n        return new Line3D(this.a.copy(), this.b.copy());\n    },\n\n    equals: function(obj) {\n        if (this == obj) {\n            return true;\n        }\n        if ((typeof(obj) != Line3D)) {\n            return false;\n        }\n        return (this.a.equals(obj.a) || this.a.equals(l.b)) && (this.b.equals(l.b) || this.b.equals(l.a));\n    },\n\n    getDirection: function() {\n        return this.b.sub(this.a).normalize();\n    },\n\n    getLength: function() {\n        return this.a.distanceTo(this.b);\n    },\n\n    getLengthSquared: function() {\n        return this.a.distanceToSquared(this.b);\n    },\n\n    getMidPoint: function() {\n        return this.a.add(this.b).scaleSelf(0.5);\n    },\n\n    getNormal: function() {\n        return this.b.cross(this.a);\n    },\n\n    hasEndPoint: function(p) {\n        return this.a.equals(p) || this.b.equals(p);\n    },\n\n\n    offsetAndGrowBy: function(offset,scale,ref) {\n        var m = this.getMidPoint(),\n            d = this.getDirection(),\n            n = this.a.cross(d).normalize();\n        if (ref !== undefined && m.sub(ref).dot(n) < 0) {\n            n.invert();\n        }\n        n.normalizeTo(offset);\n        this.a.addSelf(n);\n        this.b.addSelf(n);\n        d.scaleSelf(scale);\n        this.a.subSelf(d);\n        this.b.addSelf(d);\n        return this;\n    },\n\n    set: function(vec_a, vec_b) {\n        this.a = vec_a;\n        this.b = vec_b;\n        return this;\n    },\n\n    splitIntoSegments: function(segments,stepLength, addFirst) {\n        return Line3D.splitIntoSegments(this.a, this.b, stepLength, segments, addFirst);\n    },\n\n    toRay3D: function(){\n        return new Ray3D( this.a.copy(), this.getDirection() );\n    },\n\n    toString: function() {\n        return this.a.toString() + \" -> \" + this.b.toString();\n    }\n};\n\n/**\n    * Splits the line between A and B into segments of the given length,\n    * starting at point A. The tweened points are added to the given result\n    * list. The last point added is B itself and hence it is likely that the\n    * last segment has a shorter length than the step length requested. The\n    * first point (A) can be omitted and not be added to the list if so\n    * desired.\n    *\n    * @param a\n    *            start point\n    * @param b\n    *            end point (always added to results)\n    * @param stepLength\n    *            desired distance between points\n    * @param segments\n    *            existing array list for results (or a new list, if null)\n    * @param addFirst\n    *            false, if A is NOT to be added to results\n    * @return list of result vectors\n    */\nLine3D.splitIntoSegments = function(vec_a, vec_b, stepLength, segments, addFirst) {\n    if (segments === undefined) {\n        segments = [];\n    }\n    if (addFirst) {\n        segments.push(vec_a.copy());\n    }\n    var dist = vec_a.distanceTo(vec_b);\n    if (dist > stepLength) {\n        var pos = vec_a.copy();\n        var step = vec_b.sub(vec_a).limit(stepLength);\n        while (dist > stepLength) {\n            pos.addSelf(step);\n            segments.push(pos.copy());\n            dist -= stepLength;\n        }\n    }\n    segments.push(vec_b.copy());\n    return segments;\n};\n\n\nLine3D.LineIntersection = function(type,line,mua,mub){\n    this.type = type;\n    if(mua === undefined){ mua = 0; }\n    if(mub === undefined){ mub = 0; }\n    this.line = line;\n    this.coeff = [mua,mub];\n};\n\nLine3D.LineIntersection.prototype = {\n\n    getCoefficient: function(){\n        return this.coeff;\n    },\n\n    getLength: function(){\n        if(this.line === undefined){ return undefined; }\n        return this.line.getLength();\n    },\n\n    getLine: function(){\n        if(this.line === undefined){ return undefined; }\n        return this.line.copy();\n    },\n\n    getType: function(){\n        return this.type;\n    },\n\n    isIntersectionInside: function(){\n        return this.type == Line3D.LineIntersection.Type.INTERSECTING && this.coeff[0] >= 0 && this.coeff[0] <= 1 && this.coeff[1] >=0 && this.coeff[1] <= 1;\n    },\n\n    toString: function(){\n        return \"type: \"+this.type+ \" line: \"+this.line;\n    }\n};\n\nLine3D.LineIntersection.Type = {\n    NON_INTERSECTING: 0,\n    INTERSECTING: 1\n};\n\nmodule.exports = Line3D;\n\n\n", "\n\nvar extend = require('../internals').extend,\n\tVec3D = require('./Vec3D'),\n\tLine3D = require('./Line3D');\n\n/**\n * @class\n * @member toxi\n */\nvar\tRay3D = function(a,b,c,d){\n\tvar o, dir;\n\tif(arguments.length == 4){\n\t\to = new Vec3D(a,b,c);\n\t\tdir = d;\n\t}\n\telse if(arguments.length == 2){\n\t\to = a;\n\t\tdir = b;\n\t}\n\telse {\n\t\to = new Vec3D();\n\t\tdir = Vec3D.Y_AXIS.copy();\n\t}\n\tVec3D.apply(this,[o]);\n\tthis.dir = dir;\n};\n\nextend(Ray3D,Vec3D);\n\n/**\n\tReturns a copy of the ray's direction vector.\n\t@return vector\n*/\nRay3D.prototype.getDirection = function() {\n    return this.dir.copy();\n};\n\n/**\n\tCalculates the distance between the given point and the infinite line\n\tcoinciding with this ray.\n\t@param p\n*/\nRay3D.prototype.getDistanceToPoint = function(p) {\n    var sp = p.sub(this);\n    return sp.distanceTo(this.dir.scale(sp.dot(this.dir)));\n};\n\n/**\n\tReturns the point at the given distance on the ray. The distance can be\n\tany real number.\n\t@param dist\n\t@return vector\n*/\nRay3D.prototype.getPointAtDistance = function(dist) {\n    return this.add(this.dir.scale(dist));\n};\n\n/**\n  Uses a normalized copy of the given vector as the ray direction.\n  @param d new direction\n  @return itself\n*/\nRay3D.prototype.setDirection = function(d) {\n    this.dir.set(d).normalize();\n    return this;\n};\n\n/**\n  Converts the ray into a 3D Line segment with its start point coinciding\n  with the ray origin and its other end point at the given distance along\n  the ray.\n\n  @param dist end point distance\n  @return line segment\n*/\nRay3D.prototype.toLine3DWithPointAtDistance = function(dist) {\n    Line3D = require('./Line3D');\n    return new Line3D(this, this.getPointAtDistance(dist));\n};\n\nRay3D.prototype.toString = function() {\n    return \"origin: \" + this.parent.toString.call(this) + \" dir: \" + this.dir;\n};\n\nmodule.exports = Ray3D;\n\n", "\n\t//these 2 modules get defined\n\tvar Face, WEFace;\n\n\t(function(){\n\t\tvar Triangle3D = require('../Triangle3D');\n\t\tFace = function(a,b,c,uvA,uvB,uvC) {\n\t\t\tthis.a = a;\n\t\t\tthis.b = b;\n\t\t\tthis.c = c;\n\t\t\tvar aminusc = this.a.sub(this.c);\n\t\t\tvar aminusb = this.a.sub(this.b);\n\t\t\tvar cross = aminusc.crossSelf(aminusb);\n\t\t\tthis.normal = cross.normalize();\n\t\t\tthis.a.addFaceNormal(this.normal);\n\t\t\tthis.b.addFaceNormal(this.normal);\n\t\t\tthis.c.addFaceNormal(this.normal);\n\t\t\t\n\t\t\tif(uvA !== undefined){\n\t\t\t\tthis.uvA = uvA;\n\t\t\t\tthis.uvB = uvB;\n\t\t\t\tthis.uvC = uvC;\n\t\t\t}\n\t\t};\n\n\t\tFace.prototype = {\n\t\t\tcomputeNormal: function() {\n\t\t\t\tthis.normal = this.a.sub(this.c).crossSelf(this.a.sub(this.b)).normalize();\n\t\t\t},\n\n\t\t\tflipVertexOrder: function() {\n\t\t\t\tvar t = this.a;\n\t\t\t\tthis.a = this.b;\n\t\t\t\tthis.b = t;\n\t\t\t\tthis.normal.invert();\n\t\t\t},\n\t\t\t\n\t\t\tgetCentroid: function() {\n\t\t\t\treturn this.a.add(this.b).addSelf(this.c).scale(1.0 / 3);\n\t\t\t},\n\t\t\t\n\t\t\tgetClass: function(){\n\t\t\t\treturn \"Face\";\n\t\t\t},\n\n\t\t\tgetVertices: function(verts) {\n\t\t\t\tif (verts !== undefined) {\n\t\t\t\t\tverts[0] = this.a;\n\t\t\t\t\tverts[1] = this.b;\n\t\t\t\t\tverts[2] = this.c;\n\t\t\t\t} else {\n\t\t\t\t\tverts = [ this.a, this.b, this.c ];\n\t\t\t\t}\n\t\t\t\treturn verts;\n\t\t\t},\n\n\t\t\ttoString: function() {\n\t\t\t\treturn this.getClass() + \" \" + this.a + \", \" + this.b + \", \" + this.c;\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Creates a generic {@link Triangle3D} instance using this face's vertices.\n\t\t\t * The new instance is made up of copies of the original vertices and\n\t\t\t * manipulating them will not impact the originals.\n\t\t\t *\n\t\t\t * @return triangle copy of this mesh face\n\t\t\t */\n\t\t\ttoTriangle: function() {\n\t\t\t\treturn new Triangle3D(this.a.copy(), this.b.copy(), this.c.copy());\n\t\t\t}\n\t\t};\n\t}());\n\n\t//define WEFace\n\t(function(){\n\t\tvar internals = require('../../internals');\n\t\tvar proto;\n\t\t//@param {WEVertex} a\n\t\t//@param {WEVertex} b\n\t\t//@param {WEVertex} c\n\t\t//@param {Vec2D} [uvA]\n\t\t//@param {Vec2D} [uvB]\n\t\t//@param {Vec2D} [uvC]\n\t\tWEFace = function( a, b, c, uvA, uvB, uvC ){\n\t\t\tFace.call(this, a, b, c, uvA, uvB, uvC);\n\t\t\tthis.edges = [];\n\t\t};\n\t\tinternals.extend( WEFace, Face );\n\t\tproto = WEFace.prototype;\n\t\t//@param {WingedEdge} edge\n\t\tproto.addEdge = function( edge ){\n\t\t\tthis.edges.push( edge );\n\t\t};\n\t\tproto.getEdges = function(){\n\t\t\treturn this.edges;\n\t\t};\n\t\t//@param {WEVertex[]} [verts]\n\t\tproto.getVertices = function( verts ){\n\t\t\tif( verts !== undefined ){\n\t\t\t\tverts[0] = this.a;\n\t\t\t\tverts[1] = this.b;\n\t\t\t\tverts[2] = this.c;\n\t\t\t} else {\n\t\t\t\tverts = [ this.a, this.b, this.c ];\n\t\t\t}\n\t\t\treturn verts;\n\t\t};\n\t}());\n\tFace.WEFace = WEFace;\n\tmodule.exports = Face;\n\n", "\n\nvar Vec3D = require('./Vec3D');\n\n/**\n * @class\n * @member toxi\n */\nvar\tIsectData3D = function(isec){\n\tif(isec !== undefined){\n\t\tthis.isIntersection = isec.isIntersection;\n\t\tthis.dist = isec.dist;\n\t\tthis.pos = isec.pos.copy();\n\t\tthis.dir = isec.dir.copy();\n\t\tthis.normal = isec.normal.copy();\n\t}\n\telse {\n\t\tthis.clear();\n\t}\n};\n\nIsectData3D.prototype = {\n\tclear: function(){\n\t\tthis.isIntersection = false;\n\t\tthis.dist = 0;\n\t\tthis.pos = new Vec3D();\n\t\tthis.dir = new Vec3D();\n\t\tthis.normal = new Vec3D();\n\t},\n\t\n\ttoString: function(){\n\t\tvar s = \"isec: \"+this.isIntersection;\n\t\tif(this.isIntersection){\n\t\t\ts += \" at:\"+this.pos+ \" dist:\"+this.dist+\" normal:\"+this.normal;\n\t\t}\n\t\treturn s;\n\t}\n};\n\nmodule.exports = IsectData3D;\n\n", "var mathUtils = require('../math/mathUtils');\nvar Triangle3D = require('./Triangle3D');\nvar Vec3D = require('./Vec3D');\nvar IsectData3D = require('./IsectData3D');\n\n\t/**\n\t * @param {Triangle3D} [t]\n\t */\n\tvar TriangleIntersector = function(t){\n\t\tthis.triangle = t || new Triangle3D();\n\t\tthis.isectData = new IsectData3D();\n\t};\n\n\tTriangleIntersector.prototype = {\n\t\tgetIntersectionData: function(){\n\t\t\treturn this.isectData;\n\t\t},\n\t\tgetTriangle: function(){\n\t\t\treturn this.triangle;\n\t\t},\n\t\t/**\n\t\t * @param {Ray3D} ray\n\t\t * @returns {Boolean}\n\t\t */\n\t\tintersectsRay: function(ray){\n\t\t\tthis.isectData.isIntersection = false;\n\t\t\tvar n = this.triangle.computeNormal(),\n\t\t\t\tdotprod = n.dot(ray.dir);\n\t\t\tif(dotprod < 0){\n\t\t\t\tvar rt = ray.sub(this.triangle.a),\n\t\t\t\t\tt = -(n.x * rt.x + n.y * rt.y + n.z * rt.z) / (n.x * ray.dir.x + n.y * ray.dir.y + n.z * ray.dir.z);\n\t\t\t\tif(t >= mathUtils.EPS){\n\t\t\t\t\tvar pos = ray.getPointAtDistance(t);\n\t\t\t\t\t//check if pos is inside triangle\n\t\t\t\t\tif(this.triangle.containsPoint(pos)){\n\t\t\t\t\t\tthis.isectData.isIntersection = true;\n\t\t\t\t\t\tthis.isectData.pos = pos;\n\t\t\t\t\t\tthis.isectData.normal = n;\n\t\t\t\t\t\tthis.isectData.dist = t;\n\t\t\t\t\t\tthis.isectData.dir = this.isectData.pos.sub(ray).normalize();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn this.isectData.isIntersection;\n\t\t},\n\t\t/**\n\t\t * @param {Triangle3D} tri\n\t\t * @returns {TriangleIntersector}\n\t\t */\n\t\tsetTriangle: function(tri){\n\t\t\tthis.triangle = tri;\n\t\t\treturn this;\n\t\t}\n\t};\n\n\tmodule.exports = TriangleIntersector;\n\n", "\n\nvar mathUtils = require('../math/mathUtils'),\n\tMatrix4x4 = require('./Matrix4x4');\n\n/**\n * @class\n * @member toxi\n */\nvar\tQuaternion = function (qw,vx,y,z){\n\tif(arguments.length == 4){\n\t\tthis.w = qw;\n\t\tthis.x = vx;\n\t\tthis.y = y;\n\t\tthis.z = z;\n\t} else if(arguments.length == 2){\n\t\tthis.x = vx.x;\n\t\tthis.y = vx.y;\n\t\tthis.z = vx.z;\n\t\tthis.w = qw;\n\t} else if(arguments.length == 1) {\n\t\tthis.w = q.w;\n\t\tthis.x = q.x;\n\t\tthis.y = q.y;\n\t\tthis.z = q.z;\n\t}\n};\n\n\nQuaternion.prototype = {\n\tadd: function(q){\n\t\treturn new Quaternion(this.x + q.x, this.y + q.y, this.z + q.z, this.w + q.w);\n\t},\n\taddSelf: function(q){\n\t\tthis.x += q.x;\n\t\tthis.y += q.y;\n\t\tthis.z += q.z;\n\t\treturn this;\n\t},\n\tcopy: function(){\n\t\treturn new Quaternion(this.w,this.x,this.y,this.z);\n\t},\n\tdot: function(q){\n\t\treturn (this.x * q.x) + (this.y * q.y) + (this.z * q.z) + (this.w * q.w);\n\t},\n\tgetConjugate: function(){\n\t\tvar q = new Quaternion();\n\t\tq.x = -this.x;\n\t\tq.y = -this.y;\n\t\tq.z = -this.z;\n\t\tq.w = w;\n\t\treturn q;\n\t},\n\tidentity: function(){\n\t\tthis.w = 1.0;\n\t\tthis.x = 0.0;\n\t\tthis.y = 0.0;\n\t\tthis.z = 0.0;\n\t\treturn this;\n\t},\n\tinterpolateTo: function(target,t,is){\n\t\treturn (arguments.length == 3) ? this.copy().interpolateTo(target,is.interpolate(0,1,t)) : this.copy().interpolateToSelf(target,t);\n\t},\n\tinterpolateToSelf: function(target,t,is){\n\t\tif(arguments.length == 3){\n\t\t\tt = is.interpolate(0,1,t);\n\t\t}\n\t\tvar scale,\n\t\t\tinvscale,\n\t\t\tdot = mathUtils.clip(this.dot(target),-1,1);\n\t\t\tif((1.0-dot) >= mathUtils.EPS){\n\t\t\t\tvar theta = Math.acos(dot);\n\t\t\t\tvar invsintheta = 1.0 / Math.sin(theta);\n\t\t\t\tscale = (Math.sin(theta *(1.0 - t)) * invsintheta);\n\t\t\t\tinvscale = (Math.sin(theta * t) * invsintheta);\n\t\t\t} else {\n\t\t\t\tscale = 1 - t;\n\t\t\t\tinvscale = t;\n\t\t\t}\n\t\t\tif(dot < 0.0){\n\t\t\t\tthis.w = scale * this.w - invscale * target.w;\n\t\t\t\tthis.x = scale * this.x - invscale * target.x;\n\t\t\t\tthis.y = scale * this.y - invscale * target.y;\n\t\t\t\tthis.z = scale * this.z - invscale * target.z;\n\t\t\t} else {\n\t\t\t\tthis.w = scale * w + invscale * target.w;\n\t\t\t\tthis.x = scale * x + invscale * target.x;\n\t\t\t\tthis.y = scale * y + invscale * target.y;\n\t\t\t\tthis.z = scale * z + invscale * target.z;\n\t\t\t}\n\t\t\treturn this;\n\t},\n\tmagnitude: function() {\n\t\treturn Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);\n\t},\n\tmultiply: function(q2){\n\t\tvar res = new Quaternion();\n\t\tres.w = this.w * q2.w - x * q2.x - y * q2.y - z * q2.z;\n\t\tres.x = this.w * q2.x + x * q2.w + y * q2.z - z * q2.y;\n\t\tres.y = this.w * q2.y + y * q2.w + z * q2.x - x * q2.z;\n\t\tres.z = this.w * q2.z + z * q2.w + x * q2.y - y * q2.x;\n\t\t\n\t\treturn res;\n\t},\n\tnormalize: function(){\n\t\tvar mag = Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);\n\t\tif(mag > mathUtils.EPS){\n\t\t\tmag = 1 / mag;\n\t\t\tthis.x *= mag;\n\t\t\tthis.y *= mag;\n\t\t\tthis.z *= mag;\n\t\t\tthis.w *= mag;\n\t\t}\n\t\treturn this;\n\t},\n\tscale: function(t){\n\t\treturn new Quaternion(this.x * t, this.y * t, this.z * t, this.w * t);\n\t},\n\tscaleSelf: function(t){\n\t\tthis.x *= t;\n\t\tthis.y *= t;\n\t\tthis.z *= t;\n\t\tthis.w *= t;\n\t\treturn this;\n\t},\n\tset: function(w,x,y,z){\n\t\tif(arguments.length == 4){\n\t\t\tthis.w = w;\n\t\t\tthis.x = x;\n\t\t\tthis.y = y;\n\t\t\tthis.z = z;\n\t\t} else if(arguments.length == 2){\n\t\t\tthis.w = w;\n\t\t\tthis.x = v.x;\n\t\t\tthis.y = v.y;\n\t\t\tthis.z = v.z;\n\t\t}\n\t\telse { //must be 1\n\t\t\tthis.w = q.w;\n\t\t\tthis.x = q.x;\n\t\t\tthis.y = q.y;\n\t\t\tthis.z = q.z;\n\t\t}\n\t\treturn this;\n\t},\n\tsub: function(q){\n\t\treturn new Quaternion(this.x - q.x, this.y - q.y, this.z - q.z, this.w - q.w);\n\t},\n\tsubSelf: function(q){\n\t\tthis.x -= q.x;\n\t\tthis.y -= q.y;\n\t\tthis.z -= q.z;\n\t\tthis.w -= q.w;\n\t\treturn this;\n\t},\n\ttoArray: function(){\n\t\treturn [this.w,this.x,this.y,this.z];\n\t},\n\ttoAxisAngle: function(){\n\t\tvar res = [];\n\t\tvar sa = Math.sqrt(1.0 - this.w * this.w);\n\t\tif(sa < mathUtils.EPS){\n\t\t\tsa = 1.0;\n\t\t} else {\n\t\t\tsa = 1.0 / sa;\n\t\t}\n\t\tres[0] = Math.acos(this.w) * 2.0;\n\t\tres[1] = this.x * sa;\n\t\tres[2] = this.y * sa;\n\t\tres[3] = this.z * sa;\n\t\treturn res;\n\t},\n\ttoMatrix4x4: function(result){\n\t\tif(result === undefined){\n\t\t\tresult = new Matrix4x4();\n\t\t}\n\t\tvar x2 = this.x + this.x;\n\t\tvar y2 = this.y + this.y;\n\t\tvar z2 = this.z + this.z;\n\t\tvar xx = this.x * x2;\n\t\tvar xy = this.x * y2;\n\t\tvar xz = this.x * z2;\n\t\tvar yy = this.y * y2;\n\t\tvar yz = this.y * z2;\n\t\tvar zz = this.z * z2;\n\t\tvar wx = this.w * x2;\n\t\tvar wy = this.w * y2;\n\t\tvar wz = this.w * z2;\n\t\t\n\t\tvar st = x2 +','+y2+','+z2+','+xx+','+xy+','+xz+','+yy+','+yz+','+zz+','+wx+','+wy+','+wz;\n\t\treturn result.set(\n\t\t\t1 - (yy + zz), xy - wz, xz + wy, 0, xy + wz,\n\t\t\t1 - (xx + zz), yz - wx, 0, xz - wy, yz + wx, 1 - (xx + yy), 0,\n\t\t\t0, 0, 0, 1\n\t\t);\n\t},\n\ttoString: function(){\n\t\treturn \"{axis: [\"+this.x+\",\"+this.y+\",\"+this.z+\"], w: \"+this.w+\"}\";\n\t}\n\t\n};\n\nQuaternion.DOT_THRESHOLD = 0.9995;\n\nQuaternion.createFromAxisAngle = function(axis,angle){\n\tangle *= 0.5;\n\tvar sin = mathUtils.sin(angle),\n\t\tcos = mathUtils.cos(angle),\n\t\tq = new Quaternion(cos,axis.getNormalizedTo(sin));\n\treturn q;\n};\n\nQuaternion.createFromEuler = function(pitch,yaw,roll){\n\tpitch *= 0.5;\n\tyaw *=0.5;\n\troll *= 0.5;\n\t\n\tvar sinPitch = mathUtils.sin(pitch),\n\t\tcosPitch = mathUtils.cos(pitch),\n\t\tsinYaw = mathUtils.sin(yaw),\n\t\tcosYaw = mathUtils.cos(yaw),\n\t\tsinRoll = mathUtils.sin(roll),\n\t\tcosRoll = mathUtils.cos(roll);\n\t\n\tvar cosPitchCosYaw = cosPitch * cosYaw,\n\t\tsinPitchSinYaw = sinPitch * sinYaw;\n\t\t\n\t\tvar q = new Quaternion();\n\t\tq.x = sinRoll * cosPitchCosYaw - cosRoll * sinPitchSinYaw;\n\t\tq.y = cosRoll * sinPitch * cosYaw + sinRoll * cosPitch * sinYaw;\n\t\tq.z = cosRoll * cosPitch * sinYaw - sinRoll * sinPitch * cosYaw;\n\t\tq.w = cosRoll * cosPitchCosYaw + sinRoll * sinPitchSinYaw;\n\t\t\n\t\treturn q;\n};\n\nQuaternion.createFromMatrix = function(m){\n\tvar s = 0.0;\n\tvar q = [];\n\tvar trace = m.matrix[0][0] + m.matrix[1][1] + m.matrix[2][2];\n\t\n\tif(trace > 0.0){\n\t\ts = Math.sqrt(trace + 1.0);\n\t\tq[3] = s * 0.5;\n\t\ts = 0.5 / s;\n\t\tq[0] = (m.matrix[1][2] - m.matrix[2][1] * s);\n\t\tq[1] = (m.matrix[2][0] - m.matrix[0][2] * s);\n\t\tq[2] = (m.matrix[0][1] - m.matrix[1][0] * s);\n\t} else {\n\t\t\n\t\tvar nxt = [ 1, 2, 0 ];\n        var i = 0, j = 0, k = 0;\n\n        if (m.matrix[1][1] > m.matrix[0][0]) {\n            i = 1;\n        }\n\n        if (m.matrix[2][2] > m.matrix[i][i]) {\n            i = 2;\n        }\n\n        j = nxt[i];\n        k = nxt[j];\n        s = Math.sqrt((m.matrix[i][i] - (m.matrix[j][j] + m.matrix[k][k])) + 1.0);\n\n        q[i] = s * 0.5;\n        s = 0.5 / s;\n        q[3] = (m.matrix[j][k] - m.matrix[k][j]) * s;\n        q[j] = (m.matrix[i][j] + m.matrix[j][i]) * s;\n        q[k] = (m.matrix[i][k] + m.matrix[k][i]) * s;\n    }\n    \n     return new Quaternion(q[3],q[0],q[1],q[2]);\n };\n \n Quaternion.getAlignmentQuat = function(dir,forward){\n\t\tvar target = dir.getNormalized(),\n\t\t\taxis = forward.cross(target),\n\t\t\tlength = axis.magnitude() + 0.0001,\n\t\t\tangle = Math.atan2(length, forward.dot(target));\n        return this.createFromAxisAngle(axis, angle);\n };\n\n module.exports = Quaternion;\n\n", "\n\n\t//WEVertex becomes a property on Vertex\n\tvar Vertex, WEVertex;\n\n\t(function(){\n\t\tvar extend = require('../../internals').extend,\n\t\t\tVec3D = require('../Vec3D'),\n\t\t\tproto;\n\n\t\tVertex = function(v,id) {\n\t\t\tVec3D.call(this,v);\n\t\t\tthis.id = id;\n\t\t\tthis.normal = new Vec3D();\n\t\t};\n\t\textend(Vertex,Vec3D);\n\t\tproto = Vertex.prototype;\n\t\tproto.addFaceNormal = function(n) {\n\t\t\tthis.normal.addSelf(n);\n\t\t};\n\n\t\tproto.clearNormal = function() {\n\t\t\tthis.normal.clear();\n\t\t};\n\n\t\tproto.computeNormal = function() {\n\t\t\tthis.normal.normalize();\n\t\t};\n\n\t\tproto.toString = function() {\n\t\t\treturn this.id + \": p: \" + this.parent.toString.call(this) + \" n:\" + this.normal.toString();\n\t\t};\n\t}());\n\n\t(function(){\n\t\tvar extend = require('../../internals').extend, proto;\n\n\t\tWEVertex = function( vec3d, id ){\n\t\t\tVertex.call(this, vec3d, id);\n\t\t\tthis.edges = [];\n\t\t};\n\t\textend( WEVertex, Vertex );\n\t\tproto = WEVertex.prototype;\n\t\t//@param {WingedEdge} edge to add\n\t\tproto.addEdge = function( edge ){\n\t\t\tthis.edges.push( edge );\n\t\t};\n\t\t//@param {Vec3D} dir\n\t\t//@param {Number} tolerance\n\t\t//@return {WingedEdge} closest\n\t\tproto.getNeighborInDirection = function( dir, tolerance ){\n\t\t\tvar closest, delta = 1 - tolerance;\n\t\t\tvar neighbors = this.getNeighbors();\n\t\t\tvar d;\n\t\t\tfor(var i=0, l=neighbors.length; i<l; i++){\n\t\t\t\td = neighbors[i].sub( this ).normalize().dot( dir );\n\t\t\t\tif( d > delta ){\n\t\t\t\t\tclosest = neighbors[i];\n\t\t\t\t\tdelta = d;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn closest;\n\t\t};\n\t\t//@return {WingedEdge[]} neighbors\n\t\tproto.getNeighbors = function(){\n\t\t\tvar neighbors = [];\n\t\t\tfor(var i=0, l=this.edges.length; i<l; i++){\n\t\t\t\tneighbors.push( this.edges[i].getOtherEndFor(this) );\n\t\t\t}\n\t\t\treturn neighbors;\n\t\t};\n\n\t\tproto.removeEdge = function( e ){\n\t\t\tthis.edges.splice( this.edges.indexOf( e ), 1 );\n\t\t};\n\n\t\tproto.toString = function(){\n\t\t\treturn this.id + \" {\" + this.x + \",\" + this.y + \",\" + this.z + \"}\";\n\t\t};\n\n\t\treturn WEVertex;\n\t}());\n\tVertex.WEVertex = WEVertex;\n\tmodule.exports = Vertex;\n\n", "\n\n\t//2 modules defined\n\tvar Sphere, SphereFunction;\n\n\t//Sphere\n\t(function(){\n\t\tvar internals = require('../internals');\n\t\tvar meshCommon = require('./mesh/meshCommon');\n\t\tvar Vec3D = require('./Vec3D');\n\t\t/**\n\t\t * @module toxi.geom.Sphere\n\t\t * @augments toxi.geom.Vec3D\n\t\t */\n\t\tSphere = function(a,b){\n\t\t\tif(a === undefined){\n\t\t\t\tVec3D.apply(this,[new Vec3D()]);\n\t\t\t\tthis.radius = 1;\n\t\t\t} else if( internals.has.XYZ( a ) ){\n\t\t\t\tVec3D.apply(this,[a]);\n\t\t\t\tif( internals.is.Sphere( a ) ){\n\t\t\t\t\tthis.radius = a.radius;\n\t\t\t\t} else {\n\t\t\t\t\tthis.radius = b;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tVec3D.apply(this,[new Vec3D()]);\n\t\t\t\tthis.radius = a;\n\t\t\t}\n\t\t};\n\t\tinternals.extend(Sphere,Vec3D);\n\n\t\tSphere.prototype.containsPoint = function(p) {\n\t\t\tvar d = this.sub(p).magSquared();\n\t\t\treturn (d <= this.radius * this.radius);\n\t\t};\n\n\t\t/**\n\t\t * Alternative to {@link SphereIntersectorReflector}. Computes primary &\n\t\t * secondary intersection points of this sphere with the given ray. If no\n\t\t * intersection is found the method returns null. In all other cases, the\n\t\t * returned array will contain the distance to the primary intersection\n\t\t * point (i.e. the closest in the direction of the ray) as its first index\n\t\t * and the other one as its second. If any of distance values is negative,\n\t\t * the intersection point lies in the opposite ray direction (might be\n\t\t * useful to know). To get the actual intersection point coordinates, simply\n\t\t * pass the returned values to {@link Ray3D#getPointAtDistance(float)}.\n\t\t * @param ray\n\t\t * @return 2-element float array of intersection points or null if ray\n\t\t * doesn't intersect sphere at all.\n\t\t */\n\t\tSphere.prototype.intersectRay = function(ray) {\n\t\t\tvar result, a, b, t,\n\t\t\t\tq = ray.sub(this),\n\t\t\t\tdistSquared = q.magSquared(),\n\t\t\t\tv = -q.dot(ray.getDirection()),\n\t\t\t\td = this.radius * this.radius - (distSquared - v * v);\n\t\t\tif (d >= 0.0) {\n\t\t\t\td = Math.sqrt(d);\n\t\t\t\ta = v + d;\n\t\t\t\tb = v - d;\n\t\t\t\tif (!(a < 0 && b < 0)) {\n\t\t\t\t\tif (a > 0 && b > 0) {\n\t\t\t\t\t\tif (a > b) {\n\t\t\t\t\t\t\tt = a;\n\t\t\t\t\t\t\ta = b;\n\t\t\t\t\t\t\tb = t;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (b > 0) {\n\t\t\t\t\t\t\tt = a;\n\t\t\t\t\t\t\ta = b;\n\t\t\t\t\t\t\tb = t;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tresult = [a,b];\n\t\t\t}\n\t\t\treturn result;\n\t\t};\n\n\t\t/**\n\t\t * Considers the current vector as centre of a collision sphere with radius\n\t\t * r and checks if the triangle abc intersects with this sphere. The Vec3D p\n\t\t * The point on abc closest to the sphere center is returned via the\n\t\t * supplied result vector argument.\n\t\t * @param t\n\t\t *\t\t\ttriangle to check for intersection\n\t\t * @param result\n\t\t *\t\t\ta non-null vector for storing the result\n\t\t * @return true, if sphere intersects triangle ABC\n\t\t */\n\t\tSphere.prototype.intersectSphereTriangle = function(t,result) {\n\t\t\t// Find Vec3D P on triangle ABC closest to sphere center\n\t\t\tresult.set(t.closestPointOnSurface(this));\n\n\t\t\t// Sphere and triangle intersect if the (squared) distance from sphere\n\t\t\t// center to Vec3D p is less than the (squared) sphere radius\n\t\t\tvar v = result.sub(this);\n\t\t\treturn v.magSquared() <= this.radius * this.radius;\n\t\t};\n\n\t\t/**\n\t\t * Calculates the normal vector on the sphere in the direction of the\n\t\t * current point.\n\t\t * @param q\n\t\t * @return a unit normal vector to the tangent plane of the ellipsoid in the\n\t\t * point.\n\t\t */\n\t\tSphere.prototype.tangentPlaneNormalAt = function(q) {\n\t\t\treturn this.sub(q).normalize();\n\t\t};\n\n\t\tSphere.prototype.toMesh = function() {\n\t\t\t//this fn requires SurfaceMeshBuilder, loading it here to avoid circular dependency\n\t\t\t//var SurfaceMeshBuilder = require('./mesh/SurfaceMeshBuilder');\n\n\t\t\t//if one argument is passed it can either be a Number for resolution, or an options object\n\t\t\t//if 2 parameters are passed it must be a TriangleMesh and then a Number for resolution\n\t\t\tvar opts = {\n\t\t\t\tmesh: undefined,\n\t\t\t\tresolution: 0\n\t\t\t};\n\t\t\tif(arguments.length === 1){\n\t\t\t\tif(typeof(arguments[0]) == 'object'){ //options object\n\t\t\t\t\topts.mesh = arguments[0].mesh;\n\t\t\t\t\topts.resolution = arguments[0].res || arguments[0].resolution;\n\t\t\t\t} else { //it was just the resolution Number\n\t\t\t\t\topts.resolution = arguments[0];\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\topts.mesh = arguments[0];\n\t\t\t\topts.resolution = arguments[1];\n\t\t\t}\n\n\t\t\tvar builder = new meshCommon.SurfaceMeshBuilder(new SphereFunction(this));\n\t\t\treturn builder.createMesh(opts.mesh, opts.resolution, 1);\n\t\t};\n\t}());\n\n\n\t//toxi.geom.mesh.SphereFunction\n\t(function( Sphere ){\n\t\t//SphereFunction\n\t\tvar mathUtils = require('../math/mathUtils'),\n\t\t\tVec3D = require('./Vec3D'),\n\t\t\tinternals = require('../internals');\n\n\t\t/**\n\t\t * @class This implementation of a {@link SurfaceFunction} samples a given\n\t\t * {@link Sphere} instance when called by the {@link SurfaceMeshBuilder}.\n\t\t * @member toxi\n\t\t */\n\t\tSphereFunction = function(sphere_or_radius) {\n\t\t\tif(sphere_or_radius === undefined){\n\t\t\t\tthis.sphere = new Sphere(new Vec3D(),1);\n\t\t\t}\n\n\t\t\tif(internals.is.Sphere( sphere_or_radius )){\n\t\t\t\tthis.sphere = sphere_or_radius;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tthis.sphere = new Sphere(new Vec3D(),sphere_or_radius);\n\t\t\t}\n\t\t\tthis.phiRange = mathUtils.PI;\n\t\t\tthis.thetaRange = mathUtils.TWO_PI;\n\t\t};\n\n\t\tSphereFunction.prototype = {\n\t\t\tcomputeVertexFor: function(p,phi,theta) {\n\t\t\t\tphi -= mathUtils.HALF_PI;\n\t\t\t\tvar cosPhi = mathUtils.cos(phi);\n\t\t\t\tvar cosTheta = mathUtils.cos(theta);\n\t\t\t\tvar sinPhi = mathUtils.sin(phi);\n\t\t\t\tvar sinTheta = mathUtils.sin(theta);\n\t\t\t\tvar t = mathUtils.sign(cosPhi) * mathUtils.abs(cosPhi);\n\t\t\t\tp.x = t * mathUtils.sign(cosTheta) * mathUtils.abs(cosTheta);\n\t\t\t\tp.y = mathUtils.sign(sinPhi) * mathUtils.abs(sinPhi);\n\t\t\t\tp.z = t * mathUtils.sign(sinTheta) * mathUtils.abs(sinTheta);\n\t\t\t\treturn p.scaleSelf(this.sphere.radius).addSelf(this.sphere);\n\t\t\t},\n\t\t\tgetPhiRange: function() {\n\t\t\t\treturn this.phiRange;\n\t\t\t},\n\t\t\tgetPhiResolutionLimit: function(res) {\n\t\t\t\treturn res;\n\t\t\t},\n\t\t\tgetThetaRange: function() {\n\t\t\t\treturn this.thetaRange;\n\t\t\t},\n\t\t\tgetThetaResolutionLimit: function(res) {\n\t\t\t\treturn res;\n\t\t\t},\n\t\t\tsetMaxPhi: function(max) {\n\t\t\t\tthis.phiRange = mathUtils.min(max / 2, mathUtils.PI);\n\t\t\t},\n\t\t\tsetMaxTheta: function(max) {\n\t\t\t\tthis.thetaRange = mathUtils.min(max, mathUtils.TWO_PI);\n\t\t\t}\n\t\t};\n\t}( Sphere ));\n\n\tSphere.SphereFunction = SphereFunction;\n\tmodule.exports = Sphere;\n\n\n", "var internals = require('../../internals');\nvar Line3D = require('../Line3D');\n\n\tvar WingedEdge, proto;\n\t//@param {WEVertex} va\n\t//@param {WEVertex} vb\n\t//@param {WEFace} face\n\t//@param {Number} id\n\tWingedEdge = function( va, vb, face, id ){\n\t\tLine3D.call(this, va, vb);\n\t\tthis.id = id;\n\t\tthis.faces = [];\n\t\tthis.addFace( face );\n\t};\n\tinternals.extend( WingedEdge, Line3D );\n\tproto = WingedEdge.prototype;\n\t//@param {WEFace} face\n\t//@return {WingedEdge} this\n\tproto.addFace = function( face ){\n\t\tthis.faces.push( face );\n\t\treturn this;\n\t};\n\t//@return {WEFace[]} faces\n\tproto.getFaces = function() {\n\t\treturn this.faces;\n\t};\n\t//@param {WEVertex} wevert\n\t//@return {WingedEdge}\n\tproto.getOtherEndFor = function( wevert ){\n\t\tif( this.a === wevert ){\n\t\t\treturn this.b;\n\t\t}\n\t\tif( this.b === wevert ){\n\t\t\treturn this.a;\n\t\t}\n\t};\n\n\tproto.remove = function(){\n\t\tvar self = this;\n\t\tvar rm = function( edges ){\n\t\t\tedges.splice( edges.indexOf( self ), 1 );\n\t\t};\n\t\tfor( var i=0, l = this.faces.length; i<l; i++){\n\t\t\trm( this.faces[i].edges );\n\t\t}\n\t\trm( this.a.edges );\n\t\trm( this.b.edges );\n\t};\n\n\tproto.toString = function(){\n\t\treturn \"id: \" + this.id + \" \" + Line3D.prototype.toString.call(this) + \" f: \" + this.faces.length;\n\t};\n\n\tmodule.exports = WingedEdge;\n\n", "\n\tvar EdgeLengthComparator = function(){};\n\tEdgeLengthComparator.prototype.compare = function( edge1, edge2 ){\n\t\treturn -parseInt( edge1.getLengthSquared()-edge2.getLengthSquared(), 10);\n\t};\n\tmodule.exports = EdgeLengthComparator;\n", "var EdgeLengthComparator = require('./EdgeLengthComparator');\n\t\n\tvar SubdivisionStrategy, proto;\n\tSubdivisionStrategy = function(){\n\t\tthis._order = SubdivisionStrategy.DEFAULT_ORDERING;\n\t};\n\tSubdivisionStrategy.DEFAULT_ORDERING = new EdgeLengthComparator();\n\tproto = SubdivisionStrategy.prototype;\n\n\tproto.getEdgeOrdering = function(){\n\t\treturn this._order.compare;\n\t};\n\tproto.setEdgeOrdering = function( order ){\n\t\tthis._order = order;\n\t};\n\n\tmodule.exports = SubdivisionStrategy;\n\n", "var internals = require('../../../internals');\nvar SubdivisionStrategy = require('./SubdivisionStrategy');\n\n\tvar MidpointSubdivison = function(){\n\t\tSubdivisionStrategy.call(this);\n\t};\n\tinternals.extend( MidpointSubdivison, SubdivisionStrategy );\n\tMidpointSubdivison.prototype.computeSplitPoints = function( edge ){\n\t\tvar mid = [];\n\t\tmid.push( edge.getMidPoint() );\n\t\treturn mid;\n\t};\n\n\tmodule.exports = MidpointSubdivison;\n", "var internals = require('../internals');\n\n    /**\n    * @class Implementations of 2D interpolation functions (currently only bilinear).\n    * @member toxi\n    * @static\n    */\n    var Interpolation2D = {};\n    /**\n    * @param {Number} x\n    *            x coord of point to filter (or Vec2D p)\n    * @param {Number} y\n    *            y coord of point to filter (or Vec2D p1)\n    * @param {Number} x1\n    *            x coord of top-left corner (or Vec2D p2)\n    * @param {Number} y1\n    *            y coord of top-left corner\n    * @param {Number} x2\n    *            x coord of bottom-right corner\n    * @param {Number} y2\n    *            y coord of bottom-right corner\n    * @param {Number} tl\n    *            top-left value\n    * @param {Number} tr\n    *            top-right value (do not use if first 3 are Vec2D)\n    * @param {Number} bl\n    *            bottom-left value (do not use if first 3 are Vec2D)\n    * @param {Number} br\n    *            bottom-right value (do not use if first 3 are Vec2D)\n    * @return {Number} interpolated value\n    */\n    Interpolation2D.bilinear = function(_x, _y, _x1,_y1, _x2, _y2, _tl, _tr, _bl, _br) {\n        var x,y,x1,y1,x2,y2,tl,tr,bl,br;\n        if( internals.has.XY( _x ) ) //if the first 3 params are passed in as Vec2Ds\n        {\n            x = _x.x;\n            y = _x.y;\n\n            x1 = _y.x;\n            y1 = _y.y;\n\n            x2 = _x1.x;\n            y2 = _x1.y;\n\n            tl = _y1;\n            tr = _x2;\n            bl = _y2;\n            br = _tl;\n        } else {\n            x = _x;\n            y = _y;\n            x1 = _x1;\n            y1 = _y1;\n            x2 = _x2;\n            y2 = _y2;\n            tl = _tl;\n            tr = _tr;\n            bl = _bl;\n            br = _br;\n        }\n        var denom = 1.0 / ((x2 - x1) * (y2 - y1));\n        var dx1 = (x - x1) * denom;\n        var dx2 = (x2 - x) * denom;\n        var dy1 = y - y1;\n        var dy2 = y2 - y;\n        return (tl * dx2 * dy2 + tr * dx1 * dy2 + bl * dx2 * dy1 + br* dx1 * dy1);\n    };\n\n    module.exports = Interpolation2D;\n\n", "\n\n\tvar TriangleMesh, WETriangleMesh, Terrain, SurfaceMeshBuilder;\n\n    var precision = 1000000;\n    var format = function( n ){\n        return Math.floor(n*precision) / precision;\n    };\n\t//private: way of generating object keys for point map in meshes\n\tfunction vertexKeyGenerator( v ){\n\t\t//this will hold the ids consistently between vertex and vec3ds\n\t\treturn \"[ x: \"+format(v.x)+ \", y: \"+format(v.y)+ \", z: \"+format(v.z)+\"]\";\n\t}\n\t//private: used for tracking edges in the internals.LinkedMap\n\tfunction edgeKeyGenerator( edge ){\n        return edge.a.id + '->'+ edge.b.id;\n\t}\n\n\n\t//#TriangleMesh\n\t(function(){\n\t\tvar\tinternals = require('../../internals'),\n\t\t\tmathUtils = require('../../math/mathUtils'),\n\t\t\tMatrix4x4 = require('../Matrix4x4'),\n\t\t\tFace = require('./Face'),\n\t\t\tVec3D = require('../Vec3D'),\n\t\t\tTriangle3D = require('../Triangle3D'),\n            TriangleIntersector = require('../TriangleIntersector'),\n\t\t\tQuaternion = require('../Quaternion'),\n\t\t\tVertex = require('./Vertex');\n\n\t\t/**\n\t\t * @class\n\t\t * @member toxi\n\t\t */\n\t\t//java TriangleMesh constructor is (name, numVertices, numFaces)\n\t\t//numVertices, numFaces is irrelevant with js arrays\n\t\tTriangleMesh = function(name){\n\t\t\tif(name === undefined)name = \"untitled\";\n\t\t\tthis.init( name );\n\t\t\treturn this;\n\t\t};\n\n\t\tTriangleMesh.__vertexKeyGenerator = vertexKeyGenerator;\n\n\n\t\t//statics\n\t\tTriangleMesh.DEFAULT_NUM_VERTICES = 1000;\n\t\tTriangleMesh.DEFAULT_NUM_FACES = 3000;\n\t\tTriangleMesh.DEFAULT_STRIDE = 4;\n\n\t\tTriangleMesh.prototype = {\n            /**\n             * add a Face to the mesh\n             * @param {Vec3D} a\n             * @param {Vec3D} b\n             * @param {Vec3D} c\n             * @param {Vec3D} [n] the normal\n             * @param {Vec2D} [uvA]\n             * @param {Vec2D} [uvB]\n             * @param {Vec2D} [uvC]\n             * @returns itself\n             */\n\t\t\taddFace: function(a,b,c,n,uvA,uvB,uvC){\n\t\t\t\t//can be 3 args, 4 args, 6 args, or 7 args\n\t\t\t\t//if it was 6 swap vars around,\n\t\t\t\tif( arguments.length == 6 ){\n\t\t\t\t\tuvC = uvB;\n\t\t\t\t\tuvB = uvA;\n\t\t\t\t\tuvA = n;\n\t\t\t\t\tn = undefined;\n\t\t\t\t}\n\t\t\t\t//7 param method\n\t\t\t\tvar va = this.__checkVertex(a);\n\t\t\t\tvar vb = this.__checkVertex(b);\n\t\t\t\tvar vc = this.__checkVertex(c);\n\n\t\t\t\tif(va.id === vb.id || va.id === vc.id || vb.id === vc.id){\n\t\t\t\t\t//console.log(\"ignoring invalid face: \"+a + \", \" +b+ \", \"+c);\n\t\t\t\t} else {\n\t\t\t\t\tif(n != null ){\n\t\t\t\t\t\tvar nc = va.sub(vc).crossSelf(va.sub(vb));\n\t\t\t\t\t\tif(n.dot(nc)<0){\n\t\t\t\t\t\t\tvar t = va;\n\t\t\t\t\t\t\tva = vb;\n\t\t\t\t\t\t\tvb = t;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tvar f = new Face(va,vb,vc,uvA,uvB,uvC);\n\t\t\t\t\tthis.faces.push(f);\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t},\n\n            /**\n             * add the contents of a TriangleMesh to this TriangleMesh\n             * @param {TriangleMesh} m\n             * @returns itself\n             */\n\t\t\taddMesh: function(m){\n\t\t\t\tvar l = m.getFaces().length;\n\t\t\t\tfor(var i=0;i<l;i++){\n\t\t\t\t\tvar f = m.getFaces()[i];\n\t\t\t\t\tthis.addFace(f.a,f.b,f.c);\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t},\n\n\t\t\tcenter: function(origin){\n\t\t\t\tthis.computeCentroid();\n\t\t\t\tvar delta = (origin != null) ? origin.sub(this.centroid) : this.centroid.getInverted();\n\t\t\t\tvar l = this.vertices.length;\n\t\t\t\tfor(var i=0;i<l;i++){\n\t\t\t\t\tvar v = this.vertices[i];\n\t\t\t\t\tv.addSelf(delta);\n\t\t\t\t}\n\n\t\t\t\treturn this.getBoundingBox();\n\t\t\t},\n\n\t\t\t__checkVertex: function(v){\n\t\t\t\tvar vertex = this.vertexMap.get(v);\n\t\t\t\tif(!vertex){\n\t\t\t\t\tvertex = this._createVertex(v,this.uniqueVertexID++);\n\t\t\t\t\tthis.vertexMap.put( vertex, vertex );\n\t\t\t\t}\n\t\t\t\treturn vertex;\n\t\t\t},\n\n\t\t\tclear: function(){\n\t\t\t\tthis.vertexMap = new internals.LinkedMap( vertexKeyGenerator );\n\t\t\t\tthis.vertices = this.vertexMap.getArray();\n\t\t\t\tthis.faces = [];\n\t\t\t\tthis.bounds = undefined;\n\t\t\t\treturn this;\n\t\t\t},\n\n\t\t\tcomputeCentroid: function(){\n\t\t\t\tthis.centroid.clear();\n\t\t\t\tvar l = this.vertices.length;\n\t\t\t\tfor(var i=0;i<l;i++){\n\t\t\t\t\tthis.centroid.addSelf(this.vertices[i]);\n\t\t\t\t}\n\t\t\t\treturn this.centroid.scaleSelf(1.0/this.vertexMap.size()).copy();\n\t\t\t},\n\n\t\t\tcomputeFaceNormals: function(){\n\t\t\t\tvar l = this.faces.length;\n\t\t\t\tfor(var i=0;i<l;i++){\n\t\t\t\t\tthis.faces[i].computeNormal();\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tcomputeVertexNormals: function(){\n\t\t\t\tvar l = this.vertices.length,\n\t\t\t\t\ti = 0;\n\t\t\t\tfor(i=0;i<l;i++){\n\t\t\t\t\tthis.vertices[i].clearNormal();\n\t\t\t\t}\n\t\t\t\tl = this.faces.length;\n\t\t\t\tfor(i=0;i<l;i++){\n\t\t\t\t\tvar f = this.faces[i];\n\t\t\t\t\tf.a.addFaceNormal(f.normal);\n\t\t\t\t\tf.b.addFaceNormal(f.normal);\n\t\t\t\t\tf.c.addFaceNormal(f.normal);\n\t\t\t\t}\n\t\t\t\tl = this.vertices.length;\n\t\t\t\tfor(i=0;i<l;i++){\n\t\t\t\t\tthis.vertices[i].computeNormal();\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t},\n\n\t\t\tcopy: function(){\n\t\t\t\tvar m = new TriangleMesh(this.name+\"-copy\",this.vertexMap.size(),this.faces.length);\n\t\t\t\tvar l = this.faces.length;\n\t\t\t\tfor(var i=0;i<l;i++){\n\t\t\t\t\tvar f = this.faces[i];\n\t\t\t\t\tm.addFace(f.a,f.b,f.c,f.normal,f.uvA,f.uvB,f.uvC);\n\t\t\t\t}\n\t\t\t\treturn m;\n\t\t\t},\n\n\t\t\t_createVertex: function(vec3D,id){\n\t\t\t\tvar vertex = new Vertex( vec3D, id );\n\t\t\t\treturn vertex;\n\t\t\t},\n\n\t\t\tfaceOutwards: function(){\n\t\t\t\tthis.computeCentroid();\n\t\t\t\tvar l = this.faces.length;\n\t\t\t\tfor(var i=0;i<l;i++){\n\t\t\t\t\tvar f = this.faces[i];\n\t\t\t\t\tvar n = f.getCentroid().sub(this.centroid);\n\t\t\t\t\tvar dot = n.dot(f.normal);\n\t\t\t\t\tif(dot <0) {\n\t\t\t\t\t\tf.flipVertexOrder();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t},\n\n\t\t\tflipVertexOrder: function(){\n\t\t\t\tvar l = this.faces.length,\n                    tuv;\n\t\t\t\tfor(var i=0;i<l;i++){\n\t\t\t\t\tvar f = this.faces[i];\n\t\t\t\t\tvar t = f.a;\n\t\t\t\t\tf.a = f.b;\n\t\t\t\t\tf.b = t;\n                    if( f.uvA ){\n                        tuv = f.uvA;\n                        f.uvA = f.uvB;\n                        f.uvB = tuv;\n                    }\n\t\t\t\t\tf.normal.invert();\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t},\n\n\t\t\tflipYAxis: function(){\n\t\t\t\tthis.transform(new Matrix4x4().scaleSelf(1,-1,1));\n\t\t\t\tthis.flipVertexOrder();\n\t\t\t\treturn this;\n\t\t\t},\n\n\t\t\tgetBoundingBox: function( ){\n\t\t\t\tvar AABB = require('../AABB');\n\t\t\t\tvar self = this;\n\t\t\t\tvar minBounds = Vec3D.MAX_VALUE.copy();\n\t\t\t\tvar maxBounds = Vec3D.MIN_VALUE.copy();\n\t\t\t\tvar l = self.vertices.length;\n\n\t\t\t\tfor(var i=0;i<l;i++){\n\t\t\t\t\tvar v = self.vertices[i];\n\t\t\t\t\tminBounds.minSelf(v);\n\t\t\t\t\tmaxBounds.maxSelf(v);\n\t\t\t\t}\n\t\t\t\tself.bounds = AABB.fromMinMax(minBounds,maxBounds);\n\t\t\t\treturn self.bounds;\n\t\t\t},\n\n\t\t\tgetBoundingSphere:function(){\n\t\t\t\tvar Sphere = require('../Sphere');\n\t\t\t\tvar radius = 0;\n\t\t\t\tthis.computeCentroid();\n\t\t\t\tvar l = this.vertices.length;\n\t\t\t\tfor(var i=0;i<l;i++){\n\t\t\t\t\tvar v = this.vertices[i];\n\t\t\t\t\tradius = mathUtils.max(radius,v.distanceToSquared(this.centroid));\n\t\t\t\t}\n\t\t\t\tvar sph = new Sphere(this.centroid,Math.sqrt(radius));\n\t\t\t\treturn sph;\n\t\t\t},\n\n\t\t\tgetClosestVertexToPoint: function(p){\n\t\t\t\tvar closest,\n\t\t\t\t\tminDist = Number.MAX_VALUE,\n\t\t\t\t\tl = this.vertices.length;\n\t\t\t\tfor(var i=0;i<l;i++){\n\t\t\t\t\tvar v = this.vertices[i];\n\t\t\t\t\tvar d = v.distanceToSquared(p);\n\t\t\t\t\tif(d<minDist){\n\t\t\t\t\t\tclosest = v;\n\t\t\t\t\t\tminDist = d;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn closest;\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Creates an array of unravelled normal coordinates. For each vertex the\n\t\t\t * normal vector of its parent face is used. This method can be used to\n\t\t\t * translate the internal mesh data structure into a format suitable for\n\t\t\t * OpenGL Vertex Buffer Objects (by choosing stride=4). For more detail,\n\t\t\t * please see {@link #getMeshAsVertexArray(float[], int, int)}\n\t\t\t *\n\t\t\t * @see #getMeshAsVertexArray(float[], int, int)\n\t\t\t *\n\t\t\t * @param normals existing float array or null to automatically create one\n\t\t\t * @param offset start index in array to place normals\n\t\t\t * @param stride stride/alignment setting for individual coordinates (min value = 3)\n\t\t\t * @return array of xyz normal coords\n\t\t\t */\n\t\t\tgetFaceNormalsAsArray: function(normals, offset, stride) {\n\t\t\t\tif(arguments.length === 0){\n\t\t\t\t\tnormals = undefined;\n\t\t\t\t\toffset = 0;\n\t\t\t\t\tstride = TriangleMesh.DEFAULT_STRIDE;\n\t\t\t\t} else if(arguments.length == 1 && typeof(arguments[0]) == 'object'){ //options object\n\t\t\t\t\tvar opts = arguments[0];\n\t\t\t\t\tnormals = opts.normals;\n\t\t\t\t\toffset = opts.offset;\n\t\t\t\t\tstride = opts.stride;\n\t\t\t\t}\n\t\t\t\tstride = mathUtils.max(stride, 3);\n\t\t\t\tif (normals === undefined) {\n\t\t\t\t\tnormals = [];\n\t\t\t\t}\n\t\t\t\tvar i = offset;\n\t\t\t\tvar l = this.faces.length;\n\t\t\t\tfor (var j=0;j<l;j++) {\n\t\t\t\t\tvar f = this.faces[j];\n\t\t\t\t\tnormals[i] = f.normal.x;\n\t\t\t\t\tnormals[i + 1] = f.normal.y;\n\t\t\t\t\tnormals[i + 2] = f.normal.z;\n\t\t\t\t\ti += stride;\n\t\t\t\t\tnormals[i] = f.normal.x;\n\t\t\t\t\tnormals[i + 1] = f.normal.y;\n\t\t\t\t\tnormals[i + 2] = f.normal.z;\n\t\t\t\t\ti += stride;\n\t\t\t\t\tnormals[i] = f.normal.x;\n\t\t\t\t\tnormals[i + 1] = f.normal.y;\n\t\t\t\t\tnormals[i + 2] = f.normal.z;\n\t\t\t\t\ti += stride;\n\t\t\t\t}\n\t\t\t\treturn normals;\n\t\t\t},\n\n\t\t\tgetFaces: function() {\n\t\t\t\treturn this.faces;\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Builds an array of vertex indices of all faces. Each vertex ID\n\t\t\t * corresponds to its position in the vertices Array. The\n\t\t\t * resulting array will be 3 times the face count.\n\t\t\t * please see {@link #getUniqueVerticesAsArray([array])}\n             * and {@link #getUniqueVertexNormalsAsArray([array])}\n\t\t\t *\n\t\t\t * @see #getUniqueVerticesAsArray([array])\n             * @see #getUniqueVertexNormalsAsArray([array])\n\t\t\t *\n             * @param {Array|Unit16Array} [faceList] optionally provide an array or typed-array\n\t\t\t * @return array of vertex indices\n\t\t\t */\n\t\t\tgetFacesAsArray: function(faceList) {\n\t\t\t\tfaceList = faceList || [];\n\t\t\t\tvar i = 0;\n\t\t\t\tvar l = this.faces.length;\n\t\t\t\tfor (var j=0;j<l;j++) {\n\t\t\t\t\tvar f = this.faces[j];\n\t\t\t\t\tfaceList[i++] = f.a.id;\n\t\t\t\t\tfaceList[i++] = f.b.id;\n\t\t\t\t\tfaceList[i++] = f.c.id;\n\t\t\t\t}\n\t\t\t\treturn faceList;\n\t\t\t},\n\n\t\t\tgetIntersectionData: function() {\n\t\t\t\treturn this.intersector.getIntersectionData();\n\t\t\t},\n\n\n\t\t\t/**\n\t\t\t * Creates an array of unravelled vertex coordinates for all faces. This\n\t\t\t * method can be used to translate the internal mesh data structure into a\n\t\t\t * format suitable for OpenGL Vertex Buffer Objects (by choosing stride=4).\n\t\t\t * The order of the array will be as follows:\n\t\t\t *\n\t\t\t * <ul>\n\t\t\t * <li>Face 1:\n\t\t\t * <ul>\n\t\t\t * <li>Vertex #1\n\t\t\t * <ul>\n\t\t\t * <li>x</li>\n\t\t\t * <li>y</li>\n\t\t\t * <li>z</li>\n\t\t\t * <li>[optional empty indices to match stride setting]</li>\n\t\t\t * </ul>\n\t\t\t * </li>\n\t\t\t * <li>Vertex #2\n\t\t\t * <ul>\n\t\t\t * <li>x</li>\n\t\t\t * <li>y</li>\n\t\t\t * <li>z</li>\n\t\t\t * <li>[optional empty indices to match stride setting]</li>\n\t\t\t * </ul>\n\t\t\t * </li>\n\t\t\t * <li>Vertex #3\n\t\t\t * <ul>\n\t\t\t * <li>x</li>\n\t\t\t * <li>y</li>\n\t\t\t * <li>z</li>\n\t\t\t * <li>[optional empty indices to match stride setting]</li>\n\t\t\t * </ul>\n\t\t\t * </li>\n\t\t\t * </ul>\n\t\t\t * <li>Face 2:\n\t\t\t * <ul>\n\t\t\t * <li>Vertex #1</li>\n\t\t\t * <li>...etc.</li>\n\t\t\t * </ul>\n\t\t\t * </ul>\n\t\t\t *\n\t\t\t * @param verts  an existing target array or null to automatically create one\n\t\t\t * @param offset start index in arrtay to place vertices\n\t\t\t * @param stride stride/alignment setting for individual coordinates\n\t\t\t * @return array of xyz vertex coords\n\t\t\t */\n\t\t\tgetMeshAsVertexArray: function(verts, offset, stride) {\n\t\t\t\tif(verts ===undefined){\n\t\t\t\t\tverts = undefined;\n\t\t\t\t}\n\t\t\t\tif(offset === undefined){\n\t\t\t\t\toffset = 0;\n\t\t\t\t}\n\t\t\t\tif(stride === undefined){\n\t\t\t\t\tstride = TriangleMesh.DEFAULT_STRIDE;\n\t\t\t\t}\n\t\t\t\tstride = mathUtils.max(stride, 3);\n\t\t\t\tif (verts === undefined) {\n\t\t\t\t\tverts = [];\n\t\t\t\t}\n\t\t\t\tvar i = 0,//offset\n\t\t\t\t\tl = this.faces.length;\n\t\t\t\tfor (var j=0;j<l;++j) {\n\t\t\t\t\tvar f = this.faces[j];\n\t\t\t\t\tverts[i] = f.a.x;\n\t\t\t\t\tverts[i + 1] = f.a.y;\n\t\t\t\t\tverts[i + 2] = f.a.z;\n\t\t\t\t\ti += stride;\n\t\t\t\t\tverts[i] = f.b.x;\n\t\t\t\t\tverts[i + 1] = f.b.y;\n\t\t\t\t\tverts[i + 2] = f.b.z;\n\t\t\t\t\ti += stride;\n\t\t\t\t\tverts[i] = f.c.x;\n\t\t\t\t\tverts[i + 1] = f.c.y;\n\t\t\t\t\tverts[i + 2] = f.c.z;\n\t\t\t\t\ti += stride;\n\t\t\t\t}\n\t\t\t\treturn verts;\n\t\t\t},\n\n\t\t\tgetNumFaces: function() {\n\t\t\t\treturn this.faces.length;\n\t\t\t},\n\n\t\t\tgetNumVertices: function() {\n\t\t\t\treturn this.vertexMap.size();\n\t\t\t},\n\n\t\t\tgetRotatedAroundAxis: function(axis,theta) {\n\t\t\t\treturn this.copy().rotateAroundAxis(axis, theta);\n\t\t\t},\n\n\t\t\tgetRotatedX: function(theta) {\n\t\t\t\treturn this.copy().rotateX(theta);\n\t\t\t},\n\n\t\t\tgetRotatedY: function(theta) {\n\t\t\t\treturn this.copy().rotateY(theta);\n\t\t\t},\n\n\t\t\tgetRotatedZ: function(theta) {\n\t\t\t\treturn this.copy().rotateZ(theta);\n\t\t\t},\n\n\t\t\tgetScaled: function(scale) {\n\t\t\t\treturn this.copy().scale(scale);\n\t\t\t},\n\n\t\t\tgetTranslated: function(trans) {\n\t\t\t\treturn this.copy().translate(trans);\n\t\t\t},\n\n            /**\n             * flatten each vertex once into an array, useful for OpenGL attributes\n             * @param {Array|Float32Array} [array] optionally pass in an array or typed-array to reuse\n             * @return {Array|Float32Array}\n             */\n\t\t\tgetUniqueVerticesAsArray: function(array) {\n\t\t\t\tarray = array || [];\n\t\t\t\tvar i = 0;\n\t\t\t\tvar l = this.vertices.length;\n\t\t\t\tfor (var j=0;j<l;j++) {\n\t\t\t\t\tvar v = this.vertices[j];\n\t\t\t\t\tarray[i++] = v.x;\n\t\t\t\t\tarray[i++] = v.y;\n\t\t\t\t\tarray[i++] = v.z;\n\t\t\t\t}\n\t\t\t\treturn array;\n\t\t\t},\n\n            /**\n             * flatten each vertex normal once into an array, useful for OpenGL attributes\n             * @param {Array|Float32Array} [array] optionally pass in an array or typed-array to reuse\n             * @return {Array|Float32Array}\n             */\n            getUniqueVertexNormalsAsArray: function(array){\n                array = array || [];\n                var n = 0;\n                for(i=0; i<this.vertices.length; i++){\n                    var v = this.vertices[i];\n                    array[n++] = v.normal.x;\n                    array[n++] = v.normal.y;\n                    array[n++] = v.normal.z;\n                }\n\n                return array;\n            },\n\n            /**\n             * get the UVs of all faces in flattened array that is, usefl for OpenGL attributes\n             * any missing UV coordinates are returned as 0\n             * @param {Array|Float32Array} [array] optionally pass in an array or typed-array to reuse\n             * @return {Array|Float32Array}\n             */\n            getUVsAsArray: function(array){\n                array = array || [];\n                var i = 0;\n                for(f=0; f<this.faces.length; f++){\n                    var face = this.faces[f];\n                    array[i++] = face.uvA ? face.uvA.x : 0;\n                    array[i++] = face.uvA ? face.uvA.y : 0;\n                    array[i++] = face.uvB ? face.uvB.x : 0;\n                    array[i++] = face.uvB ? face.uvB.y : 0;\n                    array[i++] = face.uvC ? face.uvC.x : 0;\n                    array[i++] = face.uvC ? face.uvC.y : 0;\n                }\n\n                return array;\n            },\n\n\t\t\tgetVertexAtPoint: function(v) {\n\t\t\t\tvar index;\n\t\t\t\tfor(var i=0;i<this.vertices.length;i++){\n\t\t\t\t\tif(this.vertices[i].equals(v)){\n\t\t\t\t\t\tindex = i;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn this.vertices[index];\n\t\t\t},\n\t\t\t//my own method to help\n\t\t\tgetVertexIndex: function(vec) {\n\t\t\t\tvar matchedVertex = -1;\n\t\t\t\tvar l = this.vertices.length;\n\t\t\t\tfor(var i=0;i<l;i++)\n\t\t\t\t{\n\t\t\t\t\tvar vert = this.vertices[i];\n\t\t\t\t\tif(vert.equals(vec))\n\t\t\t\t\t{\n\t\t\t\t\t\tmatchedVertex =i;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn matchedVertex;\n\n\t\t\t},\n\n\t\t\tgetVertexForID: function(id) {\n\t\t\t\tvar vertex,\n\t\t\t\t\tl = this.vertices.length;\n\t\t\t\tfor (var i=0;i<l;i++) {\n\t\t\t\t\tvar v = this.vertices[i];\n\t\t\t\t\tif (v.id == id) {\n\t\t\t\t\t\tvertex = v;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn vertex;\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Creates an array of unravelled vertex normal coordinates for all faces.\n\t\t\t * This method can be used to translate the internal mesh data structure\n\t\t\t * into a format suitable for OpenGL Vertex Buffer Objects (by choosing\n\t\t\t * stride=4). For more detail, please see\n\t\t\t * {@link #getMeshAsVertexArray(float[], int, int)}\n\t\t\t *\n\t\t\t * @see #getMeshAsVertexArray(float[], int, int)\n\t\t\t *\n\t\t\t * @param normals existing float array or null to automatically create one\n\t\t\t * @param offset start index in array to place normals\n\t\t\t * @param stride stride/alignment setting for individual coordinates (min value\n\t\t\t *            = 3)\n\t\t\t * @return array of xyz normal coords\n\t\t\t */\n\t\t\tgetVertexNormalsAsArray: function(normals, offset,stride) {\n\t\t\t\tif(offset === undefined)offset = 0;\n\t\t\t\tif(stride === undefined)stride = TriangleMesh.DEFAULT_STRIDE;\n\t\t\t\tstride = mathUtils.max(stride, 3);\n\t\t\t\tif (normals === undefined) {\n\t\t\t\t\tnormals = [];\n\t\t\t\t}\n\t\t\t\tvar i = offset;\n\t\t\t\tvar l = this.faces.length;\n\t\t\t\tfor (var j=0;j<l;j++) {\n\t\t\t\t\tvar f = this.faces[j];\n\t\t\t\t\tnormals[i] = f.a.normal.x;\n\t\t\t\t\tnormals[i + 1] = f.a.normal.y;\n\t\t\t\t\tnormals[i + 2] = f.a.normal.z;\n\t\t\t\t\ti += stride;\n\t\t\t\t\tnormals[i] = f.b.normal.x;\n\t\t\t\t\tnormals[i + 1] = f.b.normal.y;\n\t\t\t\t\tnormals[i + 2] = f.b.normal.z;\n\t\t\t\t\ti += stride;\n\t\t\t\t\tnormals[i] = f.c.normal.x;\n\t\t\t\t\tnormals[i + 1] = f.c.normal.y;\n\t\t\t\t\tnormals[i + 2] = f.c.normal.z;\n\t\t\t\t\ti += stride;\n\t\t\t\t}\n\t\t\t\treturn normals;\n\t\t\t},\n\n\t\t\tgetVertices: function() {\n\t\t\t\treturn this.vertices;\n\t\t\t},\n\n\t\t\thandleSaveAsSTL: function(stl,useFlippedY) {\n\t\t\t\t/*f (useFlippedY) {\n\t\t\t\t\tstl.setScale(new Vec3D(1, -1, 1));\n\t\t\t\t\tfor (Face f : faces) {\n\t\t\t\t\t\tstl.face(f.a, f.b, f.c, f.normal, STLWriter.DEFAULT_RGB);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tfor (Face f : faces) {\n\t\t\t\t\t\tstl.face(f.b, f.a, f.c, f.normal, STLWriter.DEFAULT_RGB);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tstl.endSave();\n\t\t\t\tconsole.log(numFaces + \" faces written\");\n\t\t\t\t*/\n\t\t\t\tthrow new Error(\"TriangleMesh.handleSaveAsSTL() currently not implemented\");\n\n\t\t\t},\n\n\t\t\tinit: function( name ){\n\t\t\t\tthis.setName(name);\n\t\t\t\tthis.matrix = new Matrix4x4();\n\t\t\t\tthis.centroid = new Vec3D();\n\t\t\t\tthis.vertexMap = new internals.LinkedMap( vertexKeyGenerator );\n\t\t\t\t//used for checking if theres an existing Vertex\n\t\t\t\tthis.vertices = this.vertexMap.getArray();\n\t\t\t\tthis.faces = [];\n\t\t\t\tthis.uniqueVertexID = 0;\n                this.intersector = new TriangleIntersector();\n\t\t\t},\n\n\t\t\tintersectsRay: function(ray) {\n\t\t\t\tvar tri = this.intersector.getTriangle();\n\t\t\t\tvar l = this.faces.length;\n\t\t\t\tvar f;\n\t\t\t\tfor (var i =0;i<l;i++) {\n\t\t\t\t\tf = this.faces[i];\n\t\t\t\t\ttri.a = f.a;\n\t\t\t\t\ttri.b = f.b;\n\t\t\t\t\ttri.c = f.c;\n\t\t\t\t\tif (this.intersector.intersectsRay(ray)) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn false;\n\t\t\t},\n\n\t\t\tperforateFace: function(f, size) {\n\t\t\t\tvar centroid = f.getCentroid();\n\t\t\t\tvar d = 1 - size;\n\t\t\t\tvar a2 = f.a.interpolateTo(centroid, d);\n\t\t\t\tvar b2 = f.b.interpolateTo(centroid, d);\n\t\t\t\tvar c2 = f.c.interpolateTo(centroid, d);\n\t\t\t\tthis.removeFace(f);\n\t\t\t\tthis.addFace(f.a, b2, a2);\n\t\t\t\tthis.addFace(f.a, f.b, b2);\n\t\t\t\tthis.addFace(f.b, c2, b2);\n\t\t\t\tthis.addFace(f.b, f.c, c2);\n\t\t\t\tthis.addFace(f.c, a2, c2);\n\t\t\t\tthis.addFace(f.c, f.a, a2);\n\t\t\t\treturn new Triangle3D(a2, b2, c2);\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Rotates the mesh in such a way so that its \"forward\" axis is aligned with\n\t\t\t * the given direction. This version uses the positive Z-axis as default\n\t\t\t * forward direction.\n\t\t\t *\n\t\t\t * @param dir, new target direction to point in\n\t\t\t * @param [forward], optional vector, defaults to Vec3D.Z_AXIS\n\t\t\t * @return itself\n\t\t\t */\n\t\t\tpointTowards: function(dir, forward) {\n\t\t\t\tforward = forward || Vec3D.Z_AXIS;\n\t\t\t\treturn this.transform( Quaternion.getAlignmentQuat(dir, forward).toMatrix4x4(this.matrix), true);\n\t\t\t},\n\n\t\t\tremoveFace: function(f) {\n\t\t\t\tvar index = -1;\n\t\t\t\tvar l = this.faces.length;\n\t\t\t\tfor(var i=0;i<l;i++){\n\t\t\t\t\tif(this.faces[i] == f){\n\t\t\t\t\t\tindex = i;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(index > -1){\n\t\t\t\t\tthis.faces.splice(index,1);\n\t\t\t\t}\n\t\t\t},\n\n\n\t\t\trotateAroundAxis: function(axis, theta) {\n\t\t\t\treturn this.transform(this.matrix.identity().rotateAroundAxis(axis, theta));\n\t\t\t},\n\n\t\t\trotateX: function(theta) {\n\t\t\t\treturn this.transform(this.matrix.identity().rotateX(theta));\n\t\t\t},\n\n\t\t\trotateY: function(theta) {\n\t\t\t\treturn this.transform(this.matrix.identity().rotateY(theta));\n\t\t\t},\n\n\t\t\trotateZ: function(theta) {\n\t\t\t\treturn this.transform(this.matrix.identity().rotateZ(theta));\n\t\t\t},\n\n\t\t\tsaveAsOBJ: function(obj, saveNormals) {\n\t\t\t\tif( saveNormals === undefined){\n\t\t\t\t\tsaveNormals = true;\n\t\t\t\t}\n\t\t\t\tvar vOffset = obj.getCurrVertexOffset() + 1,\n\t\t\t\t\tnOffset = obj.getCurrNormalOffset() + 1;\n\t\t\t\tobj.newObject( this.name );\n\t\t\t\t//vertices\n\t\t\t\tvar v = 0, f = 0,\n\t\t\t\t\tvlen = this.vertices.length,\n\t\t\t\t\tflen = this.faces.length,\n\t\t\t\t\tface;\n\t\t\t\tfor( v=0; v<vlen; v++ ){\n\t\t\t\t\tobj.vertex( this.vertices[v] );\n\t\t\t\t}\n\t\t\t\t//faces\n\t\t\t\tif( saveNormals ){\n\t\t\t\t\t//normals\n\t\t\t\t\tfor( v=0; v<vlen; v++){\n\t\t\t\t\t\tobj.normal( this.vertices[v].normal );\n\t\t\t\t\t}\n\t\t\t\t\tfor( f=0; f<flen; f++){\n\t\t\t\t\t\tface = this.faces[f];\n\t\t\t\t\t\tobj.faceWithNormals(face.b.id + vOffset, face.a.id + vOffset, face.c.id + vOffset, face.b.id + nOffset, face.a.id + nOffset, face.c.id + nOffset);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tfor( f=0; f<flen; f++){\n\t\t\t\t\t\tface = this.faces[f];\n\t\t\t\t\t\tobj.face(face.b.id + vOffset, face.a.id + vOffset, face.c.id + vOffset);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tsaveAsSTL: function(a,b,c){\n\t\t\t\tthrow new Error(\"TriangleMesh.saveAsSTL() currently not implemented\");\n\t\t\t},\n\n\t\t\tscale: function(scale) {\n\t\t\t\treturn this.transform(this.matrix.identity().scaleSelf(scale));\n\t\t\t},\n\n\t\t\tsetName: function(name) {\n\t\t\t\tthis.name = name;\n\t\t\t\treturn this;\n\t\t\t},\n\n\t\t\ttoString: function() {\n\t\t\t\treturn \"TriangleMesh: \" + this.name + \" vertices: \" + this.getNumVertices() + \" faces: \" + this.getNumFaces();\n\t\t\t},\n\n\t\t\ttoWEMesh: function() {\n\t\t\t\treturn new WETriangleMesh(this.name).addMesh(this);\n\t\t\t},\n\n\t\t\t/**\n\t\t\t* Applies the given matrix transform to all mesh vertices. If the\n\t\t\t* updateNormals flag is true, all face normals are updated automatically,\n\t\t\t* however vertex normals need a manual update.\n\t\t\t* @param mat\n\t\t\t* @param updateNormals\n\t\t\t* @return itself\n\t\t\t*/\n\t\t\ttransform: function(mat,updateNormals) {\n\t\t\t\tif(updateNormals === undefined){\n\t\t\t\t\tupdateNormals = true;\n\t\t\t\t}\n\t\t\t\tvar l = this.vertices.length;\n\t\t\t\tfor(var i=0;i<l;i++){\n\t\t\t\t\tvar v = this.vertices[i];\n\t\t\t\t\tv.set(mat.applyTo(v));\n\t\t\t\t}\n\t\t\t\tif(updateNormals){\n\t\t\t\t\tthis.computeFaceNormals();\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t},\n\n\t\t\ttranslate: function(x,y,z){\n\t\t\t\tif(arguments.length == 1){\n\t\t\t\t\ty = x.y;\n\t\t\t\t\tz = x.z;\n\t\t\t\t\tx = x.x;\n\t\t\t\t}\n\t\t\t\treturn this.transform(this.matrix.identity().translateSelf(x,y,z));\n\t\t\t},\n\n\t\t\tupdateVertex: function(origVec3D,newPos) {\n\t\t\t\tvar vertex = this.vertexMap.get( origVec3D );\n\t\t\t\tif (vertex !== undefined ) {\n\t\t\t\t\tthis.vertexMap.remove( vertex );\n\t\t\t\t\tvertex.set( newPos );\n\t\t\t\t\tthis.vertexMap.put( newPos, vertex );\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t}\n\t\t};\n\t}());\n\n\t//define WETriangleMesh\n\t(function( TriangleMesh ){\n\t\t//dependenecies\n\t\tvar internals = require('../../internals');\n\t\tvar Line3D = require('../Line3D');\n\t\tvar Vec3D = require('../Vec3D');\n\t\tvar WEVertex = require('./Vertex').WEVertex;\n\t\tvar WEFace = require('./Face').WEFace;\n\t\tvar WingedEdge = require('./WingedEdge');\n\t\tvar MidpointSubdivision = require('./subdiv/MidpointSubdivision');\n\n\t\t//locals\n\t\tvar proto;\n\t\t//constructor\n\t\tWETriangleMesh = function( name ){\n\t\t\tname = name || \"untitled\";\n\t\t\tTriangleMesh.call(this, name);\n\t\t};\n\t\t//passing these on to match java api\n\t\tWETriangleMesh.DEFAULT_NUM_FACES = TriangleMesh.DEFAULT_NUM_FACES;\n\t\tWETriangleMesh.DEFAULT_NUM_VERTICES = TriangleMesh.DEFAULT_NUM_VERTICES;\n\n\t\tinternals.extend( WETriangleMesh, TriangleMesh );\n\t\tproto = WETriangleMesh.prototype;\n\n\t\tproto.addFace = function( a, b, c, norm, uvA, uvB, uvC ){\n\t\t\tif( arguments.length === 6 ){\n\t\t\t\t//6-arg a,b,c,uvA,uvB,uvC pass everything up one\n\t\t\t\tuvC = uvB;\n\t\t\t\tuvB = uvA;\n\t\t\t\tuvA = norm;\n\t\t\t\tnorm = undefined;\n\t\t\t}\n\n\t\t\tvar va = this.__checkVertex(a),\n\t\t\t\tvb = this.__checkVertex(b),\n\t\t\t\tvc = this.__checkVertex(c),\n\t\t\t\tnc, t, f;\n\n\t\t\tif( va.id === vb.id || va.id === vc.id || vb.id === vc.id ){\n\t\t\t\tconsole.log('Ignoring invalid face: ' + a + ',' + b + ',' + c);\n\t\t\t} else {\n\t\t\t\tif( norm !== undefined && norm !== null ){\n\t\t\t\t\tnc = va.sub(vc).crossSelf(va.sub(vb));\n\t\t\t\t\tif( norm.dot(nc) < 0 ){\n\t\t\t\t\t\tt = va;\n\t\t\t\t\t\tva = vb;\n\t\t\t\t\t\tvb = t;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tf = new WEFace(va, vb, vc, uvA, uvB, uvC);\n\t\t\t\tthis.faces.push(f);\n\t\t\t\tthis.updateEdge( va,vb,f );\n\t\t\t\tthis.updateEdge( vb,vc,f );\n\t\t\t\tthis.updateEdge( vc,va,f );\n\t\t\t}\n\t\t\treturn this;\n\t\t};\n\n\t\tproto.center = function( origin, callback ){\n\t\t\tTriangleMesh.prototype.center.call(this, origin, callback);\n\t\t\tthis.rebuildIndex();\n\t\t};\n\n\t\tproto.clear = function(){\n\t\t\tTriangleMesh.prototype.clear.call(this);\n\t\t\tthis.edgeMap = new internals.LinkedMap( edgeKeyGenerator );\n\t\t\tthis.edges = this.edgeMap.getArray();\n\t\t\treturn this;\n\t\t};\n\n\t\tproto.copy = function(){\n\t\t\tvar m = new WETriangleMesh( this.name+\"-copy\" );\n\t\t\tvar i, l, f;\n\t\t\tl = this.faces.length;\n\t\t\tfor(i=0; i<l; i++){\n\t\t\t\tf = this.faces[i];\n\t\t\t\tm.addFace( f.a, f.b, f.c, f.normal, f.uvA, f.uvB, f.uvC );\n\t\t\t}\n\t\t\treturn m;\n\t\t};\n\n\t\tproto._createVertex = function( vec3D, id ){\n\t\t\tvar vertex = new WEVertex( vec3D, id );\n\t\t\treturn vertex;\n\t\t};\n\t\t//TODO: numEdges currently not hooked up\n\t\tproto.getNumEdges = function(){\n\t\t\treturn this.edgeMap.size();\n\t\t};\n\n\t\tproto.init = function( name ){\n\t\t\tTriangleMesh.prototype.init.call(this, name);\n\t\t\t//this.edgeMap.put(va.toString()+vb.toString(), {WingedEdge} );\n\t\t\tthis.edgeMap = new internals.LinkedMap( edgeKeyGenerator );\n\t\t\tthis.edges = this.edgeMap.getArray();\n\t\t\tthis.__edgeCheck = new Line3D( new Vec3D(), new Vec3D() );\n\t\t\tthis.__uniqueEdgeID = 0;\n\t\t};\n\n\t\tproto.rebuildIndex = function(){\n\t\t\t//if vertices have moved / transformed a new vertexMap and edgeMap must be made\n\t\t\t//in order to have updated string keys of new positions\n\t\t\t//newVertexDictionary[{String}] = {Vertex}\n\t\t\tvar newVertexMap = new internals.LinkedMap( vertexKeyGenerator );\n\t\t\tvar newEdgeMap = new internals.LinkedMap( edgeKeyGenerator );\n\n            var i = 0,\n                arr = this.vertexMap.getArray();\n            for(i=0; i<arr.length; i++){\n\t\t\t\tnewVertexMap.put( arr[i], arr[i] );\n\t\t\t}\n\n            arr = this.edgeMap.getArray();\n            for(i=0; i<arr.length; i++){\n\t\t\t\tnewEdgeMap.put( arr[i], arr[i] );\n\t\t\t}\n\n\t\t\tthis.vertexMap = newVertexMap;\n\t\t\tthis.vertices = newVertexMap.getArray();\n\t\t\tthis.edgeMap = newEdgeMap;\n\t\t\tthis.edges = newEdgeMap.getArray();\n\t\t};\n\n\t\tproto.removeEdge = function( edge ){\n\t\t\tedge.remove();\n\t\t\tvar v = edge.a;\n\t\t\tif( v.edges.length === 0 ){\n\t\t\t\tthis.vertexMap.remove( v );\n\t\t\t}\n\t\t\tv = edge.b;\n\t\t\tif( v.edges.length === 0 ){\n\t\t\t\tthis.vertexMap.remove( v );\n\t\t\t}\n            for(var i=0; i<edge.faces.length; i++){\n                this.removeFace(edge.faces[i]);\n            }\n\t\t\tvar removed = this.edgeMap.remove( this.__edgeCheck.set( edge.a, edge.b ) );\n            if(!removed){\n                this.edgeMap.remove( this.__edgeCheck.set(edge.b, edge.a) );\n            }\n\t\t\tif( removed !== edge ){\n\t\t\t\tthrow new Error(\"Can't remove edge\");\n\t\t\t}\n\t\t};\n\n\t\tproto.removeFace = function( face ){\n\t\t\tvar i = this.faces.indexOf( face );\n\t\t\tif( i > -1 ){\n\t\t\t\tthis.faces.splice( i, 1 );\n\t\t\t}\n\n            i = 0;\n            var edge;\n\n            for(i=0; i<face.edges.length; i++){\n                edge = face.edges[i];\n                edge.faces.splice(edge.faces.indexOf(face), 1);\n                if(edge.faces.length === 0){\n                    this.removeEdge(edge);\n                }\n            }\n\t\t};\n\n\t\t//FIXME (FIXME in original java source)\n\t\t//TODO UNIT TEST .splice\n\t\tproto.removeUnusedVertices = function(){\n\t\t\tinternals.each( this.vertices, function( vertex, i ){\n\t\t\t\tvar isUsed = false;\n\t\t\t\tinternals.each( this.faces, function( f ){\n\t\t\t\t\tif( f.a == vertex || f.b == vertex || f.c == vertex ){\n\t\t\t\t\t\tisUsed = true;\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tif( !isUsed ){\n\t\t\t\t\tthis.vertices.splice( i, 1 );\n\t\t\t\t}\n\t\t\t});\n\t\t};\n\n\t\t/**\n\t\t* @param {Vertex[] | Vertex{}} selection, array or object of Vertex's to remove\n\t\t*/\n\t\tproto.removeVertices = function( selection ){\n\t\t\tinternals.each( selection, function( vertex ){\n\t\t\t\t//WingedEdgeVertex\n\t\t\t\tinternals.each( vertex.edges, function( edge ){\n\t\t\t\t\tinternals.each( edge.faces, function( face ){\n\t\t\t\t\t\tthis.removeFace( face );\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\t\t};\n\n\t\t//@param {Vec3D | WingedEdge} a or edge\n\t\t//@param {Vec3D | SubdivisionStrategy} b or strategy if edge supplied\n\t\t//@param {SubdivisionStrategy} [subDiv] or undefined\n\t\tproto.splitEdge = function( a, b, subDiv ){\n\t\t\tvar edge, mid;\n\t\t\tif( arguments.length === 3 ){\n\t\t\t\tedge = this.edgeMap.get( this.__edgeCheck.set(a, b) );\n\n                if(!edge){\n                    this.edgeMap.get( this.__edgeCheck.set(b,a) );\n                }\n\n\t\t\t} else if( arguments.length == 2 ){\n\t\t\t\tedge = a;\n\t\t\t\tsubDiv = b;\n\t\t\t}\n\t\t\tmid = subDiv.computeSplitPoints( edge );\n\t\t\tthis.splitFace( edge.faces[0], edge, mid);\n\t\t\tif( edge.faces.length > 1 ){\n\t\t\t\tthis.splitFace( edge.faces[1], edge, mid);\n\t\t\t}\n\t\t\tthis.removeEdge( edge );\n\t\t};\n\t\t//@param {WEFace} face,\n\t\t//@param {WingedEdge} edge,\n\t\t//@param {Vec3D[]} midPoints\n\t\tproto.splitFace = function( face, edge, midPoints ){\n\t\t\tvar p, i, ec, prev, num, mid;\n\t\t\tfor(i=0; i<3; i++){\n\t\t\t\tec = face.edges[i];\n\t\t\t\tif( !ec.equals(edge) ){\n\t\t\t\t\tif( ec.a.equals(edge.a) || ec.a.equals(edge.b) ){\n\t\t\t\t\t\tp = ec.b;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tp = ec.a;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tnum = midPoints.length;\n\t\t\tfor(i=0; i<num; i++){\n\t\t\t\tmid = midPoints[i];\n\t\t\t\tif( i === 0 ){\n\t\t\t\t\tthis.addFace( p, edge.a, mid, face.normal );\n\t\t\t\t} else {\n\t\t\t\t\tthis.addFace( p, prev, mid, face.normal );\n\t\t\t\t}\n\t\t\t\tif( i === num-1 ){\n\t\t\t\t\tthis.addFace( p, mid, edge.b, face.normal );\n\t\t\t\t}\n\t\t\t\tprev = mid;\n\t\t\t}\n\t\t};\n\n\t\t//@param {SubdivisionStrategy | Number} subDiv or minLength\n\t\t//@param {Number} [minLength] if also supplying subDiv\n\t\tproto.subdivide = function( subDiv, minLength ){\n\t\t\tif( arguments.length === 1 ){\n\t\t\t\tminLength = subDiv;\n\t\t\t\tsubDiv = new MidpointSubdivision();\n\t\t\t}\n\t\t\tthis.subdivideEdges( this.edges.slice(0), subDiv, minLength);\n\t\t};\n\n\t\tproto.subdivideEdges = function( origEdges, subDiv, minLength ){\n\t\t\torigEdges.sort( subDiv.getEdgeOrdering() );\n\t\t\tminLength *= minLength;\n\t\t\tvar i=0, l = origEdges.length;\n\t\t\tfor(i=0; i<l; i++){\n\t\t\t\tvar e = origEdges[i];\n\t\t\t\tif( this.edges.indexOf( e ) > -1 ) {\n\t\t\t\t\tif( e.getLengthSquared() >= minLength ) {\n\t\t\t\t\t\tthis.splitEdge( e, subDiv );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tproto.subdivideFaceEdges = function( faces, subDiv, minLength ){\n\t\t\tvar fedges = [], i,j, f, e, fl, el;\n\t\t\tfl = this.faces.length;\n\t\t\tfor(i=0; i<fl; i++){\n\t\t\t\tf = this.faces[i];\n\t\t\t\tel = f.edges.length;\n\t\t\t\tfor(j=0; j<el; j++){\n\t\t\t\t\te = f.edges[j];\n\t\t\t\t\tif( fedges.indexOf(e) < 0 ){\n\t\t\t\t\t\tfedges.push( e );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.subdividEdges( fedges, subDiv, minLength );\n\t\t};\n\n\t\tproto.toString = function(){\n\t\t\treturn \"WETriangleMesh: \" + this.name + \" vertices: \" + this.getNumVertices() + \" faces: \" + this.getNumFaces() + \" edges:\" + this.getNumEdges();\n\t\t};\n\n\t\t/**\n\t\t* Applies the given matrix transform to all mesh vertices. If the\n\t\t* updateNormals flag is true, all face normals are updated automatically,\n\t\t* however vertex normals still need a manual update.\n\t\t* @param {toxi.geom.Matrix4x4} matrix\n\t\t* @param {Boolean} [updateNormals]\n\t\t*/\n\t\tproto.transform = function( matrix, updateNormals ){\n\t\t\tif( updateNormals === undefined || updateNormals === null ){\n\t\t\t\tupdateNormals = true;\n\t\t\t}\n\t\t\tfor(var i=0, l = this.vertices.length; i<l; i++){\n\t\t\t\tmatrix.applyToSelf( this.vertices[i] );\n\t\t\t}\n\t\t\tthis.rebuildIndex();\n\t\t\tif( updateNormals ){\n\t\t\t\tthis.computeFaceNormals();\n\t\t\t}\n\t\t\treturn this;\n\t\t};\n\n\t\tproto.updateEdge = function( va, vb, face ){\n\t\t\t//dictionary key is va.toString() + vb.toString()\n\t\t\t//because Line3D toString would be different than WingedEdge toString()\n\t\t\tthis.__edgeCheck.set( va, vb );\n\t\t\tvar e = this.edgeMap.get( this.__edgeCheck );\n            if(!e){\n                //edge could be as b->a or a->b\n                this.__edgeCheck.set(vb, va);\n                e = this.edgeMap.get(this.__edgeCheck);\n            }\n\t\t\tif( e !== undefined ){\n\t\t\t\te.addFace( face );\n\t\t\t} else {\n\t\t\t\te = new WingedEdge( va, vb, face, this.__uniqueEdgeID++ );\n\t\t\t\tthis.edgeMap.put( e, e );\n\t\t\t\tva.addEdge( e );\n\t\t\t\tvb.addEdge( e );\n\t\t\t}\n\t\t\tface.addEdge( e );\n\t\t};\n\t}( TriangleMesh ));\n\n\n\t//Terrain\n\t(function( TriangleMesh ){\n\t\tvar internals = require('../../internals'),\n\t\t\tmathUtils = require('../../math/mathUtils'),\n\t\t\tInterpolation2D = require('../../math/Interpolation2D'),\n\t\t\tRay3D = require('../Ray3D'),\n\t\t\tTriangleIntersector = require('../TriangleIntersector'),\n\t\t\tTriangle3D = require('../Triangle3D'),\n\t\t\tIsectData3D = require('../IsectData3D'),\n\t\t\tVec2D = require('../vectors').Vec2D,\n\t\t\tVec3D = require('../vectors').Vec3D;\n\t\t/**\n\t\t* Constructs a new and initially flat terrain of the given size in the XZ\n\t\t* plane, centred around the world origin.\n\t\t*\n\t\t* @param {Number} width\n\t\t* @param {Number} depth\n\t\t* @param {toxi.geom.Vec2D | Number} scale\n\t\t*/\n\t\tTerrain = function(width, depth, scale){\n\t\t\tthis.width = width;\n\t\t\tthis._depth = depth;\n\t\t\tif( !internals.has.XY(scale) ){\n\t\t\t\tscale = new Vec2D(scale,scale);\n\t\t\t}\n\t\t\tthis.setScale( scale );\n\t\t\tthis.elevation = [];\n\t\t\tvar i = 0,\n\t\t\t\tlen = width * depth;\n\t\t\tfor(i=0; i<len; i++){\n\t\t\t\tthis.elevation[i] = 0;\n\t\t\t}\n\n\t\t\tthis.__elevationLength = this.width * this._depth;\n\t\t\tthis.vertices = [];\n\t\t\tvar offset = new Vec3D(parseInt(this.width / 2,10), 0, parseInt(this._depth / 2,10)),\n\t\t\t\tscaleXZ = this.getScale().to3DXZ();\n\t\t\ti=0;\n\t\t\tfor(var z = 0; z < this._depth; z++){\n\t\t\t\tfor(var x = 0; x < this.width; x++){\n\t\t\t\t\tthis.vertices[i++] = new Vec3D(x,0,z).subSelf(offset).scaleSelf(scaleXZ);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tTerrain.prototype = {\n\t\t\t/**\n\t\t\t* @return number of grid cells along the Z axis.\n\t\t\t*/\n\t\t\tgetDepth: function(){\n\t\t\t\treturn this._depth;\n\t\t\t},\n\t\t\tgetElevation: function(){\n\t\t\t\treturn this.elevation;\n\t\t\t},\n\t\t\t/**\n\t\t\t* @param {Number} x\n\t\t\t* @param {Number} z\n\t\t\t* @return the elevation at grid point\n\t\t\t*/\n\t\t\tgetHeightAtCell: function(x,z){\n\t\t\t\t//console.log(\"[\"+x+\",\"+z+\"]\");\n\t\t\t\treturn this.elevation[this._getIndex(x,z)];\n\t\t\t},\n\t\t\t/**\n\t\t\t* Computes the elevation of the terrain at the given 2D world coordinate\n\t\t\t* (based on current terrain scale).\n\t\t\t*\n\t\t\t* @param {Number} x scaled world coord x\n\t\t\t* @param {Number} z scaled world coord z\n\t\t\t* @return {Number} interpolated elevation\n\t\t\t*/\n\t\t\tgetHeightAtPoint: function(x,z){\n\t\t\t\tvar xx = x / this._scale.x + this.width * 0.5,\n\t\t\t\t\tzz = z / this._scale.y + this._depth * 0.5,\n\t\t\t\t\ty = 0,\n\t\t\t\t\tflxx = ~~x,\n\t\t\t\t\tflzz = ~~zz;\n\n\t\t\t\tif(xx >= 0 & xx < this.width && zz >= 0 && zz < this._depth){\n\n\t\t\t\t\tvar x2 = ~~Math.min(xx + 1, this.width - 1),\n\t\t\t\t\t\tz2 = ~~Math.min(zz + 1, this._depth - 1);\n\n\t\t\t\t\tvar\ta = this.getHeightAtCell(flxx, flzz),\n\t\t\t\t\t\tb = this.getHeightAtCell(x2, flzz),\n\t\t\t\t\t\tc = this.getHeightAtCell(flxx, z2),\n\t\t\t\t\t\td = this.getHeightAtCell(x2, z2);\n\n\t\t\t\t\ty = Interpolation2D.bilinear(xx,zz, flxx, flzz, x2, z2, a, b, c, d);\n\t\t\t\t}\n\t\t\t\treturn y;\n\t\t\t},\n\t\t\t/**\n\t\t\t* Computes the array index for the given cell coords & checks if they're in\n\t\t\t* bounds. If not an {@link IndexOutOfBoundsException} is thrown.\n\t\t\t* @param {Number} x\n\t\t\t* @param {Number} z\n\t\t\t* @return {Number} array index\n\t\t\t*/\n\t\t\t_getIndex: function(x,z){\n\t\t\t\tvar idx = z * this.width + x;\n\t\t\t\tif(idx < 0 || idx > this.__elevationLength){\n\t\t\t\t\tthrow new Error(\"the given terrain cell is invalid: \"+x+ \";\"+z);\n\t\t\t\t}\n\t\t\t\treturn idx;\n\t\t\t},\n\t\t\t/**\n\t\t\t * @return {Vec2D} the scale\n\t\t\t */\n\t\t\tgetScale: function(){\n\t\t\t\treturn this._scale;\n\t\t\t},\n\n\t\t\tgetVertexAtCell: function(x,z){\n\t\t\t\treturn this.vertices[this._getIndex(x,z)];\n\t\t\t},\n\t\t\t/**\n\t\t\t * @return {Number} number of grid cells along X axis\n\t\t\t */\n\t\t\tgetWidth: function(){\n\t\t\t\treturn this.width;\n\t\t\t},\n\t\t\t/**\n\t\t\t* Computes the 3D position (with elevation) and normal vector at the given\n\t\t\t* 2D location in the terrain. The position is in scaled world coordinates\n\t\t\t* based on the given terrain scale. The returned data is encapsulated in a\n\t\t\t* {@link toxi.geom.IsectData3D} instance.\n\t\t\t* @param {Number} x\n\t\t\t* @param {Number} z\n\t\t\t* @return {IsectData3D} intersection data parcel\n\t\t\t*/\n\t\t\tintersectAtPoint: function(x,z){\n\t\t\t\tvar xx = x / this._scale.x + this.width * 0.5,\n\t\t\t\t\tzz = z / this._scale.y + this._depth * 0.5,\n\t\t\t\t\tisec = new IsectData3D();\n\t\t\t\tif(xx >= 0 && xx < this.width && zz >= 0 && zz < this._depth){\n\t\t\t\t\tvar x2 = ~~Math.min(xx + 1, this.width - 1),\n\t\t\t\t\t\tz2 = ~~Math.min(zz + 1, this._depth - 1),\n\t\t\t\t\t\tflxx = ~~xx,\n\t\t\t\t\t\tflzz = ~~zz,\n\n\t\t\t\t\t\ta = this.getVertexAtCell(flxx,flzz),\n\t\t\t\t\t\tb = this.getVertexAtCell(x2, flzz),\n\t\t\t\t\t\tc = this.getVertexAtCell(x2,z2),\n\t\t\t\t\t\td = this.getVertexAtCell(flxx,z2),\n\t\t\t\t\t\tr = new Ray3D(new Vec3D(x, 10000, z), new Vec3D(0, -1, 0)),\n\t\t\t\t\t\ti = new TriangleIntersector(new Triangle3D(a, b, d));\n\n\t\t\t\t\tif(i.intersectsRay(r)){\n\t\t\t\t\t\tisec = i.getIntersectionData();\n\t\t\t\t\t} else {\n\t\t\t\t\t\ti.setTriangle(new Triangle3D(b, c, d));\n\t\t\t\t\t\ti.intersectsRay(r);\n\t\t\t\t\t\tisec = i.getIntersectionData();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn isec;\n\t\t\t},\n\t\t\t/**\n\t\t\t* Sets the elevation of all cells to those of the given array values.\n\t\t\t* @param {Array} elevation array of height values\n\t\t\t* @return itself\n\t\t\t*/\n\t\t\tsetElevation: function(elevation){\n\t\t\t\tif(this.__elevationLength == elevation.length){\n\t\t\t\t\tfor(var i = 0, len = elevation.length; i<len; i++){\n\t\t\t\t\t\tthis.vertices[i].y = this.elevation[i] = elevation[i];\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tthrow new Error(\"the given elevation array size does not match terrain\");\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t},\n\t\t\t/**\n\t\t\t* Sets the elevation for a single given grid cell.\n\t\t\t* @param {Number} x\n\t\t\t* @param {Number} z\n\t\t\t* @param {Number} h new elevation value\n\t\t\t* @return itself\n\t\t\t*/\n\t\t\tsetHeightAtCell: function(x,z,h){\n\t\t\t\tvar index = this._getIndex(x,z);\n\t\t\t\tthis.elevation[index] = h;\n\t\t\t\tthis.vertices[index].y = h;\n\t\t\t\treturn this;\n\t\t\t},\n\t\t\tsetScale: function(scale){\n\t\t\t\tif(!internals.has.XY(scale) ){\n\t\t\t\t\tscale = new Vec2D(scale,scale);\n\t\t\t\t}\n\t\t\t\tthis._scale = scale;\n\t\t\t},\n\t\t\ttoMesh: function(){\n\t\t\t\tvar opts = {\n\t\t\t\t\tmesh: undefined,\n\t\t\t\t\tminX: 0,\n\t\t\t\t\tminZ: 0,\n\t\t\t\t\tmaxX: this.width,\n\t\t\t\t\tmaxZ: this._depth\n\t\t\t\t};\n\n\t\t\t\tvar v = this.vertices,\n\t\t\t\t\tw = this.width,\n\t\t\t\t\td = this._depth;\n\n\t\t\t\tif(arguments.length == 1 && typeof arguments[0] == 'object'){\n\t\t\t\t\t//options object\n\t\t\t\t\tvar args = arguments[0];\n\t\t\t\t\topts.mesh = args.mesh || new TriangleMesh(\"terrain\");\n\t\t\t\t\topts.minX = args.minX || opts.minX;\n\t\t\t\t\topts.minZ = args.minZ || opts.minZ;\n\t\t\t\t\topts.maxX = args.maxX || opts.maxX;\n\t\t\t\t\topts.maxZ = args.maxZ || opts.maxZ;\n\t\t\t\t} else if(arguments.length >= 5){\n\t\t\t\t\topts.mesh = arguments[0];\n\t\t\t\t\topts.minX = arguments[1];\n\t\t\t\t\topts.minZ = arguments[2];\n\t\t\t\t\topts.maxX  = arguments[3];\n\t\t\t\t\topts.maxZ = arguments[4];\n\t\t\t\t}\n\n\t\t\t\topts.mesh = opts.mesh || new TriangleMesh(\"terrain\");\n\t\t\t\topts.minX = mathUtils.clip(opts.minX, 0, w - 1);\n\t\t\t\topts.maxX = mathUtils.clip(opts.maxX, 0, w);\n\t\t\t\topts.minZ = mathUtils.clip(opts.minZ, 0, d-1);\n\t\t\t\topts.maxZ = mathUtils.clip(opts.maxZ, 0, d);\n\t\t\t\topts.minX++;\n\t\t\t\topts.minZ++;\n\n\n\t\t\t\tfor(var z = opts.minZ, idx = opts.minX * w; z < opts.maxZ; z++, idx += w){\n\t\t\t\t\tfor(var x = opts.minX; x < opts.maxX; x++){\n\t\t\t\t\t\topts.mesh.addFace(v[idx - w + x - 1], v[idx - w + x], v[idx + x - 1]);\n\t\t\t\t\t\topts.mesh.addFace(v[idx - w + x], v[idx + x], v[idx + x - 1]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn opts.mesh;\n\t\t\t}\n\t\t};\n\n\t}( TriangleMesh ));\n\n\n\t//SurfaceMeshBuilder\n\t(function( TriangleMesh ){\n\t\tvar Vec3D = require('../Vec3D'),\n\t\t\tVec2D = require('../Vec2D');\n\n\t\t/**\n\t\t * @class An extensible builder class for {@link TriangleMesh}es based on 3D surface\n\t\t * functions using spherical coordinates. In order to create mesh, you'll need\n\t\t * to supply a {@link SurfaceFunction} implementation to the builder.\n\t\t * @member toxi\n\t\t */\n\t\tSurfaceMeshBuilder = function(func) {\n\t\t\tthis.func = func;\n\t\t};\n\n\t\tSurfaceMeshBuilder.prototype = {\n\t\t\t/*\n\t\t\t\tcreate a mesh from a surface,\n\t\t\t\tparameter options:\n\t\t\t\t\t1 - Object options\n\t\t\t\t\t1 - Number resolution\n\t\t\t\t\t3 - TriangleMesh mesh, Number resolution, Number size\n\t\t\t\t\t4 - TriangleMesh mesh, Number resolution, Number size, boolean isClosed\n\t\t\t*/\n\t\t\tcreateMesh: function() {\n\t\t\t\tvar opts = {\n\t\t\t\t\tmesh: undefined,\n\t\t\t\t\tresolution: 0,\n\t\t\t\t\tsize: 1,\n\t\t\t\t\tisClosed: true\n\t\t\t\t};\n\t\t\t\tif(arguments.length == 1){\n\t\t\t\t\tif(typeof arguments[0] == 'object'){ //options object\n\t\t\t\t\t\tvar arg = arguments[0];\n\t\t\t\t\t\t//if a mesh was provided as an option, use it, otherwise make one\n\t\t\t\t\t\topts.mesh = arg.mesh;\n\t\t\t\t\t\topts.resolution = arg.res || arg.resoultion || 0;\n\t\t\t\t\t\tif(arg.size !== undefined){\n\t\t\t\t\t\t\topts.size = arg.size;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(arg.isClosed !== undefined){\n\t\t\t\t\t\t\topts.isClosed = arg.isClosed;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else { //resolution Number\n\t\t\t\t\t\topts.resolution = arguments[0];\n\t\t\t\t\t}\n\t\t\t\t} else if(arguments.length > 2){\n\t\t\t\t\topts.mesh = arguments[0];\n\t\t\t\t\topts.resolution = arguments[1];\n\t\t\t\t\topts.size = arguments[2];\n\t\t\t\t\tif(arguments.length == 4){\n\t\t\t\t\t\topts.isClosed = arguments[3];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tvar mesh = opts.mesh;\n\t\t\t\tif(mesh === undefined || mesh === null){\n\t\t\t\t\tmesh = new TriangleMesh();\n\t\t\t\t}\n\n\t\t\t\tvar a = new Vec3D(),\n\t\t\t\t\tb = new Vec3D(),\n\t\t\t\t\tpa = new Vec3D(),\n\t\t\t\t\tpb = new Vec3D(),\n\t\t\t\t\ta0 = new Vec3D(),\n\t\t\t\t\tb0 = new Vec3D(),\n\t\t\t\t\tphiRes = this.func.getPhiResolutionLimit(opts.resolution),\n\t\t\t\t\tphiRange = this.func.getPhiRange(),\n\t\t\t\t\tthetaRes = this.func.getThetaResolutionLimit(opts.resolution),\n\t\t\t\t\tthetaRange = this.func.getThetaRange(),\n\t\t\t\t\tpres = 1.0 / phiRes, //(1 == opts.resolution % 2 ? opts.resolution - 0 : opts.resolution);\n\t\t\t\t\ttres = 1.0 / thetaRes,\n\t\t\t\t\tires = 1.0 / opts.resolution,\n\t\t\t\t\tpauv = new Vec2D(),\n\t\t\t\t\tpbuv = new Vec2D(),\n\t\t\t\t\tauv = new Vec2D(),\n\t\t\t\t\tbuv = new Vec2D();\n\n\t\t\t\tfor (var p = 0; p < phiRes; p++) {\n\t\t\t\t\tvar phi = p * phiRange * ires;\n\t\t\t\t\tvar phiNext = (p + 1) * phiRange * ires;\n\t\t\t\t\tfor (var t = 0; t <= thetaRes; t++) {\n\t\t\t\t\t\tvar theta = t * thetaRange * ires;\n\t\t\t\t\t\tvar func = this.func;\n\t\t\t\t\t\ta =\tfunc.computeVertexFor(a, phiNext, theta).scaleSelf(opts.size);\n\t\t\t\t\t\tauv.set( t * tres, 1 - (p + 1) * pres);\n\t\t\t\t\t\tb = func.computeVertexFor(b, phi, theta).scaleSelf(opts.size);\n\t\t\t\t\t\tbuv.set( t * tres, 1 - p * pres );\n\t\t\t\t\t\tif (b.equalsWithTolerance(a, 0.0001) ) {\n\t\t\t\t\t\t\tb.set(a);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (t > 0) {\n\t\t\t\t\t\t\tif (t == thetaRes && opts.isClosed) {\n\t\t\t\t\t\t\t\ta.set(a0);\n\t\t\t\t\t\t\t\tb.set(b0);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tmesh.addFace(pa, pb, a, pauv.copy(), pbuv.copy(), auv.copy());\n\t\t\t\t\t\t\tmesh.addFace(pb, b, a, pbuv.copy(), buv.copy(), auv.copy());\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ta0.set(a);\n\t\t\t\t\t\t\tb0.set(b);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tpa.set(a);\n\t\t\t\t\t\tpb.set(b);\n\t\t\t\t\t\tpauv.set(auv);\n\t\t\t\t\t\tpbuv.set(buv);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn mesh;\n\t\t\t},\n\n\n\t\t\t/**\n\t\t\t@return the function\n\t\t\t*/\n\t\t\tgetFunction: function() {\n\t\t\t\treturn this.func;\n\t\t\t},\n\n\t\t\tsetFunction: function(func) {\n\t\t\t\tthis.func = func;\n\t\t\t}\n\t\t};\n\t}( TriangleMesh ));\n\n\texports.TriangleMesh = TriangleMesh;\n\texports.WETriangleMesh = WETriangleMesh;\n\texports.Terrain = Terrain;\n\texports.SurfaceMeshBuilder = SurfaceMeshBuilder;\n\n\n", "\n\nvar\tinternals = require('../internals'),\n\tVec3D = require('./Vec3D'),\n\tVec2D = require('./Vec2D'),\n\tmathUtils = require('../math/mathUtils');\n\n\n\n\n/**\n @class Axis-aligned Bounding Box\n @member\n */\nvar AABB = function(a,b){\n\tif(a === undefined){\n\t\tVec3D.call(this);\n\t\tthis.setExtent(new Vec3D());\n\t} else if(typeof(a) == \"number\") {\n\t\tVec3D.call(this,new Vec3D());\n\t\tthis.setExtent(a);\n\t} else if( internals.has.XYZ( a ) ) {\n\t\tVec3D.call(this,a);\n\t\tif(b === undefined && internals.is.AABB( a )) {\n\t\t\tthis.setExtent(a.getExtent());\n\t\t} else {\n\t\t\tif(typeof b == \"number\"){\n\t\t\t\tthis.setExtent(new Vec3D(b,b,b));\n\t\t\t}else { //should be an AABB\n\t\t\t\tthis.setExtent(b);\n\t\t\t}\n\t\t}\n\t}\n\n\n};\n\ninternals.extend(AABB,Vec3D);\n\nAABB.fromMinMax = function(min,max){\n\tvar a = Vec3D.min(min, max);\n\tvar b = Vec3D.max(min, max);\n\treturn new AABB( a.interpolateTo(b,0.5), b.sub(a).scaleSelf(0.5) );\n};\n\nAABB.prototype.containsPoint = function(p) {\n    return p.isInAABB(this);\n};\n\nAABB.prototype.copy = function() {\n    return new AABB(this);\n};\n\n/**\n * Returns the current box size as new Vec3D instance (updating this vector\n * will NOT update the box size! Use {@link #setExtent(ReadonlyVec3D)} for\n * those purposes)\n *\n * @return box size\n */\nAABB.prototype.getExtent = function() {\n   return this.extent.copy();\n};\n\nAABB.prototype.getMax = function() {\n   // return this.add(extent);\n   return this.max.copy();\n};\n\nAABB.prototype.getMin = function() {\n   return this.min.copy();\n};\n\nAABB.prototype.getNormalForPoint = function(p) {\n    p = p.sub(this);\n    var pabs = this.extent.sub(p.getAbs());\n    var psign = p.getSignum();\n    var normal = Vec3D.X_AXIS.scale(psign.x);\n    var minDist = pabs.x;\n    if (pabs.y < minDist) {\n        minDist = pabs.y;\n        normal = Vec3D.Y_AXIS.scale(psign.y);\n    }\n    if (pabs.z < minDist) {\n        normal = Vec3D.Z_AXIS.scale(psign.z);\n    }\n    return normal;\n};\n\n/**\n * Adjusts the box size and position such that it includes the given point.\n *\n * @param p\n *            point to include\n * @return itself\n */\nAABB.prototype.includePoint = function(p) {\n    this.min.minSelf(p);\n    this.max.maxSelf(p);\n    this.set(this.min.interpolateTo(this.max, 0.5));\n    this.extent.set(this.max.sub(this.min).scaleSelf(0.5));\n    return this;\n};\n\n/**\n* Checks if the box intersects the passed in one.\n*\n* @param box\n*            box to check\n* @return true, if boxes overlap\n*/\nAABB.prototype.intersectsBox = function(box) {\n    var t = box.sub(this);\n    return Math.abs(t.x) <= (this.extent.x + box.extent.x) && Math.abs(t.y) <= (this.extent.y + box.extent.y) && Math.abs(t.z) <= (this.extent.z + box.extent.z);\n};\n\n/**\n * Calculates intersection with the given ray between a certain distance\n * interval.\n *\n * Ray-box intersection is using IEEE numerical properties to ensure the\n * test is both robust and efficient, as described in:\n *\n * Amy Williams, Steve Barrus, R. Keith Morley, and Peter Shirley: \"An\n * Efficient and Robust Ray-Box Intersection Algorithm\" Journal of graphics\n * tools, 10(1):49-54, 2005\n *\n * @param ray incident ray\n * @param minDist\n * @param maxDist\n * @return intersection point on the bounding box (only the first is\n *         returned) or null if no intersection\n */\n\nAABB.prototype.intersectsRay = function(ray, minDist, maxDist) {\n    var invDir = ray.getDirection().reciprocal();\n    var signDirX = invDir.x < 0;\n    var signDirY = invDir.y < 0;\n    var signDirZ = invDir.z < 0;\n    var bbox = signDirX ? this.max : this.min;\n    var tmin = (bbox.x - ray.x) * invDir.x;\n    bbox = signDirX ? this.min : this.max;\n    var tmax = (bbox.x - ray.x) * invDir.x;\n    bbox = signDirY ? this.max : this.min;\n    var tymin = (bbox.y - ray.y) * invDir.y;\n    bbox = signDirY ? this.min : this.max;\n    var tymax = (bbox.y - ray.y) * invDir.y;\n    if ((tmin > tymax) || (tymin > tmax)) {\n        return null;\n    }\n    if (tymin > tmin) {\n        tmin = tymin;\n    }\n    if (tymax < tmax) {\n        tmax = tymax;\n    }\n    bbox = signDirZ ? this.max : this.min;\n    var tzmin = (bbox.z - ray.z) * invDir.z;\n    bbox = signDirZ ? this.min : this.max;\n    var tzmax = (bbox.z - ray.z) * invDir.z;\n    if ((tmin > tzmax) || (tzmin > tmax)) {\n        return null;\n    }\n    if (tzmin > tmin) {\n        tmin = tzmin;\n    }\n    if (tzmax < tmax) {\n        tmax = tzmax;\n    }\n    if ((tmin < maxDist) && (tmax > minDist)) {\n        return ray.getPointAtDistance(tmin);\n    }\n    return undefined;\n};\n\n/**\n * @param c\n *            sphere centre\n * @param r\n *            sphere radius\n * @return true, if AABB intersects with sphere\n */\n\nAABB.prototype.intersectsSphere = function(c, r) {\n\tif(arguments.length == 1){ //must've been a sphere\n\t\tr = c.radius;\n\t}\n    var s,\n\t\td = 0;\n    // find the square of the distance\n    // from the sphere to the box\n    if (c.x < this.min.x) {\n        s = c.x - this.min.x;\n        d = s * s;\n    } else if (c.x > this.max.x) {\n        s = c.x - this.max.x;\n        d += s * s;\n    }\n\n    if (c.y < this.min.y) {\n        s = c.y - this.min.y;\n        d += s * s;\n    } else if (c.y > this.max.y) {\n        s = c.y - this.max.y;\n        d += s * s;\n    }\n\n    if (c.z < this.min.z) {\n        s = c.z - this.min.z;\n        d += s * s;\n    } else if (c.z > this.max.z) {\n        s = c.z - this.max.z;\n        d += s * s;\n    }\n\n    return d <= r * r;\n};\n\nAABB.prototype.intersectsTriangle = function(tri) {\n\t// use separating axis theorem to test overlap between triangle and box\n\t// need to test for overlap in these directions:\n\t//\n\t// 1) the {x,y,z}-directions (actually, since we use the AABB of the\n\t// triangle\n\t// we do not even need to test these)\n\t// 2) normal of the triangle\n\t// 3) crossproduct(edge from tri, {x,y,z}-directin)\n\t// this gives 3x3=9 more tests\n\tvar v0,\n\t\tv1,\n\t\tv2,\n\t\tnormal,\n\t\te0,\n\t\te1,\n\t\te2,\n\t\tf;\n\n\t// move everything so that the boxcenter is in (0,0,0)\n\tv0 = tri.a.sub(this);\n\tv1 = tri.b.sub(this);\n\tv2 = tri.c.sub(this);\n\n\t// compute triangle edges\n\te0 = v1.sub(v0);\n\te1 = v2.sub(v1);\n\te2 = v0.sub(v2);\n\n\t// test the 9 tests first (this was faster)\n\tf = e0.getAbs();\n\tif (this.testAxis(e0.z, -e0.y, f.z, f.y, v0.y, v0.z, v2.y, v2.z, this.extent.y, this.extent.z)) {\n\t\treturn false;\n\t}\n\tif (this.testAxis(-e0.z, e0.x, f.z, f.x, v0.x, v0.z, v2.x, v2.z, this.extent.x, this.extent.z)) {\n\t\treturn false;\n\t}\n\tif (this.testAxis(e0.y, -e0.x, f.y, f.x, v1.x, v1.y, v2.x, v2.y, this.extent.x, this.extent.y)) {\n\t\treturn false;\n\t}\n\n\tf = e1.getAbs();\n\tif (this.testAxis(e1.z, -e1.y, f.z, f.y, v0.y, v0.z, v2.y, v2.z, this.extent.y, this.extent.z)) {\n\t\treturn false;\n\t}\n\tif (this.testAxis(-e1.z, e1.x, f.z, f.x, v0.x, v0.z, v2.x, v2.z, this.extent.x, this.extent.z)) {\n\t\treturn false;\n\t}\n\tif (this.testAxis(e1.y, -e1.x, f.y, f.x, v0.x, v0.y, v1.x, v1.y, this.extent.x, this.extent.y)) {\n\t\treturn false;\n\t}\n\n\tf = e2.getAbs();\n\tif (this.testAxis(e2.z, -e2.y, f.z, f.y, v0.y, v0.z, v1.y, v1.z, this.extent.y, this.extent.z)) {\n\t\treturn false;\n\t}\n\tif (this.testAxis(-e2.z, e2.x, f.z, f.x, v0.x, v0.z, v1.x, v1.z, this.extent.x, this.extent.z)) {\n\t\treturn false;\n\t}\n\tif (this.testAxis(e2.y, -e2.x, f.y, f.x, v1.x, v1.y, v2.x, v2.y, this.extent.x, this.extent.y)) {\n\t\treturn false;\n\t}\n\n\t// first test overlap in the {x,y,z}-directions\n\t// find min, max of the triangle each direction, and test for overlap in\n\t// that direction -- this is equivalent to testing a minimal AABB around\n\t// the triangle against the AABB\n\n\t// test in X-direction\n\tif (mathUtils.min(v0.x, v1.x, v2.x) > this.extent.x || mathUtils.max(v0.x, v1.x, v2.x) < -this.extent.x) {\n\t\treturn false;\n\t}\n\n\t// test in Y-direction\n\tif (mathUtils.min(v0.y, v1.y, v2.y) > this.extent.y || mathUtils.max(v0.y, v1.y, v2.y) < -this.extent.y) {\n\t\treturn false;\n\t}\n\n\t// test in Z-direction\n\tif (mathUtils.min(v0.z, v1.z, v2.z) > this.extent.z || mathUtils.max(v0.z, v1.z, v2.z) < -this.extent.z) {\n\t\treturn false;\n\t}\n\n\t// test if the box intersects the plane of the triangle\n\t// compute plane equation of triangle: normal*x+d=0\n\tnormal = e0.cross(e1);\n\tvar d = -normal.dot(v0);\n\tif (!this.planeBoxOverlap(normal, d, this.extent)) {\n\t\treturn false;\n\t}\n\treturn true;\n};\n\nAABB.prototype.planeBoxOverlap = function(normal, d, maxbox) {\n    var vmin = new Vec3D();\n    var vmax = new Vec3D();\n\n    if (normal.x > 0.0) {\n        vmin.x = -maxbox.x;\n        vmax.x = maxbox.x;\n    } else {\n        vmin.x = maxbox.x;\n        vmax.x = -maxbox.x;\n    }\n\n    if (normal.y > 0.0) {\n        vmin.y = -maxbox.y;\n        vmax.y = maxbox.y;\n    } else {\n        vmin.y = maxbox.y;\n        vmax.y = -maxbox.y;\n    }\n\n    if (normal.z > 0.0) {\n        vmin.z = -maxbox.z;\n        vmax.z = maxbox.z;\n    } else {\n        vmin.z = maxbox.z;\n        vmax.z = -maxbox.z;\n    }\n    if (normal.dot(vmin) + d > 0.0) {\n        return false;\n    }\n    if (normal.dot(vmax) + d >= 0.0) {\n        return true;\n    }\n    return false;\n};\n\n/**\n * Updates the position of the box in space and calls\n * {@link #updateBounds()} immediately\n *\n * @see geom.Vec3D#set(float, float, float)\n */\n\nAABB.prototype.set = function(a,b,c) {\n\t\tif(internals.is.AABB( a )) {\n\t\t\tthis.extent.set(a.extent);\n\t\t\treturn Vec3D.set.apply(this,[a]);\n\t\t}\n\t\tif( internals.has.XYZ( a )){\n\t\t\tb = a.y;\n\t\t\tc = a.z;\n\t\t\ta = a.a;\n\t\t}\n\t\tthis.x = a;\n\t\tthis.y = b;\n\t\tthis.z = c;\n\t\tthis.updateBounds();\n\t\treturn this;\n };\n\n\nAABB.prototype.setExtent = function(extent) {\n        this.extent = extent.copy();\n        return this.updateBounds();\n};\n\nAABB.prototype.testAxis = function(a, b, fa, fb, va, vb, wa, wb, ea, eb) {\n    var p0 = a * va + b * vb;\n    var p2 = a * wa + b * wb;\n    var min;\n\tvar max;\n    if (p0 < p2) {\n        min = p0;\n        max = p2;\n    } else {\n        min = p2;\n        max = p0;\n    }\n    var rad = fa * ea + fb * eb;\n    return (min > rad || max < -rad);\n};\n\nAABB.prototype.toMesh = function(mesh){\n\tif(mesh === undefined){\n\t\tvar TriangleMesh = require('./mesh/meshCommon').TriangleMesh;\n\t\tmesh = new TriangleMesh(\"aabb\",8,12);\n\t}\n\tvar a = this.min,//new Vec3D(this.min.x,this.max.y,this.max.z),\n\t\tg = this.max,//new Vec3D(this.max.x,this.max.y,this.max.z),\n\t\tb = new Vec3D(a.x, a.y, g.z),\n\t\tc = new Vec3D(g.x, a.y, g.z),\n\t\td = new Vec3D(g.x, a.y, a.z),\n\t\te = new Vec3D(a.x, g.y, a.z),\n\t\tf = new Vec3D(a.x, g.y, g.z),\n\t\th = new Vec3D(g.x, g.y, a.z),\n\t\tua = new Vec2D(0,0),\n\t\tub = new Vec2D(1,0),\n\t\tuc = new Vec2D(1,1),\n\t\tud = new Vec2D(0,1);\n\t// left\n\tmesh.addFace(a, b, f, ud, uc, ub);\n\tmesh.addFace(a, f, e, ud, ub, ua);\n\t// front\n\tmesh.addFace(b, c, g, ud, uc, ub);\n\tmesh.addFace(b, g, f, ud, ub, ua);\n\t// right\n\tmesh.addFace(c, d, h, ud, uc, ub);\n\tmesh.addFace(c, h, g, ud, ub, ua);\n\t// back\n\tmesh.addFace(d, a, e, ud, uc, ub);\n\tmesh.addFace(d, e, h, ud, ub, ua);\n\t// top\n\tmesh.addFace(e, f, h, ua, ud, ub);\n\tmesh.addFace(f, g, h, ud, uc, ub);\n\t// bottom\n\tmesh.addFace(a, d, b, ud, uc, ua);\n\tmesh.addFace(b, d, c, ua, uc, ub);\n\treturn mesh;\n\n};\n\n\nAABB.prototype.toString = function() {\n   return \"<aabb> pos: \"+Vec3D.prototype.toString.call(this)+\" ext: \"+this.extent.toString();\n};\n\n/**\n* Updates the min/max corner points of the box. MUST be called after moving\n* the box in space by manipulating the public x,y,z coordinates directly.\n*\n* @return itself\n*/\nAABB.prototype.updateBounds = function() {\n  // this is check is necessary for the constructor\n  if (this.extent !== undefined) {\n      this.min = this.sub(this.extent);\n      this.max = this.add(this.extent);\n  }\n  return this;\n};\n\nmodule.exports = AABB;\n\n\n", "\n\nvar mathUtils = require('../math/mathUtils'),\n    Vec3D = require('./Vec3D'),\n    Line3D = require('./Line3D'),\n    AABB = require('./AABB');\n\n/**\n * @class\n * @member toxi\n * @param {toxi.Vec3D} a\n * @param {toxi.Vec3D} b\n * @param {toxi.Vec3D} c\n */\nvar Triangle3D = function(a,b,c){\n\tthis.a = a;\n\tthis.b = b;\n\tthis.c = c;\n};\n\nTriangle3D.createEquilateralFrom = function(a, b) {\n    var c = a.interpolateTo(b, 0.5);\n    var dir = b.sub(a);\n    var n = a.cross(dir.normalize());\n    c.addSelf(n.normalizeTo(dir.magnitude() * mathUtils.SQRT3 / 2));\n    return new Triangle3D(a, b, c);\n};\n\nTriangle3D.isClockwiseInXY = function(a, b, c) {\n\tvar determ = (b.x - a.x) * (c.y - a.y) - (c.x - a.x) * (b.y - a.y);\n\treturn (determ < 0.0);\n};\n\nTriangle3D.isClockwiseInXZ = function(a, b,c) {\n\tvar determ = (b.x - a.x) * (c.z - a.z) - (c.x - a.x) * (b.z - a.z);\n\treturn (determ < 0.0);\n};\n\nTriangle3D.isClockwiseInYZ = function(a,b,c) {\n    var determ = (b.y - a.y) * (c.z - a.z) - (c.y - a.y) * (b.z - a.z);\n    return (determ < 0.0);\n};\n\n\nTriangle3D.prototype = {\n\tclosestPointOnSurface: function(p) {\n        var ab = this.b.sub(this.a);\n        var ac = this.c.sub(this.a);\n        var bc = this.c.sub(this.b);\n\n        var pa = p.sub(this.a);\n        var pb = p.sub(this.b);\n        var pc = p.sub(this.c);\n\n        var ap = a.sub(this.p);\n        var bp = b.sub(this.p);\n        var cp = c.sub(this.p);\n\n        // Compute parametric position s for projection P' of P on AB,\n        // P' = A + s*AB, s = snom/(snom+sdenom)\n        var snom = pa.dot(ab);\n\n        // Compute parametric position t for projection P' of P on AC,\n        // P' = A + t*AC, s = tnom/(tnom+tdenom)\n        var tnom = pa.dot(ac);\n\n        if (snom <= 0.0 && tnom <= 0.0) {\n            return this.a; // Vertex region early out\n        }\n\n        var sdenom = pb.dot(this.a.sub(this.b));\n        var\ttdenom = pc.dot(this.a.sub(this.c));\n\n        // Compute parametric position u for projection P' of P on BC,\n        // P' = B + u*BC, u = unom/(unom+udenom)\n        var unom = pb.dot(bc);\n        var udenom = pc.dot(this.b.sub(this.c));\n\n        if (sdenom <= 0.0 && unom <= 0.0) {\n            return this.b; // Vertex region early out\n        }\n        if (tdenom <= 0.0 && udenom <= 0.0) {\n            return this.c; // Vertex region early out\n        }\n\n        // P is outside (or on) AB if the triple scalar product [N PA PB] <= 0\n        var n = ab.cross(ac);\n        var vc = n.dot(ap.crossSelf(bp));\n\n        // If P outside AB and within feature region of AB,\n        // return projection of P onto AB\n        if (vc <= 0.0 && snom >= 0.0 && sdenom >= 0.0) {\n            // return a + snom / (snom + sdenom) * ab;\n            return this.a.add(ab.scaleSelf(snom / (snom + sdenom)));\n        }\n\n        // P is outside (or on) BC if the triple scalar product [N PB PC] <= 0\n        var va = n.dot(bp.crossSelf(cp));\n        // If P outside BC and within feature region of BC,\n        // return projection of P onto BC\n        if (va <= 0.0 && unom >= 0.0 && udenom >= 0.0) {\n            // return b + unom / (unom + udenom) * bc;\n            return this.b.add(bc.scaleSelf(unom / (unom + udenom)));\n        }\n\n        // P is outside (or on) CA if the triple scalar product [N PC PA] <= 0\n        var vb = n.dot(cp.crossSelf(ap));\n        // If P outside CA and within feature region of CA,\n        // return projection of P onto CA\n        if (vb <= 0.0 && tnom >= 0.0 && tdenom >= 0.0) {\n            // return a + tnom / (tnom + tdenom) * ac;\n            return this.a.add(ac.scaleSelf(tnom / (tnom + tdenom)));\n        }\n\n        // P must project inside face region. Compute Q using barycentric\n        // coordinates\n        var u = va / (va + vb + vc);\n        var v = vb / (va + vb + vc);\n        var w = 1.0 - u - v; // = vc / (va + vb + vc)\n        // return u * a + v * b + w * c;\n        return this.a.scale(u).addSelf(this.b.scale(v)).addSelf(this.c.scale(w));\n    },\n    \n    computeCentroid: function() {\n        this.centroid = this.a.add(this.b).addSelf(this.c).scaleSelf(1 / 3);\n        return this.centroid;\n    },\n    \n    computeNormal: function() {\n        this.normal = this.a.sub(this.c).crossSelf(this.a.sub(this.b)).normalize();\n        return this.normal;\n    },\n    \n    containsPoint: function(p) {\n        if (p.equals(this.a) || p.equals(this.b) || p.equals(this.c)) {\n            return true;\n        }\n        var v1 = p.sub(this.a).normalize();\n        var v2 = p.sub(this.b).normalize();\n        var v3 = p.sub(this.c).normalize();\n\n        var total_angles = Math.acos(v1.dot(v2));\n        total_angles += Math.acos(v2.dot(v3));\n        total_angles += Math.acos(v3.dot(v1));\n\n        return (mathUtils.abs(total_angles - mathUtils.TWO_PI) <= 0.005);\n    },\n\n   flipVertexOrder: function() {\n        var t = this.a;\n        this.a = this.c;\n        this.c = this.t;\n        return this;\n    },\n\n    fromBarycentric: function(p) {\n        return new Vec3D(this.a.x * p.x + this.b.x * p.y + this.c.x * p.z, this.a.y * p.x + this.b.y * p.y + this.c.y * p.z, this.a.z * p.x + this.b.z * p.y + this.c.z * p.z);\n    },\n\n    getBoundingBox: function() {\n        var min = Vec3D.min(Vec3D.min(this.a, this.b), this.c);\n        var max = Vec3D.max(Vec3D.max(this.a, this.b), this.c);\n        return AABB.fromMinMax(min, max);\n    },\n    getClosestPointTo: function(p) {\n        var edge = new Line3D(this.a, this.b);\n        var Rab = edge.closestPointTo(p);\n        var Rbc = edge.set(this.b, this.c).closestPointTo(p);\n        var Rca = edge.set(this.c, this.a).closestPointTo(p);\n\n        var dAB = p.sub(Rab).magSquared();\n        var dBC = p.sub(Rbc).magSquared();\n        var dCA = p.sub(Rca).magSquared();\n\n        var min = dAB;\n        var result = Rab;\n\n        if (dBC < min) {\n            min = dBC;\n            result = Rbc;\n        }\n        if (dCA < min) {\n            result = Rca;\n        }\n\n        return result;\n    },\n\n    isClockwiseInXY: function() {\n        return Triangle3D.isClockwiseInXY(this.a, this.b, this.c);\n    },\n\n    isClockwiseInXZ: function() {\n        return Triangle3D.isClockwiseInXY(this.a, this.b, this.c);\n    },\n\n    isClockwiseInYZ: function() {\n        return Triangle3D.isClockwiseInXY(this.a, this.b, this.c);\n    },\n    \n    set: function(a2, b2, c2) {\n        this.a = a2;\n        this.b = b2;\n        this.c = c2;\n    },\n\n    toBarycentric: function(p) {\n        var  e = b.sub(this.a).cross(this.c.sub(this.a));\n        var  n = e.getNormalized();\n\n        // Compute twice area of triangle ABC\n        var areaABC = n.dot(e);\n        // Compute lambda1\n        var areaPBC = n.dot(this.b.sub(p).cross(this.c.sub(p)));\n        var l1 = areaPBC / areaABC;\n\n        // Compute lambda2\n        var areaPCA = n.dot(this.c.sub(p).cross(this.a.sub(p)));\n        var l2 = areaPCA / areaABC;\n\n        // Compute lambda3\n        var l3 = 1.0 - l1 - l2;\n\n        return new Vec3D(l1, l2, l3);\n    },\n\n    toString: function() {\n        return \"Triangle: \" + this.a + \",\" + this.b + \",\" + this.c;\n    }\n\n};\n\nmodule.exports = Triangle3D;\n\n", "\n/**\n * @class\n * Helper class for the spline3d classes in this package. Used to compute\n * subdivision points of the curve.\n * @member toxi\n * @param {Number} res number of subdivision steps between each control point of the spline3d\n */\nvar\tBernsteinPolynomial = function(res) {\n\tthis.resolution = res;\n\tvar b0 = [],\n\t\tb1 = [],\n\t\tb2 = [],\n\t\tb3 = [];\n\tvar t = 0;\n\tvar dt = 1.0 / (res - 1);\n\tfor (var i = 0; i < res; i++) {\n\t\tvar t1 = 1 - t;\n\t\tvar t12 = t1 * t1;\n\t\tvar t2 = t * t;\n\t\tb0[i] = t1 * t12;\n\t\tb1[i] = 3 * t * t12;\n\t\tb2[i] = 3 * t2 * t1;\n\t\tb3[i] = t * t2;\n\t\tt += dt;\n\t}\n\tthis.b0 = b0;\n\tthis.b1 = b1;\n\tthis.b2 = b2;\n\tthis.b3 = b3;\n};\n\nmodule.exports = BernsteinPolynomial;\n\n\n", "\n\nvar\tRay2D = require('./Ray2D'),\n\tinternals = require('../internals'),\n    mathUtils = require('../math/mathUtils');\n\n\n/**\n @class\n @member toxi\n */\nvar Line2D = function( a, b) {\n\tthis.a = a;\n\tthis.b = b;\n};\n\n\nLine2D.prototype = {\n    constructor: Line2D,\n\n    /**\n     * Computes the dot product of these 2 vectors: line start -> point\n     * and the perpendicular line direction if the result is negative.\n     *\n     * @param {Vec2D} p\n     * @return classifier Number\n     */\n    classifyPoint: function(p){\n        var normal = this.b.sub(this.a).perpendicular();\n        var d = p.sub(this.a).dot(normal);\n        return mathUtils.sign(d);\n    },\n\n\t/**\n    * Computes the closest point on this line to the point given.\n    *\n    * @param {Vec2D} p point to check against\n    * @return closest point on the line\n    */\n\tclosestPointTo: function(p) {\n\t\tvar v = this.b.sub(this.a);\n\t\tvar t = p.sub(this.a).dot(v) / v.magSquared();\n\t\t// Check to see if t is beyond the extents of the line segment\n\t\tif (t < 0.0) {\n\t\t\treturn this.a.copy();\n\t\t} else if (t > 1.0) {\n\t\t\treturn this.b.copy();\n\t\t}\n\t\t// Return the point between 'a' and 'b'\n\t\treturn this.a.add(v.scaleSelf(t));\n\t},\n\n\tcopy: function() {\n\t\treturn new Line2D(this.a.copy(), this.b.copy());\n\t},\n\n    distanceToPoint: function(p){\n        return this.closestPointTo(p).distanceTo(p);\n    },\n\n    distanceToPointSquared: function(p){\n        return this.closestPointTo(p).distanceToSquared(p);\n    },\n\n\tequals: function(obj) {\n\t\tif (this == obj) {\n\t\t\treturn true;\n\t\t}\n\t\tif (!( internals.is.Line2D( obj ) ) ) {\n\t\t\treturn false;\n\t\t}\n\t\tvar l = obj;\n\t\treturn (this.a.equals(l.a) || this.a.equals(l.b)) && (this.b.equals(l.b) || this.b.equals(l.a));\n\t},\n\n\tgetDirection: function() {\n\t\treturn this.b.sub(this.a).normalize();\n\t},\n\n    getHeading: function(){\n        return this.b.sub(this.a).heading();\n    },\n\n\tgetLength: function() {\n\t\treturn this.a.distanceTo(this.b);\n\t},\n\n\tgetLengthSquared: function() {\n\t\treturn this.a.distanceToSquared(this.b);\n\t},\n\n\tgetMidPoint: function() {\n\t\treturn this.a.add(this.b).scaleSelf(0.5);\n\t},\n\n\tgetNormal: function() {\n\t\treturn this.b.sub(this.a).perpendicular();\n\t},\n\n\tgetTheta: function() {\n\t\treturn this.a.angleBetween(this.b, true);\n\t},\n\n\thasEndPoint: function(p) {\n\t\treturn this.a.equals(p) || this.b.equals(p);\n\t},\n\n\t/**\n    * Computes intersection between this and the given line. The returned value\n    * is a {@link LineIntersection} instance and contains both the type of\n    * intersection as well as the intersection point (if existing).\n    *\n    * Based on: http://local.wasp.uwa.edu.au/~pbourke/geometry/lineline2d/\n    *\n    * @param l\n    *            line to intersect with\n    * @return intersection result\n    */\n\tintersectLine: function(l) {\n\n        var Type = Line2D.LineIntersection.Type;\n\n\t\tvar isec,\n\t\t\tdenom = (l.b.y - l.a.y) * (this.b.x - this.a.x) - (l.b.x - l.a.x) * (this.b.y - this.a.y),\n\t\t\tna = (l.b.x - l.a.x) * (this.a.y - l.a.y) - (l.b.y - l.a.y) * (this.a.x - l.a.x),\n\t\t\tnb = (this.b.x - this.a.x) * (this.a.y - l.a.y) - (this.b.y - this.a.y) * (this.a.x - l.a.x);\n\t\tif (denom !== 0) {\n\t\t\tvar ua = na / denom,\n\t\t\t\tub = nb / denom,\n                vecI = this.a.interpolateTo(this.b, ua);\n\n\t\t\tif (ua >= 0.0 && ua <= 1.0 && ub >= 0.0 && ub <= 1.0) {\n\t\t\t\tisec =new Line2D.LineIntersection(Type.INTERSECTING, vecI, ua, ub);\n\t\t\t} else {\n\t\t\t\tisec = new Line2D.LineIntersection(Type.NON_INTERSECTING, vecI, ua, ub);\n\t\t\t}\n\t\t} else {\n\t\t\tif (na === 0 && nb === 0) {\n                if( this.distanceToPoint(l.a) === 0) {\n                    isec = new Line2D.LineIntersection(Type.COINCIDENT, undefined);\n                } else {\n                    isec = new Line2D.LineIntersection(Type.COINCIDENT_NO_INTERSECT, undefined);\n                }\n\t\t\t} else {\n\t\t\t\tisec = new Line2D.LineIntersection(Type.PARALLEL, undefined);\n\t\t\t}\n\t\t}\n\t\treturn isec;\n\t},\n\n\toffsetAndGrowBy: function(offset,scale, ref) {\n\t\tvar m = this.getMidPoint();\n\t\tvar d = this.getDirection();\n\t\tvar n = d.getPerpendicular();\n\t\tif (ref !== undefined && m.sub(ref).dot(n) < 0) {\n\t\t\tn.invert();\n\t\t}\n\t\tn.normalizeTo(offset);\n\t\tthis.a.addSelf(n);\n\t\tthis.b.addSelf(n);\n\t\td.scaleSelf(scale);\n\t\tthis.a.subSelf(d);\n\t\tthis.b.addSelf(d);\n\t\treturn this;\n\t},\n\n\tscale: function(scale) {\n\t\tvar delta = (1 - scale) * 0.5;\n\t\tvar newA = this.a.interpolateTo(this.b, delta);\n\t\tthis.b.interpolateToSelf(this.a, delta);\n\t\tthis.a.set(newA);\n\t\treturn this;\n\t},\n\n\tset: function(a, b) {\n\t\tthis.a = a;\n\t\tthis.b = b;\n\t\treturn this;\n\t},\n\n\tsplitIntoSegments: function(segments,stepLength,addFirst) {\n\t\treturn Line2D.splitIntoSegments(this.a, this.b, stepLength, segments, addFirst);\n\t},\n\n\ttoRay2D: function() {\n        var Ray2D = require('./Ray2D');\n\t\treturn new Ray2D(this.a.copy(), this.b.sub(this.a).normalize());\n\t}\n};\n\n\n\n/**\n * Splits the line between A and B into segments of the given length,\n * starting at point A. The tweened points are added to the given result\n * list. The last point added is B itself and hence it is likely that the\n * last segment has a shorter length than the step length requested. The\n * first point (A) can be omitted and not be added to the list if so\n * desired.\n *\n * @param a start point\n * @param b end point (always added to results)\n * @param stepLength desired distance between points\n * @param segments existing array list for results (or a new list, if null)\n * @param addFirst false, if A is NOT to be added to results\n * @return list of result vectors\n */\nLine2D.splitIntoSegments = function(a, b, stepLength, segments, addFirst) {\n\tif (segments === undefined) {\n\t\tsegments = [];\n\t}\n\tif (addFirst) {\n\t\tsegments.push(a.copy());\n\t}\n\tvar dist = a.distanceTo(b);\n\tif (dist > stepLength) {\n\t\tvar pos = a.copy();\n\t\tvar step = b.sub(a).limit(stepLength);\n\t\twhile (dist > stepLength) {\n\t\t\tpos.addSelf(step);\n\t\t\tsegments.push(pos.copy());\n\t\t\tdist -= stepLength;\n\t\t}\n\t}\n\tsegments.push(b.copy());\n\treturn segments;\n};\n\n\n/**\n * Internal class for LineIntersection\n * @param {Number} type one of the Line2D.LineIntersection.Type\n * @param {Vec2D} pos the intersected point\n * @param {Number} ua coefficient\n * @param {Number} ub coefficient\n */\nLine2D.LineIntersection = function(type, pos, ua, ub) {\n\tthis.type = type;\n\tthis.pos = pos;\n    this.coeff = [ua, ub];\n};\n\nLine2D.LineIntersection.prototype = {\n\tgetPos: function(){\n\t\treturn this.pos ? this.pos.copy() : undefined;\n\t},\n\n    getCoefficients: function(){\n        return this.coeff;\n    },\n\n\tgetType: function(){\n\t\treturn this.type;\n\t},\n\n\ttoString: function(){\n\t\treturn \"type: \"+this.type+ \" pos: \"+this.pos;\n\t}\n};\n\nLine2D.LineIntersection.Type = {\n    COINCIDENT: 0,\n\tCOINCIDENT_NO_INTERSECT: 4,\n    PARALLEL: 1,\n    NON_INTERSECTING: 2,\n\tINTERSECTING: 3,\n};\n\n\nmodule.exports = Line2D;\n\n", "\n\nvar extend = require('../internals').extend,\n\tVec2D = require('./Vec2D'),\n\tLine2D = require('./Line2D');\n\n/**\n* Ray2D accepts 2 formats for its constructor\n* Option 1:\n* @param {Number} x,\n* @param {Number} y,\n* @param {toxi.geom.Vec2D} direction\n*\n* Option 2:\n* @param {toxi.geom.Vec2D} position\n* @param {toxi.geom.Vec2D} direction\n*/\nvar\tRay2D = function(a,b,d){\n\tvar o, dir;\n\tif(arguments.length == 3){\n\t\tVec2D.apply(this,[a,b]);\n\t\tthis.dir = d.getNormalized();\n\t} else if(arguments.length == 2){\n\t\tVec2D.apply(this,[a]);\n\t\tthis.dir = b.getNormalized();\n\t} else if(arguments.length === 0){\n\t\tVec2D.apply(this);\n\t\tthis.dir = Vec2D.Y_AXIS.copy();\n\t}\n};\nextend(Ray2D,Vec2D);\n\nRay2D.prototype.getDirection = function() {\n\t  return this.dir.copy();\n};\n/**\n * Calculates the distance between the given point and the infinite line\n * coinciding with this ray.\n */\nRay2D.prototype.getDistanceToPoint = function(p) {\n\tvar sp = p.sub(this);\n\treturn sp.distanceTo(this.dir.scale(sp.dot(this.dir)));\n};\n\nRay2D.prototype.getPointAtDistance = function(dist) {\n\treturn this.add(this.dir.scale(dist));\n};\n\n/**\n * Uses a normalized copy of the given vector as the ray direction.\n *\n * @param d new direction\n * @return itself\n */\nRay2D.prototype.setDirection = function(d) {\n\tthis.dir.set(d).normalize();\n\treturn this;\n};\n\n/**\n * Converts the ray into a 2D Line segment with its start point coinciding\n * with the ray origin and its other end point at the given distance along\n * the ray.\n *\n * @param dist end point distance\n * @return line segment\n */\nRay2D.prototype.toLine2DWithPointAtDistance = function(dist) {\n\tvar Line2D = require('./Line2D');\n\treturn new Line2D(this, this.getPointAtDistance(dist));\n};\n\nRay2D.prototype.toString = function() {\n\treturn \"origin: \" + Vec2D.prototype.toString.apply(this) + \" dir: \" + this.dir;\n};\n\nmodule.exports = Ray2D;\n\n", "\n\nvar extend = require('../internals/extend'),\n\thas = require('../internals/has'),\n\tis = require('../internals/is'),\n\tmathUtils = require('../math/mathUtils'),\n\tVec2D = require('./Vec2D');\n\n\n//declared in this module\nvar Ellipse, Circle;\n\n/**\n * @class defines a 2D ellipse and provides several utility methods for it.\n * @member toxi\n * @augments Vec2D\n */\n\nEllipse = function(a,b,c,d) {\n\tthis.radius = new Vec2D();\n\tif(arguments.length === 0){\n\t\tVec2D.apply(this,[0,0]);\n\t\tthis.setRadii(1,1);\n\t} else if( has.XY( a ) ) {\n\t\tVec2D.apply(this,[a.x,a.y]);\n\t\tif( has.XY( b ) ){\n\t\t\tthis.setRadii(b.x,b.y);\n\t\t} else {\n\t\t\tthis.setRadii(b,c);\n\t\t}\n\t} else {\n\t\tif(d === undefined) {\n\t\t\tif(c === undefined) {\n\t\t\t\tVec2D.call(this, 0, 0 );\n\t\t\t\tthis.setRadii(a,b);\n\t\t\t} else {\n\t\t\t\tVec2D.call(this, a, b );\n\t\t\t\tthis.setRadii(c,c);\n\t\t\t}\n\t\t} else {\n\t\t\tVec2D.call(this, a,b);\n\t\t\tthis.setRadii(c,d);\n\t\t}\n\t}\n};\n\nextend(Ellipse,Vec2D);\n\nEllipse.prototype.containsPoint = function(p) {\n    // Immediately reject points outside the containing rectangle\n    if (mathUtils.abs(p.x - this.x) > this.radius.x ||\n        mathUtils.abs(p.y - this.y) > this.radius.y) {\n        return false;\n    }\n    var foci = this.getFoci();\n    return p.distanceTo(foci[0]) + p.distanceTo(foci[1]) < 2 * mathUtils.max(this.radius.x, this.radius.y);\n};\n\n/**\n * Computes the area covered by the ellipse.\n */\nEllipse.prototype.getArea = function() {\n    return mathUtils.PI * this.radius.x * this.radius.y;\n};\n\n/**\n * Computes the approximate circumference of the ellipse, using this\n * equation: <code>2 * PI * sqrt(1/2 * (rx*rx+ry*ry))</code>.\n *\n * The precise value is an infinite series elliptical integral, but the\n * approximation comes sufficiently close. See Wikipedia for more details:\n *\n * http://en.wikipedia.org/wiki/Ellipse\n *\n * @return circumference\n */\nEllipse.prototype.getCircumference = function() {\n    // wikipedia solution:\n    // return (float) (MathUtils.PI * (3 * (radius.x + radius.y) - Math\n    // .sqrt((3 * radius.x + radius.y) * (radius.x + 3 * radius.y))));\n    return Math.sqrt(0.5 * this.radius.magSquared()) * mathUtils.TWO_PI;\n};\n\n/**\n * @return the focus\n */\nEllipse.prototype.getFoci = function() {\n    if (this.radius.x > this.radius.y) {\n        return [\n            this.sub(this.focus, 0),\n            this.add(this.focus, 0)\n        ];\n    }\n    return [\n        this.sub(0, this.focus),\n        this.add(0, this.focus)\n    ];\n};\n\n/**\n * @return the 2 radii of the ellipse as a Vec2D\n */\nEllipse.prototype.getRadii = function() {\n    return this.radius.copy();\n};\n\n\n/**\n * Sets the radii of the ellipse to the new values.\n *\n * @param rx\n * @param ry\n * @return itself\n */\nEllipse.prototype.setRadii = function(rx,ry) {\n\tif( has.XY( rx ) ){\n\t\try = rx.y;\n\t\trx = rx.x;\n\t}\n    this.radius.set(rx, ry);\n\n    if (this.radius.x > this.radius.y) {\n        this.focus = Math.sqrt(this.radius.x * this.radius.x - this.radius.y * this.radius.y);\n    } else {\n        this.focus = Math.sqrt(this.radius.y * this.radius.y - this.radius.x * this.radius.x);\n    }\n\n    return this;\n};\n\n/**\n * Creates a {@link Polygon2D} instance of the ellipse sampling it at the\n * given resolution.\n *\n * @param res\n *            number of steps\n * @return ellipse as polygon\n */\nEllipse.prototype.toPolygon2D = function(res) {\n    var Polygon2D = require('./Polygon2D');\n    var poly = new Polygon2D();\n    var step = mathUtils.TWO_PI / res;\n    for (var i = 0; i < res; i++) {\n\t\tvar v = Vec2D.fromTheta(i * step).scaleSelf(this.radius).addSelf(this);\n\t\tpoly.add(v);\n\t}\n    return poly;\n};\n\n\nexports = module.exports = Ellipse;\n\n/**\n * Circle\n * @class This class overrides {@link Ellipse} to define a 2D circle and provides\n * several utility methods for it, including factory methods to construct\n * circles from points.\n * @member toxi\n * @augments Ellipse\n */\nCircle = function(a,b,c) {\n\tif(arguments.length == 1){\n\t\tif( is.Circle( a ) ){\n\t\t\tEllipse.apply(this,[a,a.radius.x]);\n\t\t} else {\n\t\t\tEllipse.apply(this,[0,0,a]);\n\t\t}\n\t} else if(arguments.length == 2){\n\t\tEllipse.apply(this,[a,b]);\n\t} else {\n\t\tEllipse.apply(this,[a,b,c,c]);\n\t}\n};\n\nextend(Circle,Ellipse);\n\n\n\n\n\n/**\n * Factory method to construct a circle which has the two given points lying\n * on its perimeter. If the points are coincident, the circle will have a\n * radius of zero.\n *\n * @param p1\n * @param p2\n * @return new circle instance\n */\nCircle.from2Points = function(p1,p2) {\n    var m = p1.interpolateTo(p2, 0.5);\n    var distanceTo = m.distanceTo(p1);\n    return new Circle(m, distanceTo);\n};\n\n/**\n * Factory method to construct a circle which has the three given points\n * lying on its perimeter. The function returns null, if the 3 points are\n * co-linear (in which case it's impossible to find a circle).\n *\n * Based on CPP code by Paul Bourke:\n * http://local.wasp.uwa.edu.au/~pbourke/geometry/circlefrom3/\n *\n * @param p1\n * @param p2\n * @param p3\n * @return new circle instance or null\n */\nCircle.from3Points = function(p1,p2,p3) {\n    var circle,\n\t\tdeltaA = p2.sub(p1),\n\t\tdeltaB = p3.sub(p2),\n\t\tcentroid,\n\t\tradius;\n\tif (mathUtils.abs(deltaA.x) <= 0.0000001 && mathUtils.abs(deltaB.y) <= 0.0000001) {\n\t\tcentroid = new Vec2D(p2.x + p3.x, p1.y + p2.y).scaleSelf(0.5);\n\t\tradius = centroid.distanceTo(p1);\n\t\tcircle = new Circle(centroid, radius);\n\t} else {\n\t\tvar aSlope = deltaA.y / deltaA.x;\n\t\tvar bSlope = deltaB.y / deltaB.x;\n\t\tif (mathUtils.abs(aSlope - bSlope) > 0.0000001 && aSlope !== 0) {\n\t\t\tvar x = (aSlope * bSlope * (p1.y - p3.y) + bSlope * (p1.x + p2.x) - aSlope * (p2.x + p3.x)) / (2 * (bSlope - aSlope));\n\t\t\tvar y = -(x - (p1.x + p2.x) / 2) / aSlope + (p1.y + p2.y) / 2;\n\t\t\tcentroid = new Vec2D(x, y);\n\t\t\tradius = centroid.distanceTo(p1);\n\t\t\tcircle = new Circle(centroid, radius);\n\t\t}\n\t}\n    return circle;\n};\n\n\nCircle.newBoundingCircle = function( vertices ){\n\tvar origin = new Vec2D();\n\tvar maxD = 0;\n\tvar i = 0;\n\tvar l = vertices.length;\n\tfor( ; i<l; i++ ){\n\t\torigin.addSelf( vertices[i] );\n\t}\n\torigin.scaleSelf( 1 / vertices.length );\n\tfor( i = 0; i<l; i++ ){\n\t\tvar d = origin.distanceToSquared( vertices[i] );\n\t\tif( d > maxD ) {\n\t\t\tmaxD = d;\n\t\t}\n\t}\n\treturn new Circle( origin, Math.sqrt( maxD ) );\n};\n\n\n\n\nCircle.prototype.containsPoint = function(p) {\n    return this.distanceToSquared(p) <= this.radius.x * this.radius.x;\n};\n\nCircle.prototype.getCircumference = function() {\n    return mathUtils.TWO_PI * this.radius.x;\n};\n\nCircle.prototype.getRadius = function() {\n    return this.radius.x;\n};\n\nCircle.prototype.getTangentPoints = function(p) {\n    var m = this.interpolateTo(p, 0.5);\n    return this.intersectsCircle(new Circle(m, m.distanceTo(p)));\n};\n\n\nCircle.prototype.intersectsCircle = function(c) {\n    var res,\n\t\tdelta = c.sub(this),\n\t\td = delta.magnitude(),\n\t\tr1 = this.radius.x,\n\t\tr2 = c.radius.x;\n    if (d <= r1 + r2 && d >= Math.abs(r1 - r2)) {\n        var a = (r1 * r1 - r2 * r2 + d * d) / (2.0 * d);\n        d = 1 / d;\n        var p = this.add(delta.scale(a * d));\n        var h = Math.sqrt(r1 * r1 - a * a);\n        delta.perpendicular().scaleSelf(h * d);\n        var i1 = p.add(delta);\n        var i2 = p.sub(delta);\n        res = [i1, i2 ];\n    }\n    return res;\n};\n\nCircle.prototype.setRadius = function(r) {\n    this.setRadii(r, r);\n    return this;\n};\n\n\nexports.Circle = Circle;\n\n\n", "\n    module.exports = require('./Ellipse').Circle;\n\n", "\n\tmodule.exports = require('./meshCommon').TriangleMesh;\n\n", "var MathUtils = require('../math/mathUtils');\nvar Vec2D = require('./Vec2D');\nvar Line2D = require('./Line2D');\nvar Circle = require('./Circle');\nvar Rect = require('./Rect');\nvar TriangleMesh = require('./mesh/TriangleMesh');\nvar has = require('../internals/has');\nvar is = require('../internals/is');\n\n    /**\n    * @class\n    * @member toxi\n    * @param {Array<Vec2D>|Vec2D...} [points] optionally provide points for the polygon\n    */\n    var Polygon2D = function(){\n        this.vertices = [];\n        var i,l;\n        if(arguments.length > 1){ //comma-separated Vec2D's were passed in\n            for(i=0, l = arguments.length;i<l;i++){\n                this.add(arguments[i].copy());\n            }\n        } else if(arguments.length == 1){\n            var arg = arguments[0];\n            if( is.Array( arg ) ){ // if it was an array of points\n                for(i=0,l = arg.length;i<l;i++){\n                    this.add(arg[i].copy());\n                }\n            }\n        } //otherwise no args were passed, and thats ok\n\n    };\n\n\n    Polygon2D.prototype = {\n        constructor: Polygon2D,\n\n        add: function(p){\n            //accept an array also\n            if( is.Array(p) ){\n                for( var i=0, l = p.length; i<l; i++ ){\n                    if( this.vertices.indexOf(p[i]) < 0 ){\n                        this.vertices.push(p[i]);\n                    }\n                }\n                return;\n            }\n            if(this.vertices.indexOf(p) < 0){\n                this.vertices.push(p);\n            }\n        },\n\n        /**\n        * centers the polygon so that its new centroid is at the given point\n        * @param {Vec2D} [origin]\n        * @return itself\n        */\n        center: function( origin ){\n            var centroid = this.getCentroid();\n            var delta = origin !== undefined ? origin.sub( centroid ) : centroid.invert();\n            for( var i=0, l = this.vertices.length; i<l; i++){\n                this.vertices[i].addSelf( delta );\n            }\n            return this;\n        },\n\n        containsPoint: function(p){\n            var num = this.vertices.length,\n                i = 0,\n                j = num-1,\n                oddNodes = false,\n                px = p.x,\n                py = p.y;\n            for(i=0;i<num;i++){\n                var vi = this.vertices[i],\n                    vj = this.vertices[j];\n                if (vi.y < py && vj.y >= py || vj.y < py && vi.y >= py) {\n                    if (vi.x + (py - vi.y) / (vj.y - vi.y) * (vj.x - vi.x) < px) {\n                        oddNodes = !oddNodes;\n                    }\n                }\n                j = i;\n            }\n            return oddNodes;\n        },\n\n        containsPolygon: function(poly) {\n            for (var i=0,num=poly.vertices.length; i<num; i++) {\n                if (!this.containsPoint(poly.vertices[i])) {\n                    return false;\n                }\n            }\n            return true;\n        },\n\n        copy: function(){\n            return new Polygon2D( this.vertices );\n        },\n\n        flipVertexOrder: function(){\n            this.vertices.reverse();\n            return this;\n        },\n\n        /**\n        * Returns the vertex at the given index. This function follows Python\n        * convention, in that if the index is negative, it is considered relative\n        * to the list end. Therefore the vertex at index -1 is the last vertex in\n        * the list.\n        * @param {Number} i index\n        * @return vertex\n        */\n        get: function( i ){\n            if( i < 0 ){\n                i += this.vertices.length;\n            }\n            return this.vertices[i];\n        },\n\n        /**\n        * Computes the length of this polygon's apothem. This will only be valid if\n        * the polygon is regular. More info: http://en.wikipedia.org/wiki/Apothem\n        * @return apothem length\n        */\n        getApothem: function() {\n            return this.vertices[0]\n                .interpolateTo(this.vertices[1], 0.5)\n                .distanceTo( this.getCentroid() );\n        },\n\n        getArea: function(){\n            var area = 0,\n                numPoints = this.vertices.length;\n            for(var i=0;i<numPoints;i++){\n                var a = this.vertices[i],\n                    b = this.vertices[(i+1) % numPoints];\n                area += a.x * b.y;\n                area -= a.y * b.x;\n            }\n            area *= 0.5;\n            return area;\n        },\n\n        getBoundingCircle: function() {\n            var Circle = require('./Circle');\n            return Circle.newBoundingCircle( this.vertices );\n        },\n\n        getBounds: function(){\n            var Rect = require('./Rect');\n            return Rect.getBoundingRect(this.vertices);\n        },\n\n        getCentroid: function(){\n            var res = new Vec2D(),\n                numPoints = this.vertices.length;\n            for(var i=0;i<numPoints;i++){\n                var a = this.vertices[i],\n                    b = this.vertices[(i+1) %numPoints],\n                    factor = a.x * b.y - b.x * a.y;\n                res.x += (a.x + b.x) * factor;\n                res.y += (a.y + b.y) * factor;\n            }\n            return res.scale(1 / (this.getArea() * 6));\n        },\n\n        getCircumference: function(){\n            var circ = 0;\n            for(var i=0,num=this.vertices.length;i<num;i++){\n                circ += this.vertices[i].distanceTo(this.vertices[(i+1)%num]);\n            }\n            return circ;\n        },\n\n        getClosestPointTo: function( p ){\n            var minD = Number.MAX_VALUE;\n            var q, c, d;\n            var edges = this.getEdges();\n            for( var i=0, len = edges.length; i<len; i++ ){\n                c = edges[i].closestPointTo( p );\n                d = c.distanceToSquared( p );\n                if( d < minD ){\n                    q = c;\n                    minD = d;\n                }\n            }\n            return q;\n        },\n\n        getClosestVertexTo: function( p ){\n            var minD = Number.MAX_VALUE;\n            var q, d, i = 0, len = this.vertices.length;\n            for( ; i<len; i++){\n                d = this.vertices[i].distanceToSquared( p );\n                if( d < minD ){\n                    q = this.vertices[i];\n                    minD = d;\n                }\n            }\n            return q;\n        },\n\n        getEdges: function() {\n            var num = this.vertices.length,\n                edges = [];\n            for (var i = 0; i < num; i++) {\n                edges[i] = new Line2D(this.vertices[i], this.vertices[(i + 1) % num]);\n            }\n            return edges;\n        },\n\n        //@deprecated\n        getNumPoints: function(){\n            return this.getNumVertices();\n        },\n\n        getNumVertices: function(){\n            return this.vertices.length;\n        },\n\n        getRandomPoint: function(){\n            var edges = this.getEdges();\n            var numEdges = edges.length;\n            var ea = edges[MathUtils.random(numEdges)],\n                eb;\n            while( eb === undefined || eb.equals( ea ) ){\n                eb = edges[ MathUtils.random(numEdges) ];\n            }\n            //pick a random point on edge A\n            var p = ea.a.interpolateTo( ea.b, Math.random() );\n            //then randomly interpolate to another point on b\n            return p.interpolateToSelf(\n                eb.a.interpolateTo( eb.b, Math.random() ),\n                Math.random()\n            );\n        },\n\n        /**\n        * Repeatedly inserts vertices as mid points of the longest edges until the\n        * new vertex count is reached.\n        * @param {Number} count new vertex count\n        * @return itself\n        */\n        increaseVertexCount: function( count ){\n            var num = this.vertices.length,\n                longestID = 0,\n                maxD = 0,\n                i = 0,\n                d,\n                m;\n\n            while( num < count ){\n                //find longest edge\n                longestID = 0;\n                maxD = 0;\n                for( i=0; i<num; i++ ){\n                    d = this.vertices[i].distanceToSquared( this.vertices[ (i+1) % num ] );\n                    if( d > maxD ){\n                        longestID = i;\n                        maxD = d;\n                    }\n                }\n                //insert mid point of longest segment\n                m = this.vertices[longestID]\n                    .add(this.vertices[(longestID + 1) % num])\n                    .scaleSelf(0.5);\n                //push this into the array inbetween the 2 points\n                this.vertices.splice( longestID+1, 0, m );\n                num++;\n            }\n            return this;\n        },\n\n        intersectsPolygon: function(poly) {\n            if (!this.containsPolygon(poly)) {\n                var edges=this.getEdges();\n                var pedges=poly.getEdges();\n                for(var i=0, n=edges.length; i < n; i++) {\n                    for(var j=0, m = pedges.length, e = edges[i]; j < m; j++) {\n                        if (e.intersectLine(pedges[j]).getType() == Line2D.LineIntersection.Type.INTERSECTING) {\n                            return true;\n                        }\n                    }\n                }\n                return false;\n            } else {\n                return true;\n            }\n        },\n\n        isClockwise: function(){\n            return this.getArea() > 0;\n        },\n\n        /**\n        * Checks if the polygon is convex.\n        * @return true, if convex.\n        */\n        isConvex: function(){\n            var isPositive = false,\n                num = this.vertices.length,\n                prev,\n                next,\n                d0,\n                d1,\n                newIsP;\n\n            for( var i = 0; i < num; i++ ){\n                prev = (i===0) ? num -1 : i - 1;\n                next = (i===num-1) ? 0 : i + 1;\n                d0 = this.vertices[i].sub(this.vertices[prev]);\n                d1 = this.vertices[next].sub(this.vertices[i]);\n                newIsP = (d0.cross(d1) > 0);\n                if( i === 0 ) {\n                    isPositive = true;\n                } else if( isPositive != newIsP ) {\n                    return false;\n                }\n            }\n            return true;\n        },\n\n        /**\n        * Given the sequentially connected points p1, p2, p3, this function returns\n        * a bevel-offset replacement for point p2.\n        *\n        * Note: If vectors p1->p2 and p2->p3 are exactly 180 degrees opposed, or if\n        * either segment is zero then no offset will be applied.\n        *\n        * @param x1\n        * @param y1\n        * @param x2\n        * @param y2\n        * @param x3\n        * @param y3\n        * @param distance\n        * @param out\n        *\n        * @see http://alienryderflex.com/polygon_inset/\n        */\n        _offsetCorner: function( x1, y1, x2, y2, x3, y3, distance, out ){\n            var c1 = x2,\n                d1 = y2,\n                c2 = x2,\n                d2 = y2;\n            var dx1,\n                dy1,\n                dist1,\n                dx2,\n                dy2,\n                dist2,\n                insetX,\n                insetY;\n\n            dx1 = x2-x1;\n            dy1 = y2-y1;\n            dist1 = Math.sqrt(dx1*dx1 + dy1*dy1);\n            dx2 = x3-x2;\n            dy2 = y3-y2;\n            dist2 = Math.sqrt(dx2*dx2 + dy2*dy2);\n\n            if( dist1 < MathUtils.EPS || dist2 < MathUtils.EPS ){\n                return;\n            }\n\n            dist1 = distance / dist1;\n            dist2 = distance / dist2;\n\n            insetX = dy1 * dist1;\n            insetY = -dx1 * dist1;\n            x1 += insetX;\n            c1 += insetX;\n            y1 += insetY;\n            d1 += insetY;\n            insetX = dy2 * dist2;\n            insetY = -dx2 * dist2;\n            x3 += insetX;\n            c2 += insetX;\n            y3 += insetY;\n            d2 += insetY;\n\n            if( c1 === c2 && d1 === d2 ){\n                out.set(c1,d1);\n                return;\n            }\n\n            var l1 = new Line2D( new Vec2D(x1,y1), new Vec2D(c1,d1) ),\n                l2 = new Line2D( new Vec2D(c2,d2), new Vec2D(x3,y3) ),\n                isec = l1.intersectLine(l2),\n                ipos = isec.getPos();\n            if( ipos !== null || ipos !== undefined ){\n                out.set(ipos);\n            }\n        },\n\n        /**\n        * Moves each line segment of the polygon in/outward perpendicular by the\n        * given distance. New line segments and polygon vertices are created by\n        * computing the intersection points of the displaced segments. Choosing an\n        * too large displacement amount will result in deformation/undefined\n        * behavior with various self intersections. Should that happen, please try\n        * to clean up the shape using the {@link #toOutline()} method.\n        *\n        * @param distance\n        *            offset/inset distance (negative for inset)\n        * @return itself\n        */\n        offsetShape: function( distance ){\n            var v = this.vertices;\n            var num = v.length - 1;\n            if( num > 1 ){\n                var startX = v[0].x,\n                    startY = v[0].y,\n                    c = v[num].x,\n                    d = v[num].y,\n                    e = startX,\n                    f = startY,\n                    a,\n                    b;\n                for( var i = 0; i < num; i++ ){\n                    a = c;\n                    b = d;\n                    c = e;\n                    d = f;\n                    e = v[i + 1].x;\n                    f = v[i + 1].y;\n                    this._offsetCorner(a, b, c, d, e, f, distance, v[i]);\n                }\n                this._offsetCorner(c, d, e, f, startX, startY, distance, v[num]);\n            }\n            return this;\n        },\n\n        /**\n        * Reduces the number of vertices in the polygon based on the given minimum\n        * edge length. Only vertices with at least this distance between them will\n        * be kept.\n        *\n        * @param minEdgeLen\n        * @return itself\n        */\n        reduceVertices: function( minEdgeLen ){\n            minEdgeLen *= minEdgeLen;\n            var vs = this.vertices,\n                reduced = [],\n                prev = vs[0],\n                num = vs.length - 1,\n                vec;\n            reduced.push(prev);\n            for( var i = 0; i < num; i++ ){\n                vec = vs[i];\n                if( prev.distanceToSquared(vec) >= minEdgeLen ){\n                    reduced.push(vec);\n                    prev = vec;\n                }\n            }\n            if( vs[0].distanceToSquared(vs[num]) >= minEdgeLen ){\n                reduced.push(vs[num]);\n            }\n            this.vertices = reduced;\n            return this;\n        },\n\n\n        /**\n        * Removes duplicate vertices from the polygon. Only successive points are\n        * recognized as duplicates.\n        * @param {Number} tolerance snap distance for finding duplicates\n        * @return itself\n        */\n        removeDuplicates: function( tolerance ){\n            //if tolerance is 0, it will be faster to just use 'equals' method\n            var equals = tolerance ? 'equalsWithTolerance' : 'equals';\n            var p, prev, i = 0, num = this.vertices.length;\n            var last;\n            for( ; i<num; i++ ){\n                p = this.vertices[i];\n                //if its the 'equals' method tolerance will just be ingored\n                if( p[equals]( prev, tolerance ) ){\n                    //remove from array, step back counter\n                    this.vertices.splice( i, 1 );\n                    i--;\n                    num--;\n                } else {\n                    prev = p;\n                }\n            }\n            num = this.vertices.length;\n            if( num >  0 ){\n                last = this.vertices[num-1];\n                if( last[equals]( this.vertices[0], tolerance ) ){\n                    this.vertices.splice( num-1, 1 );\n                }\n            }\n            return this;\n        },\n\n        rotate: function(theta) {\n            for (var i=0, num=this.vertices.length; i < num; i++) {\n                this.vertices[i].rotate(theta);\n            }\n            return this;\n        },\n\n        scale: function( x, y ) {\n            if (arguments.length==1) {\n                var arg = arguments[0];\n                if( has.XY( arg ) ){\n                    x=arg.x;\n                    y=arg.y;\n                } else {\n                    // uniform scale\n                    x=arg;\n                    y=arg;\n                }\n            } else if (arguments.length==2) {\n                x=arguments[0];\n                y=arguments[1];\n            } else {\n                throw \"Invalid argument(s) passed.\";\n            }\n            for (var i=0, num=this.vertices.length; i < num; i++) {\n                this.vertices[i].scaleSelf(x, y);\n            }\n            return this;\n        },\n\n        scaleSize: function( x, y ){\n            var centroid;\n            if(arguments.length===1) {\n                var arg = arguments[0];\n                if( has.XY(arg) ){\n                    x = arg.x;\n                    y = arg.y;\n                } else {\n                    //uniform\n                    x = arg;\n                    y = arg;\n                }\n            } else if ( arguments.length===2) {\n                x = arguments[0];\n                y = arguments[1];\n            } else {\n                throw new Error('Invalid argument(s) passed.');\n            }\n            centroid = this.getCentroid();\n            for( var i = 0, l = this.vertices.length; i<l; i++ ){\n                var v = this.vertices[i];\n                v.subSelf(centroid).scaleSelf(x,y).addSelf(centroid);\n            }\n            return this;\n        },\n\n        smooth: function(amount, baseWeight){\n            var centroid = this.getCentroid();\n            var num = this.vertices.length;\n            var filtered = [];\n            for(var i=0,j=num-1,k=1;i<num;i++){\n                var a = this.vertices[i];\n                var dir = this.vertices[j].sub(a).addSelf(this.vertices[k].sub(a))\n                    .addSelf(a.sub(centroid).scaleSelf(baseWeight));\n                filtered.push(a.add(dir.scaleSelf(amount)));\n                j++;\n                if(j == num){\n                    j=0;\n                }\n                k++;\n                if(k == num){\n                    k=0;\n                }\n            }\n            this.vertices = filtered;\n            return this;\n        },\n\n        toMesh: function( mesh, centroid2D, extrude ){\n            mesh = mesh || new TriangleMesh();\n            var num = this.vertices.length;\n            centroid2D = centroid2D || this.getCentroid();\n            var centroid = centroid2D.to3DXY();\n            centroid.z = extrude;\n            var bounds = this.getBounds(),\n                boundScale = new Vec2D(1/bounds.width, 1/bounds.height),\n                uvC = centroid2D.sub(bounds.getTopLeft()).scaleSelf(boundScale),\n                a, b, uvA, uvB;\n\n            for( var i=1; i<=num; i++ ){\n                a = this.vertices[i % num];\n                b = this.vertices[i - 1];\n                uvA = a.sub(bounds.getTopLeft()).scaleSelf(boundScale);\n                uvB = b.sub(bounds.getTopLeft()).scaleSelf(boundScale);\n                mesh.addFace(centroid, a.to3DXY(), b.to3DXY(), uvC, uvA, uvB);\n            }\n            return mesh;\n        },\n\n        toPolygon2D: function(){\n            return this;\n        },\n\n        toString: function(){\n            var s = \"\";\n            for(var i=0;i<this.vertices.length;i++){\n                s += this.vertices[i];\n                if(i<this.vertices.length-1){\n                    s+= \", \";\n                }\n            }\n            return s;\n        },\n\n        translate: function() {\n            var x,y;\n            if (arguments.length==1 && has.XY( arguments[0] ) ){\n                x=arguments[0].x;\n                y=arguments[0].y;\n            } else if (arguments.length==2) {\n                x=arguments[0];\n                y=arguments[1];\n            } else {\n                throw \"Invalid argument(s) passed.\";\n            }\n            for (var i=0, num=this.vertices.length; i < num; i++) {\n                this.vertices[i].addSelf(x, y);\n            }\n            return this;\n        }\n    };\n\n    /**\n    * Constructs a new regular polygon from the given base line/edge.\n    * @param {Vec2D} baseA left point of the base edge\n    * @param {Vec2D} baseB right point of the base edge\n    * @param {Number} res number of polygon vertices\n    * @return polygon\n    */\n    Polygon2D.fromBaseEdge = function( baseA, baseB, res ){\n        var theta = -( MathUtils.PI - (MathUtils.PI*(res-2) / res) ),\n            dir = baseB.sub( baseA ),\n            prev = baseB,\n            poly = new Polygon2D( baseA, baseB ),\n            p;\n        for( var i=0; i< res-1; i++){\n            p = prev.add( dir.getRotated(theta*i) );\n            poly.add( p );\n            prev = p;\n        }\n        return poly;\n    };\n\n    /**\n    * Constructs a regular polygon from the given edge length and number of\n    * vertices. This automatically computes the radius of the circle the\n    * polygon is inscribed in.\n    * More information: http://en.wikipedia.org/wiki/Regular_polygon#Radius\n    *\n    * @param {Number} len desired edge length\n    * @param {Number} res number of vertices\n    * @return polygon\n    */\n    Polygon2D.fromEdgeLength = function( len, res ){\n        var Circle = require('./Circle');\n        return new Circle( Polygon2D.getRadiusForEdgeLength(len,res) ).toPolygon2D( res );\n    };\n\n    /**\n    * Computes the radius of the circle the regular polygon with the desired\n    * edge length is inscribed in\n    * @param {Number} len edge length\n    * @param {Number} res number of polygon vertices\n    * @return radius\n    */\n    Polygon2D.getRadiusForEdgeLength = function( len, res ){\n        return len / ( 2 * MathUtils.sin(MathUtils.PI/res) );\n    };\n\n    module.exports = Polygon2D;\n\n", "\n\n    var\tinternals = require('../internals'),\n        mathUtils = require('../math/mathUtils'),\n        Vec2D = require('./Vec2D'),\n        Line2D = require('./Line2D');\n\n    /**\n     * @class\n     * @member toxi\n     * @param {Number} [x]\n     * @param {Number} [y]\n     * @param {Number} [width]\n     * @param {Number} [height]\n     */\n    var\tRect = function(a,b,width,height){\n        if(arguments.length === 2){ //then it should've been 2 Vec2D's\n            if( !( internals.has.XY( a ) ) ){\n                throw new Error(\"Rect received incorrect parameters\");\n            } else {\n                this.x = a.x;\n                this.y = a.y;\n                this.width = b.x - this.x;\n                this.height = b.y - this.y;\n            }\n        } else if(arguments.length == 4){\n            this.x = a;\n            this.y = b;\n            this.width = width;\n            this.height = height;\n        } else if(arguments.length === 1){ //object literal with x,y,width,height\n            var o = arguments[0];\n            if( internals.has.XYWidthHeight( o ) ){\n                this.x = o.x;\n                this.y = o.y;\n                this.width = o.width;\n                this.height = o.height;\n            }\n        } else if(arguments.length > 0){\n            throw new Error(\"Rect received incorrect parameters\");\n        }\n    };\n\n    Rect.fromCenterExtent = function(center,extent){\n        return new Rect(center.sub(extent),center.add(extent));\n    };\n\n\n    Rect.getBoundingRect = function( points ){\n        var first = points[0];\n        var bounds = new Rect(first.x, first.y, 0, 0);\n        for (var i = 1, num = points.length; i < num; i++) {\n            bounds.growToContainPoint(points[i]);\n        }\n        return bounds;\n    };\n\n    Rect.prototype = {\n        containsPoint: function(p){\n            var px = p.x;\n            var py = p.y;\n            if(px < this.x || px >= this.x + this.width){\n                return false;\n            }\n            if(py < this.y || py >= this.y + this.height){\n                return false;\n            }\n            return true;\n        },\n\n        copy: function(){\n            return new Rect(this.x,this.y,this.width,this.height);\n        },\n\n        getArea: function(){\n            return this.width * this.height;\n        },\n\n        getAspect: function(){\n            return this.width / this.height;\n        },\n\n        getBottom: function(){\n            return this.y + this.height;\n        },\n\n        getBottomRight: function(){\n            return new Vec2D(this.x + this.width, this.y + this.height);\n        },\n\n        getCentroid: function(){\n            return new Vec2D(this.x + this.width * 0.5, this.y + this.height * 0.5);\n        },\n\n        getDimensions: function(){\n            return new Vec2D(this.width,this.height);\n        },\n\n        getEdge: function(id){\n            var edge;\n            switch(id){\n                case 0:\n                    edge = new Line2D(\n                        new Vec2D(this.x,this.y),\n                        new Vec2D(this.x + this.width, this.y)\n                    );\n                    break;\n                case 1:\n                    edge = new Line2D(\n                        new Vec2D(this.x + this.width, this.y),\n                        new Vec2D(this.x + this.width, this.y + this.height)\n                    );\n                    break;\n                case 2:\n                    edge = new Line2D(\n                        new Vec2D(this.x, this.y + this.height),\n                        new Vec2D(this.x + this.width, this.y + this.height)\n                    );\n                    break;\n                case 3:\n                    edge = new Line2D(\n                        new Vec2D(this.x,this.y),\n                        new Vec2D(this.x,this.y+this.height)\n                    );\n                    break;\n                default:\n                    throw new Error(\"edge ID needs to be 0...3\");\n            }\n            return edge;\n        },\n\n        getLeft: function(){\n            return this.x;\n        },\n\n        getRight: function(){\n            return this.x + this.width;\n        },\n\n        getTop: function(){\n            return this.y;\n        },\n\n        getTopLeft: function(){\n            return new Vec2D(this.x,this.y);\n        },\n\n        growToContainPoint: function( p ){\n            if (!this.containsPoint(p)) {\n                if (p.x < this.x) {\n                    this.width = this.getRight() - p.x;\n                    this.x = p.x;\n                } else if (p.x > this.getRight()) {\n                    this.width = p.x - this.x;\n                }\n                if (p.y < this.y) {\n                    this.height = this.getBottom() - p.y;\n                    this.y = p.y;\n                } else if (p.y > this.getBottom()) {\n                    this.height = p.y - this.y;\n                }\n            }\n            return this;\n        },\n\n        intersectsRay: function(ray,minDist,maxDist){\n            //returns Vec2D of point intersection\n            var invDir = ray.getDirection().reciprocal();\n            var signDirX = invDir.x < 0;\n            var signDirY = invDir.y < 0;\n            var min = this.getTopLeft();\n            var max = this.getBottomRight();\n            var bbox = signDirX ? max : min;\n            var tmin = (bbox.x - ray.x) * invDir.x;\n            bbox = signDirX ? min : max;\n            var tmax = (bbox.x - ray.x) * invDir.x;\n            bbox = signDirY ? max : min;\n            var tymin = (bbox.y - ray.y) * invDir.y;\n            bbox = signDirY ? min : max;\n            var tymax = (bbox.y - ray.y) * invDir.y;\n            if((tmin > tymax) || (tymin > tmax)){\n                return undefined;\n            }\n            if(tymin > tmin){\n                tmin = tymin;\n            }\n            if (tymax < tmax) {\n                tmax = tymax;\n            }\n            if ((tmin < maxDist) && (tmax > minDist)) {\n                return ray.getPointAtDistance(tmin);\n            }\n            return undefined;\n        },\n\n        intersectsRect: function(r){\n            return !(this.x > r.x + r.width || this.x + this.width < r.x || this.y > r.y + r.height || this.y + this.height < r.y);\n        },\n\n        scale: function(s){\n            var c = this.getCentroid();\n            this.width *= s;\n            this.height *= s;\n            this.x = c.x - this.width * 0.5;\n            this.y = c.y - this.height * 0.5;\n            return this;\n        },\n\n        set: function(x,y,width,height){\n            if(arguments.length === 1){\n                this.y = x.y;\n                this.width = x.width;\n                this.height = x.height;\n                this.x = x.x;\n            } else if(arguments.length === 4) {\n                this.x = x;\n                this.y = y;\n                this.width = width;\n                this.height = height;\n            } else {\n                throw new Error(\"Rect set() received wrong parameters\");\n            }\n        },\n\n        setDimensions: function(dim){\n            if( arguments.length == 2 ){\n                dim = { x: arguments[0], y: arguments[1] };\n            }\n            this.width = dim.x;\n            this.height = dim.y;\n            return this;\n        },\n\n        setPosition: function(pos){\n            this.x = pos.x;\n            this.y = pos.y;\n            return this;\n        },\n\n        toPolygon2D: function(){\n            var Polygon2D = require('./Polygon2D');\n            var poly = new Polygon2D();\n            poly.add(new Vec2D(this.x,this.y));\n            poly.add(new Vec2D(this.x+this.width,this.y));\n            poly.add(new Vec2D(this.x+this.width,this.y+this.height));\n            poly.add(new Vec2D(this.x,this.y+this.height));\n            return poly;\n        },\n\n        toString: function(){\n            return \"rect: {x: \"+this.x +\", y: \"+this.y+ \", width: \"+this.width+ \", height: \"+this.height+\"}\";\n        },\n\n        union: function(r){\n            var tmp = mathUtils.max(this.x + this.width, r.x + r.width);\n            this.x = mathUtils.min(this.x,r.x);\n            this.width = tmp - this.x;\n            tmp = mathUtils.max(this.y + this.height, r.y + r.height);\n            this.y = mathUtils.min(this.y,r.y);\n            this.height = tmp - this.y;\n            return this;\n        }\n    };\n\n\n    module.exports = Rect;\n\n", "var Vec2D = require('./Vec2D');\nvar is = require('../internals/is');\nvar BernsteinPolynomial = require('./BernsteinPolynomial');\n\n/**\n * @class\n * @member toxi\n * @param {Vec2D[]} points array of Vec2D's\n * @param {BernsteinPolynomial} [bernsteinPoly]\n */\nvar\tSpline2D = function(points, bernsteinPoly, tightness){\n\tif( arguments.length === 1 && !is.Array( points ) && is.Object(points)){\n\t\t//if its an options object\n\t\tbernsteinPoly = bernsteinPoly || points.bernsteinPoly;\n\t\ttightness = tightness || points.tightness;\n\t\tpoints = points.points;\n\t}\n\tvar i = 0, l;\n\tthis.pointList = [];\n\tif( typeof tightness !== 'number' ){\n\t\ttightness = Spline2D.DEFAULT_TIGHTNESS;\n\t}\n\tthis.setTightness(tightness);\n\t//this may be undefined\n\tthis.bernstein = bernsteinPoly;\n\tif( points !== undefined ){\n\t\tfor(i = 0, l = points.length; i<l; i++){\n\t\t\tthis.add( points[i].copy() );\n\t\t}\n\t}\n\tthis.coeffA = [];\n\tthis.delta = [];\n\tthis.bi = [];\n\tfor (i = 0; i < this.numP; i++) {\n\t\tthis.coeffA[i] = new Vec2D();\n\t\tthis.delta[i] = new Vec2D();\n\t\tthis.bi[i] = 0;\n\t}\n\tthis.bi = [];\n};\n\n\nSpline2D.prototype = {\n\tadd: function(p){\n\t\tthis.pointList.push(p.copy());\n\t\tthis.numP = this.pointList.length;\n\t\treturn this;\n\t},\n\n\n\tcomputeVertices: function(res){\n\t\tthis.updateCoefficients();\n        if( res < 1 ){\n            res = 1;\n        }\n        res++;\n\t\tif (this.bernstein === undefined || this.bernstein.resolution != res) {\n\t\t\tthis.bernstein = new BernsteinPolynomial(res);\n\t\t}\n\t\tvar bst = this.bernstein;\n\t\tthis.findCPoints();\n\t\tvar deltaP = new Vec2D();\n\t\tvar deltaQ = new Vec2D();\n        res--;\n        var verticeCount = (this.numP - 1) * res + 1;\n        if ( typeof(this.vertices) == 'undefined' || this.vertices.length != verticeCount ) {\n        \tthis.vertices = Array.apply( null, Array( verticeCount ) ).map( function () { return new Vec2D(); } );\n        }\n\t\tvar vertexIdx = 0;\n\t\tfor (var i = 0; i < this.numP - 1; i++) {\n\t\t\tvar p = this.points[i];\n\t\t\tvar q = this.points[i + 1];\n\t\t\tdeltaP.x = this.delta[i].x + p.x;\n\t\t\tdeltaP.y = this.delta[i].y + p.y;\n\t\t\tdeltaQ.x = q.x - this.delta[i + 1].x;\n\t\t\tdeltaQ.y = q.y - this.delta[i + 1].y;\n\n\t\t\tfor (var k = 0; k < res; k++) {\n\t\t\t\tvar x = p.x * bst.b0[k] + deltaP.x * bst.b1[k] +\n\t\t\t\tdeltaQ.x * bst.b2[k] +\n\t\t\t\tq.x * bst.b3[k];\n\t\t\t\tvar y = p.y * bst.b0[k] + deltaP.y * bst.b1[k] +\n\t\t\t\tdeltaQ.y * bst.b2[k] +\n\t\t\t\tq.y * bst.b3[k];\n\t\t\t\tthis.vertices[ vertexIdx ].x = x;\n\t\t\t\tthis.vertices[ vertexIdx ].y = y;\n\t\t\t\tvertexIdx++;\n\t\t\t}\n\t\t}\n\t\tthis.vertices[ vertexIdx ].x = this.vertices[ vertexIdx - 1 ].x;\n\t\tthis.vertices[ vertexIdx ].y = this.vertices[ vertexIdx - 1 ].y;\n\t\treturn this.vertices;\n\t},\n\n\tfindCPoints: function(){\n\t\tthis.bi[1] = -0.25;\n\t\tvar i, p0, p2, d0;\n\t\tp0 = this.pointList[0];\n\t\tp2 = this.pointList[2];\n\t\td0 = this.delta[0];\n\t\tthis.coeffA[1].x = (p2.x - p0.x - d0.x) * this.tightness;\n\t\tthis.coeffA[1].y = (p2.y - p0.y - d0.y) * this.tightness;\n\n\t\tfor (i = 2; i < this.numP - 1; i++) {\n\t\t\tthis.bi[i] = -1 / (this.invTightness + this.bi[i - 1]);\n\t\t\tthis.coeffA[i].x = -(this.points[i + 1].x - this.points[i - 1].x - this.coeffA[i - 1].x) *this.bi[i];\n\t\t\tthis.coeffA[i].y = -(this.points[i + 1].y - this.points[i - 1].y - this.coeffA[i - 1].y) *this.bi[i];\n\t\t}\n\t\tfor (i = this.numP - 2; i > 0; i--) {\n\t\t\tthis.delta[i].x = this.coeffA[i].x + this.delta[i + 1].x * this.bi[i];\n\t\t\tthis.delta[i].y = this.coeffA[i].y + this.delta[i + 1].y * this.bi[i];\n\t\t}\n\t},\n\n\tgetDecimatedVertices: function(step,doAddFinalVertex){\n\t\tif(doAddFinalVertex === undefined)doAddFinalVertex = true;\n\t\tif(this.vertices === undefined || this.vertices.length < 2){\n\t\t\tthis.computeVertices(Spline2D.DEFAULT_RES);\n\t\t}\n\t\tvar arcLen = this.getEstimatedArcLength();\n\t\tvar uniform = [];\n\t\tvar delta = step / arcLen;\n\t\tvar currIdx = 0;\n\t\tfor(var t =0; t<1.0; t+= delta){\n\t\t\tvar currT = t * arcLen;\n\t\t\twhile(currT >= this.arcLenIndex[currIdx]){\n\t\t\t\tcurrIdx++;\n\t\t\t}\n\t\t\tvar p = this.vertices[currIdx - 1];\n\t\t\tvar q = this.vertices[currIdx];\n\t\t\tvar frac = ((currT - this.arcLenIndex[currIdx - 1]) / (this.arcLenIndex[currIdx] - this.arcLenIndex[currIdx - 1]));\n\n\t\t\tvar i = p.interpolateTo(q,frac);\n\t\t\tuniform.push(i);\n\t\t}\n\t\tif(doAddFinalVertex){\n\t\t\tuniform.push(this.vertices[this.vertices.length-1]);\n\t\t}\n\t\treturn uniform;\n\t},\n\n\n\tgetEstimatedArcLength: function(){\n\t\tvar len;\n\t\tvar arcLen = 0;\n\n\t\tif(this.arcLenIndex === undefined || (this.arcLenIndex !== undefined && this.arcLenIndex.length != this.vertices.length)){\n\t\t\tthis.arcLenIndex = [0];\n\t\t\tlen = this.vertices.length;\n\t\t}\n\t\telse {\n\t\t\tlen = this.arcLenIndex.length;\n\t\t}\n\n\t\tfor(var i=1;i<len;i++){\n\t\t\tvar p = this.vertices[i-1];\n\t\t\tvar q = this.vertices[i];\n\t\t\tarcLen += p.distanceTo(q);\n\t\t\tthis.arcLenIndex[i] = arcLen;\n\t\t}\n\n\t\treturn arcLen;\n\t},\n\n\n\tgetNumPoints: function(){\n\t\treturn this.numP;\n\t},\n\n\tgetPointList: function(){\n\t\treturn this.pointList;\n\t},\n\n\tgetTightness: function(){\n\t\treturn this.tightness;\n\t},\n\n\tsetPointList: function(plist){\n\t\tthis.pointList =plist.slice(0);\n\t\treturn this;\n\t},\n\n\tsetTightness: function(tight){\n\t\tthis.tightness = tight;\n\t\tthis.invTightness = 1 / this.tightness;\n\t\treturn this;\n\t},\n\n\tupdateCoefficients: function(){\n\t\tthis.numP = this.pointList.length;\n\t\tif(this.points === undefined || (this.points !== undefined && this.points.length != this.numP)) {\n\t\t\tthis.coeffA = [];\n\t\t\tthis.delta = [];\n\t\t\tthis.bi = [];\n\t\t\tfor(var i=0;i<this.numP; i++){\n\t\t\t\tthis.coeffA[i] = new Vec2D();\n\t\t\t\tthis.delta[i] = new Vec2D();\n\t\t\t}\n\t\t\tthis.setTightness(this.tightness);\n\t\t}\n\t\tthis.points = this.pointList.slice(0);\n\t}\n\n};\n\nSpline2D.DEFAULT_TIGHTNESS = 0.25;\nSpline2D.DEFAULT_RES = 16;\n\nmodule.exports = Spline2D;\n\n"],
  "mappings": "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",
  "names": ["i", "v", "a", "x", "y", "z", "c", "b", "f", "k", "l", "l", "v", "a", "b", "c", "a", "b", "c", "y", "z", "q", "w", "x", "i", "k", "v", "i", "l", "a", "b", "q", "v", "Sphere", "i", "l", "x", "y", "x2", "y2", "v", "a", "b", "c", "f", "l", "i", "x", "y", "z", "TriangleMesh", "x2", "z2", "w", "a", "b", "c", "f", "a", "b", "c", "v", "w", "i", "a", "b", "v", "l", "Ray2D", "a", "b", "Line2D", "a", "b", "c", "i", "v", "x", "y", "l", "i", "l", "a", "b", "Circle", "Rect", "q", "c", "v", "f", "x", "y", "k", "a", "b", "i", "c", "x", "y", "i", "l", "q", "k", "x", "y"]
}
